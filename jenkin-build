def agentLabel    
if (BRANCH_NAME == "develop") {
    agentLabel = "master"
} else {
    agentLabel = "docker-slave-agent1 || docker-slave-agent2 || docker-slave-agent3"
}    
pipeline {
    agent { label agentLabel }
        tools {
                nodejs "nodejs"
        }
        environment {
                CHROME_BIN = "/bin/google-chrome"
                branchName = "${GIT_BRANCH}"
        }
        options {
                timeout(time: 30, unit: "MINUTES")
                buildDiscarder logRotator(artifactDaysToKeepStr: "", artifactNumToKeepStr: "", daysToKeepStr: "2", numToKeepStr: "2")
        }
        stages {
                stage("Stop Old Build") {
                        steps {
                                milestone label: "", ordinal: Integer.parseInt(env.BUILD_ID) - 1
                                milestone label: "", ordinal: Integer.parseInt(env.BUILD_ID)
                        }
                }
                stage('Validating Branch') {
                when {
                    not {
                        anyOf {
                            branch 'feat/*';
                            branch 'feature/*'
                            branch 'bug/*'
                            branch 'bugfix/*'
                            branch 'release/*'
                            branch 'hotfix/*'
                            branch 'PR-*'
			    branch 'e2e/*'
			    branch 'develop'
			    branch 'fix/*'
                            }
                        }
                    }
                    steps {
                            echo ('Not a Valid Branch Name')
                            sh 'do-non.sh'
                        }
                }
                stage("install node modules") {
                        steps {
                                sh "yarn install"
                        }
                }

                stage("lint check") {
                        steps {

                                sh "NX_BRANCH=${GIT_BRANCH} yarn nx affected:lint --parallel"
                        }
                }
                stage("unit test") {
                        steps {
                                sh "NX_BRANCH=${GIT_BRANCH} yarn nx affected:test --parallel"
                        }
                }
                stage('yarn unit test coverage') {
			steps {
				sh 'yarn test --coverage'
			}
                }
                stage("Sonarqube") {
                        environment {
                                scannerHome = tool "sonarqube"
                        }
                        steps {
                                withSonarQubeEnv("sonarqube") {
                                        sh "${scannerHome}/bin/sonar-scanner"
                                }

                        }
                }
                stage("Quality Gate") {
                        steps {
                                timeout(time: 1, unit: "HOURS") {
                                        waitForQualityGate abortPipeline: true
                                }
                        }
                }
                stage("building production") {
                        steps {
                                sh "NX_BRANCH=${GIT_BRANCH} yarn nx affected:build --prod --parallel"
                        }
                }
                stage("building storybook") {
                        steps {
                                sh "NX_BRANCH=${GIT_BRANCH} yarn nx run storybook-app:build-storybook"
                        }
                }
        }
        post {
                 success {
                         script {
                                if(env.GIT_BRANCH.startsWith('release') || env.GIT_BRANCH.startsWith('hotfix'))
                                {
                                build job: 'Build-BFF',
                               parameters: [
                                    [$class: 'StringParameterValue', name: 'BRANCH_NAME', value: "${env.GIT_BRANCH}"],
                                    [$class: 'StringParameterValue', name: 'VERSION', value: "${BUILD_NUMBER}"]
                                    ]
                                build job: 'Build-FE',
                                parameters: [
                                    [$class: 'StringParameterValue', name: 'BRANCH_NAME', value: "${env.GIT_BRANCH}"],
                                    [$class: 'StringParameterValue', name: 'VERSION', value: "${BUILD_NUMBER}"]
                                    ]
                                }
                         }  
                }
                always {
                        jiraSendBuildInfo site: 'lla-io.atlassian.net'
                        cleanWs()
                }
        }

}
