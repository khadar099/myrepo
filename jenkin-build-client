pipeline{
    agent {label 'master'}
    tools {nodejs "nodejs"}
environment {
        CHROME_BIN = "/bin/google-chrome"
        BRANCH = "${env.BRANCH_NAME}"
        CLIENT = BRANCH.replaceAll('/', '-').toLowerCase()
        VERSION = "${env.VERSION == 'latest' ? "${BUILD_NUMBER}" : "${env.VERSION}"}"
        YARN_REPO_NAME = "vtr-yarn-package"
        CLIENT_APP_REPO_NAME = "vtr-client-app-non-prod"
        CLIENT_APP_REPO_PROD = "vtr-client-app-prod"
        ECR = "712965751785.dkr.ecr.us-east-1.amazonaws.com"
        ECR_PROD = "441688260374.dkr.ecr.us-east-1.amazonaws.com"
        ECR_REGION = "us-east-1"
    }
options {
      timeout(time: 20, unit: "MINUTES") 
      buildDiscarder logRotator(artifactDaysToKeepStr: "", artifactNumToKeepStr: "", daysToKeepStr: "2", numToKeepStr: "2")
  }    
stages
{
stage("Stop Old Build") {
            steps {
                milestone label: "", ordinal:  Integer.parseInt(env.BUILD_ID) - 1
                milestone label: "", ordinal:  Integer.parseInt(env.BUILD_ID)
            }
        }
stage("Docker_login")
{
    steps {
        script {
                 if (env.BRANCH_NAME.startsWith('release') || env.BRANCH_NAME.startsWith('hotfix'))
                 {
            sh "aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR_PROD}"
                 }
                else {
            sh "aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR}"
                }     
    }
}
}
stage("yarn:pull")
{
    steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            sh "docker pull ${ECR}/${YARN_REPO_NAME}:yarn-latest"
        }
    }
} 
stage("image: yarn install")
{
    steps {
        sh "docker build -t yarn:latest -f devops/docker-yarn ."
        sh "docker tag yarn:latest ${ECR}/${YARN_REPO_NAME}:yarn-latest"
    }
}
stage("yarn package:push")
{
    steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            sh "docker push ${ECR}/${YARN_REPO_NAME}:yarn-latest"
        }
    }
} 
stage("image: client app")
{
    steps {
        sh "docker build -t ${CLIENT}:${VERSION} -f devops/docker-client ."
    }
}
stage("image:tag")
{
    steps {
        script {
                 if (env.BRANCH_NAME.startsWith('release') || env.BRANCH_NAME.startsWith('hotfix'))
   {
          sh "docker tag ${CLIENT}:${VERSION} ${ECR_PROD}/${CLIENT_APP_REPO_PROD}:${CLIENT}-${VERSION}"
        }
   else
    {
          sh "docker tag ${CLIENT}:${VERSION} ${ECR}/${CLIENT_APP_REPO_NAME}:${CLIENT}-${VERSION}"
        }
    }  
}
}
stage("image:push")
{
    steps {
        script {
                 if (env.BRANCH_NAME.startsWith('release') || env.BRANCH_NAME.startsWith('hotfix'))
                 {
        sh "docker push ${ECR_PROD}/${CLIENT_APP_REPO_PROD}:${CLIENT}-${VERSION}"
    }
  else {
        sh "docker push ${ECR}/${CLIENT_APP_REPO_NAME}:${CLIENT}-${VERSION}"
    }  
   }
} 
}
stage("clearing_docker_images")
{
    steps {
        sh "docker rmi ${CLIENT}:${VERSION}"
        sh "docker rmi yarn:latest || true"
    }
}      
}
post {
     success {
         script {
             if (env.BRANCH_NAME == 'develop')
             {
            build job: 'VTR-Non-Prod-Release-FE',
                parameters: [
                  [$class: 'StringParameterValue', name: 'BRANCH_NAME', value: "${BRANCH}"],
                    [$class: 'StringParameterValue', name: 'VERSION', value: "${VERSION}"]
                ]                           
            }
        }
     }
        // Clean after build
        always {
            cleanWs()
        }
    }
}
