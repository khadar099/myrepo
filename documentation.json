{
    "pipes": [],
    "interfaces": [
        {
            "name": "CategoriesState",
            "id": "interface-CategoriesState-3cbbbcf9ba7fe6e3fd03c17c35c4cba8",
            "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\r\nimport * as categoriesActions from '../actions/categories.actions';\r\n\r\nexport const featureKey = 'categories';\r\n\r\nexport interface Category {\r\n  label: string;\r\n  value: string;\r\n  isSelected: boolean;\r\n}\r\n\r\nexport interface CategoriesState {\r\n  list: Category[];\r\n  loading: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nconst initialState: CategoriesState = {\r\n  list: [],\r\n  loading: false,\r\n};\r\n\r\nconst categoriesReducer = createReducer(\r\n  initialState,\r\n  on(categoriesActions.fetchCategories, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(categoriesActions.setCategories, (state, { categories }) => ({\r\n    ...state,\r\n    loading: false,\r\n    list: categories.map((category, index) => ({\r\n      ...category,\r\n      isSelected: index === 0,\r\n    })),\r\n  })),\r\n  on(categoriesActions.selectCategory, (state, { value }) => ({\r\n    ...state,\r\n    list: state.list.map((category) => ({\r\n      ...category,\r\n      isSelected: category.value === value,\r\n    })),\r\n  })),\r\n  on(categoriesActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    loading: true,\r\n    error,\r\n  }))\r\n);\r\n\r\nexport function reducer(state: CategoriesState | undefined, action: Action) {\r\n  return categoriesReducer(state, action);\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "list",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Category",
            "id": "interface-Category-3cbbbcf9ba7fe6e3fd03c17c35c4cba8",
            "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\r\nimport * as categoriesActions from '../actions/categories.actions';\r\n\r\nexport const featureKey = 'categories';\r\n\r\nexport interface Category {\r\n  label: string;\r\n  value: string;\r\n  isSelected: boolean;\r\n}\r\n\r\nexport interface CategoriesState {\r\n  list: Category[];\r\n  loading: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nconst initialState: CategoriesState = {\r\n  list: [],\r\n  loading: false,\r\n};\r\n\r\nconst categoriesReducer = createReducer(\r\n  initialState,\r\n  on(categoriesActions.fetchCategories, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(categoriesActions.setCategories, (state, { categories }) => ({\r\n    ...state,\r\n    loading: false,\r\n    list: categories.map((category, index) => ({\r\n      ...category,\r\n      isSelected: index === 0,\r\n    })),\r\n  })),\r\n  on(categoriesActions.selectCategory, (state, { value }) => ({\r\n    ...state,\r\n    list: state.list.map((category) => ({\r\n      ...category,\r\n      isSelected: category.value === value,\r\n    })),\r\n  })),\r\n  on(categoriesActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    loading: true,\r\n    error,\r\n  }))\r\n);\r\n\r\nexport function reducer(state: CategoriesState | undefined, action: Action) {\r\n  return categoriesReducer(state, action);\r\n}\r\n",
            "properties": [
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Chainable",
            "id": "interface-Chainable-eeb6394b310e7cc14f0321cca3d9eb7f",
            "file": "apps/ecommerce-web-app-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Chainable",
            "id": "interface-Chainable-eeb6394b310e7cc14f0321cca3d9eb7f-1",
            "file": "apps/storybook-app-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Chainable-1"
        },
        {
            "name": "Chainable",
            "id": "interface-Chainable-eeb6394b310e7cc14f0321cca3d9eb7f-2",
            "file": "apps/ubc-shell-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "Chainable-2"
        },
        {
            "name": "Chainable",
            "id": "interface-Chainable-eeb6394b310e7cc14f0321cca3d9eb7f-3",
            "file": "apps/ui-library-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "Chainable-3"
        },
        {
            "name": "IButtonGroup",
            "id": "interface-IButtonGroup-079f4c1873e7d38cdb22bb8b2bf1373a",
            "file": "libs/shared/ui-library/src/lib/interfaces/button-group.ts",
            "type": "interface",
            "sourceCode": "export interface IButtonGroup {\r\n  value: string;\r\n  label: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IButtonGroup",
            "id": "interface-IButtonGroup-079f4c1873e7d38cdb22bb8b2bf1373a-1",
            "file": "libs/shared/util-library/src/lib/interface/button-group.ts",
            "type": "interface",
            "sourceCode": "export interface IButtonGroup {\r\n  value: string;\r\n  label: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IButtonGroup-1"
        },
        {
            "name": "ICategory",
            "id": "interface-ICategory-029598cdec5e0c7c27ac00cacf112dc9",
            "file": "libs/shared/util-library/src/lib/interface/product/product-categories.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ICategory {\r\n  name: string;\r\n}\r\nexport interface ICategoryList {\r\n  categories: ICategory[];\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICategoryAPI",
            "id": "interface-ICategoryAPI-935ac69c0e6130f43049013112f805bb",
            "file": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IProduct {\r\n  name: string;\r\n  manufacturer: string;\r\n  price: {\r\n    value: string;\r\n  };\r\n}\r\n\r\n// TODO need to think whether this model is right?\r\nexport interface IProductList {\r\n  products: IProduct[];\r\n}\r\n\r\n// TODO need to check this Interface naming convention\r\nexport interface ICategoryAPI {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  subcategories: ICategoryAPI[];\r\n}\r\nexport interface IProductListAPI {\r\n  type: string;\r\n  products: IProduct[];\r\n}\r\nexport interface IEcommerceUserAPI {\r\n  rut: string;\r\n  email: string;\r\n  phone: string;\r\n  isEcommerceCandidate: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subcategories",
                    "type": "ICategoryAPI[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICategoryList",
            "id": "interface-ICategoryList-029598cdec5e0c7c27ac00cacf112dc9",
            "file": "libs/shared/util-library/src/lib/interface/product/product-categories.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ICategory {\r\n  name: string;\r\n}\r\nexport interface ICategoryList {\r\n  categories: ICategory[];\r\n}\r\n",
            "properties": [
                {
                    "name": "categories",
                    "type": "ICategory[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICenteredCard",
            "id": "interface-ICenteredCard-0cdcad226b89f888f954f82398fdef5e",
            "file": "libs/shared/ui-library/src/lib/interfaces/centered-card.ts",
            "type": "interface",
            "sourceCode": "import type { ICustomCard } from './custom-card';\r\n\r\nexport interface ICenteredCard extends ICustomCard {\r\n  tagline?: string;\r\n  bordered?: boolean;\r\n  darkTheme?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "bordered",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "darkTheme",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tagline",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ICustomCard"
        },
        {
            "name": "ICtaCard",
            "id": "interface-ICtaCard-3625b23b5b46a10d45ba4848b915a68e",
            "file": "libs/shared/ui-library/src/lib/interfaces/cta-card.ts",
            "type": "interface",
            "sourceCode": "import type { ICustomCard } from './custom-card';\r\n\r\nexport interface ICtaCard extends ICustomCard {\r\n  placeholder?: string;\r\n  caption?: string;\r\n  btnText?: string;\r\n  bordered?: boolean;\r\n  darkTheme?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "bordered",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "caption",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "darkTheme",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ICustomCard"
        },
        {
            "name": "ICustomCard",
            "id": "interface-ICustomCard-a2bfb976ce76b72756aef32326204545",
            "file": "libs/shared/ui-library/src/lib/interfaces/custom-card.ts",
            "type": "interface",
            "sourceCode": "export interface ICustomCard {\r\n  imageUrl: string;\r\n  title: string;\r\n  altText?: string;\r\n  price?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "altText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICustomCard",
            "id": "interface-ICustomCard-e72f83634be42941328d3c29d8df99eb-1",
            "file": "libs/shared/util-library/src/lib/interface/custom-card.ts",
            "type": "interface",
            "sourceCode": "export interface ICustomCard {\r\n  category?: string;\r\n  planId: number;\r\n  imageUrl: string;\r\n  title: string;\r\n  altText?: string;\r\n  price?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "altText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "planId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ICustomCard-1"
        },
        {
            "name": "IDialogData",
            "id": "interface-IDialogData-a670323458b6d3c4c6a782c6ad1db7a4",
            "file": "libs/shared/util-library/src/lib/interface/dialog.ts",
            "type": "interface",
            "sourceCode": "export interface IDialogData {\r\n  title: string;\r\n  description: string;\r\n  iconOntop: boolean;\r\n  iconClass: string;\r\n  closeButton: boolean;\r\n  primaryButton: boolean;\r\n  primaryButtontext: string;\r\n  secondaryButton: boolean;\r\n  secondaryButtontext: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "closeButton",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "iconClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "iconOntop",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "primaryButton",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "primaryButtontext",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "secondaryButton",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "secondaryButtontext",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "iDomain",
            "id": "interface-iDomain-199e5f77c0c1ddacdb17365cf6c56aa6",
            "file": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
            "type": "interface",
            "sourceCode": "export interface iMainMenuItem {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  parent: iParent | null;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n  children: iMainMenuItem[];\r\n}\r\n\r\ninterface iParent {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n}\r\n\r\ninterface iDomain {\r\n  id: string;\r\n  domain_id: iDomainDetails;\r\n}\r\n\r\ninterface iDomainDetails {\r\n  id: string;\r\n  domain: string;\r\n  brand: string;\r\n  domain_description: string;\r\n}\r\n\r\nexport interface iTranslation {\r\n  id: string;\r\n  status: string;\r\n  title: string;\r\n  language_code: string;\r\n  url: string;\r\n  new_tab: [];\r\n}\r\n",
            "properties": [
                {
                    "name": "domain_id",
                    "type": "IDomainDetails",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "iDomainDetails",
            "id": "interface-iDomainDetails-199e5f77c0c1ddacdb17365cf6c56aa6",
            "file": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
            "type": "interface",
            "sourceCode": "export interface iMainMenuItem {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  parent: iParent | null;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n  children: iMainMenuItem[];\r\n}\r\n\r\ninterface iParent {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n}\r\n\r\ninterface iDomain {\r\n  id: string;\r\n  domain_id: iDomainDetails;\r\n}\r\n\r\ninterface iDomainDetails {\r\n  id: string;\r\n  domain: string;\r\n  brand: string;\r\n  domain_description: string;\r\n}\r\n\r\nexport interface iTranslation {\r\n  id: string;\r\n  status: string;\r\n  title: string;\r\n  language_code: string;\r\n  url: string;\r\n  new_tab: [];\r\n}\r\n",
            "properties": [
                {
                    "name": "brand",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "domain",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "domain_description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IEcommerceUserAPI",
            "id": "interface-IEcommerceUserAPI-935ac69c0e6130f43049013112f805bb",
            "file": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IProduct {\r\n  name: string;\r\n  manufacturer: string;\r\n  price: {\r\n    value: string;\r\n  };\r\n}\r\n\r\n// TODO need to think whether this model is right?\r\nexport interface IProductList {\r\n  products: IProduct[];\r\n}\r\n\r\n// TODO need to check this Interface naming convention\r\nexport interface ICategoryAPI {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  subcategories: ICategoryAPI[];\r\n}\r\nexport interface IProductListAPI {\r\n  type: string;\r\n  products: IProduct[];\r\n}\r\nexport interface IEcommerceUserAPI {\r\n  rut: string;\r\n  email: string;\r\n  phone: string;\r\n  isEcommerceCandidate: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isEcommerceCandidate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "rut",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IFullSizeCard",
            "id": "interface-IFullSizeCard-7faafdcd5a9708aefea5fe12233650a8",
            "file": "libs/shared/ui-library/src/lib/interfaces/fullsize-card.ts",
            "type": "interface",
            "sourceCode": "import { ICustomCard } from './custom-card';\r\n\r\nexport interface IFullSizeCard extends ICustomCard {\r\n  caption?: string;\r\n  btnText?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "caption",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ICustomCard"
        },
        {
            "name": "Iimages",
            "id": "interface-Iimages-bd0dc87e7ac8976a6ab7f024a0d4dd1e",
            "file": "libs/shared/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\r\n\r\nexport interface Iimages {\r\n  path: string;\r\n  altTag: string;\r\n}\r\nexport interface Imatrix {\r\n  cols: number;\r\n  rows: number;\r\n}\r\n@Component({\r\n  selector: 'lla-img-gallery',\r\n  templateUrl: './img-gallery.component.html',\r\n  styleUrls: ['./img-gallery.component.scss'],\r\n})\r\nexport class ImgGalleryComponent implements OnInit {\r\n  @Input() imageList: Iimages[] = [];\r\n  @Output() clickHandler: EventEmitter<null> = new EventEmitter();\r\n  maxImageToBeShown = 6;\r\n  // Pattern to get the desired layout based on image count\r\n  galleryDesignsAvailable = [\r\n    [{ cols: 1, rows: 1 }],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 2 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n  ];\r\n  imgCount = 0;\r\n  layoutPatternPicked: Imatrix[] = [];\r\n  columnCount?: number = 0;\r\n\r\n  /**\r\n   * Initate the image gallery\r\n   */\r\n  ngOnInit(): void {\r\n    this.imgCount = this.imageList.length;\r\n    this.columnCount = this.getColumnCount(this.imgCount);\r\n    this.layoutPatternPicked = this.getLayoutPattern(this.imageList.length);\r\n  }\r\n\r\n  /**\r\n   * Get the total number of grid columns.\r\n   * The column count for 1 image will be 1.\r\n   * The column count for 2 to 4 image will be 2.\r\n   * The column count for more than 4 image will be 3.\r\n   */\r\n  getColumnCount(imgCount: number): number {\r\n    return imgCount >= 5 ? 3 : imgCount == 1 ? 1 : 2;\r\n  }\r\n  /**\r\n   * Based on image count, decide to choose gallery pattern from the list of galleryDesignsAvailable\r\n   * Pick galleryDesignsAvailable[count-1] if the image size is count.\r\n   * Pick galleryDesignsAvailable[6] if the image size is more than 6.\r\n   */\r\n  getLayoutPattern(imageCount: number = 0): [] | Imatrix[] {\r\n    return imageCount === 0\r\n      ? []\r\n      : imageCount > this.maxImageToBeShown\r\n      ? this.galleryDesignsAvailable[5]\r\n      : this.galleryDesignsAvailable[imageCount - 1];\r\n  }\r\n  /**\r\n   * On click handler for gallery\r\n   */\r\n  onClickHandler() {\r\n    this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "altTag",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "iMainMenuItem",
            "id": "interface-iMainMenuItem-199e5f77c0c1ddacdb17365cf6c56aa6",
            "file": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
            "type": "interface",
            "sourceCode": "export interface iMainMenuItem {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  parent: iParent | null;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n  children: iMainMenuItem[];\r\n}\r\n\r\ninterface iParent {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n}\r\n\r\ninterface iDomain {\r\n  id: string;\r\n  domain_id: iDomainDetails;\r\n}\r\n\r\ninterface iDomainDetails {\r\n  id: string;\r\n  domain: string;\r\n  brand: string;\r\n  domain_description: string;\r\n}\r\n\r\nexport interface iTranslation {\r\n  id: string;\r\n  status: string;\r\n  title: string;\r\n  language_code: string;\r\n  url: string;\r\n  new_tab: [];\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "type": "IMainMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "domain",
                    "type": "IDomain[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "parent",
                    "type": "IParent | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "translation",
                    "type": "ITranslation[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Imatrix",
            "id": "interface-Imatrix-bd0dc87e7ac8976a6ab7f024a0d4dd1e",
            "file": "libs/shared/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\r\n\r\nexport interface Iimages {\r\n  path: string;\r\n  altTag: string;\r\n}\r\nexport interface Imatrix {\r\n  cols: number;\r\n  rows: number;\r\n}\r\n@Component({\r\n  selector: 'lla-img-gallery',\r\n  templateUrl: './img-gallery.component.html',\r\n  styleUrls: ['./img-gallery.component.scss'],\r\n})\r\nexport class ImgGalleryComponent implements OnInit {\r\n  @Input() imageList: Iimages[] = [];\r\n  @Output() clickHandler: EventEmitter<null> = new EventEmitter();\r\n  maxImageToBeShown = 6;\r\n  // Pattern to get the desired layout based on image count\r\n  galleryDesignsAvailable = [\r\n    [{ cols: 1, rows: 1 }],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 2 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n  ];\r\n  imgCount = 0;\r\n  layoutPatternPicked: Imatrix[] = [];\r\n  columnCount?: number = 0;\r\n\r\n  /**\r\n   * Initate the image gallery\r\n   */\r\n  ngOnInit(): void {\r\n    this.imgCount = this.imageList.length;\r\n    this.columnCount = this.getColumnCount(this.imgCount);\r\n    this.layoutPatternPicked = this.getLayoutPattern(this.imageList.length);\r\n  }\r\n\r\n  /**\r\n   * Get the total number of grid columns.\r\n   * The column count for 1 image will be 1.\r\n   * The column count for 2 to 4 image will be 2.\r\n   * The column count for more than 4 image will be 3.\r\n   */\r\n  getColumnCount(imgCount: number): number {\r\n    return imgCount >= 5 ? 3 : imgCount == 1 ? 1 : 2;\r\n  }\r\n  /**\r\n   * Based on image count, decide to choose gallery pattern from the list of galleryDesignsAvailable\r\n   * Pick galleryDesignsAvailable[count-1] if the image size is count.\r\n   * Pick galleryDesignsAvailable[6] if the image size is more than 6.\r\n   */\r\n  getLayoutPattern(imageCount: number = 0): [] | Imatrix[] {\r\n    return imageCount === 0\r\n      ? []\r\n      : imageCount > this.maxImageToBeShown\r\n      ? this.galleryDesignsAvailable[5]\r\n      : this.galleryDesignsAvailable[imageCount - 1];\r\n  }\r\n  /**\r\n   * On click handler for gallery\r\n   */\r\n  onClickHandler() {\r\n    this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cols",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "rows",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "iParent",
            "id": "interface-iParent-199e5f77c0c1ddacdb17365cf6c56aa6",
            "file": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
            "type": "interface",
            "sourceCode": "export interface iMainMenuItem {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  parent: iParent | null;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n  children: iMainMenuItem[];\r\n}\r\n\r\ninterface iParent {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n}\r\n\r\ninterface iDomain {\r\n  id: string;\r\n  domain_id: iDomainDetails;\r\n}\r\n\r\ninterface iDomainDetails {\r\n  id: string;\r\n  domain: string;\r\n  brand: string;\r\n  domain_description: string;\r\n}\r\n\r\nexport interface iTranslation {\r\n  id: string;\r\n  status: string;\r\n  title: string;\r\n  language_code: string;\r\n  url: string;\r\n  new_tab: [];\r\n}\r\n",
            "properties": [
                {
                    "name": "access_token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "expires_in",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "scope",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "translation",
                    "type": "iTranslation[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "iSelectOption",
            "id": "interface-iSelectOption-0b2ef8776b68add294320e3e22e4fc5b",
            "file": "libs/shared/ui-library/src/lib/interfaces/select-box.ts",
            "type": "interface",
            "sourceCode": "export interface iSelectOption {\r\n  value: string;\r\n  label: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISelectors",
            "id": "interface-ISelectors-d45edfc1f97db090f2cac8664d496072",
            "file": "libs/shared/util-library/src/lib/interface/selectors.ts",
            "type": "interface",
            "sourceCode": "export interface ISelectorsContent {\r\n  heading: string;\r\n  body?: string;\r\n  icon?: string;\r\n}\r\nexport interface ISelectors {\r\n  id: string;\r\n  content: ISelectorsContent;\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "ISelectorsContent",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IParent",
            "id": "interface-IParent-a0a8ab5237412191cc2dbc4656e96880",
            "file": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IMainMenuItem {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  parent: IParent | null;\r\n  domain: IDomain[];\r\n  translation: ITranslation[];\r\n  children: IMainMenuItem[];\r\n}\r\n\r\ninterface IParent {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  domain: IDomain[];\r\n  translation: ITranslation[];\r\n}\r\n\r\ninterface IDomain {\r\n  id: string;\r\n  domain_id: IDomainDetails;\r\n}\r\n\r\ninterface IDomainDetails {\r\n  id: string;\r\n  domain: string;\r\n  brand: string;\r\n  domain_description: string;\r\n}\r\n\r\nexport interface ITranslation {\r\n  id: string;\r\n  status: string;\r\n  title: string;\r\n  language_code: string;\r\n  url: string;\r\n  new_tab: [];\r\n}\r\n",
            "properties": [
                {
                    "name": "domain",
                    "type": "IDomain[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "iTranslation",
            "id": "interface-iTranslation-199e5f77c0c1ddacdb17365cf6c56aa6",
            "file": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
            "type": "interface",
            "sourceCode": "export interface iMainMenuItem {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  parent: iParent | null;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n  children: iMainMenuItem[];\r\n}\r\n\r\ninterface iParent {\r\n  id: string;\r\n  status: string;\r\n  slug: string;\r\n  domain: iDomain[];\r\n  translation: iTranslation[];\r\n}\r\n\r\ninterface iDomain {\r\n  id: string;\r\n  domain_id: iDomainDetails;\r\n}\r\n\r\ninterface iDomainDetails {\r\n  id: string;\r\n  domain: string;\r\n  brand: string;\r\n  domain_description: string;\r\n}\r\n\r\nexport interface iTranslation {\r\n  id: string;\r\n  status: string;\r\n  title: string;\r\n  language_code: string;\r\n  url: string;\r\n  new_tab: [];\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "translation",
                    "type": "ITranslation[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPlanCard",
            "id": "interface-IPlanCard-39438ff4dd0cffc893e8edf322d20991",
            "file": "libs/shared/ui-library/src/lib/interfaces/plans-card.ts",
            "type": "interface",
            "sourceCode": "import type { ICustomCard } from './custom-card';\r\n\r\ninterface IPlanContent {\r\n  text: string;\r\n  label?: string;\r\n}\r\n\r\nexport interface IPlanCard extends ICustomCard {\r\n  planId: number;\r\n  planContent: IPlanContent[];\r\n  icon?: string;\r\n  currency?: string;\r\n  btnText?: string;\r\n  priceTerms?: string;\r\n  subPriceTerms?: string;\r\n  normalPrice?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "currency",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "normalPrice",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "planContent",
                    "type": "IPlanContent[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "planId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "priceTerms",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subPriceTerms",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ICustomCard"
        },
        {
            "name": "IPlanCard",
            "id": "interface-IPlanCard-39438ff4dd0cffc893e8edf322d20991-1",
            "file": "libs/shared/util-library/src/lib/interface/plans-card.ts",
            "type": "interface",
            "sourceCode": "import type { ICustomCard } from './custom-card';\r\n\r\ninterface IPlanContent {\r\n  text: string;\r\n  label?: string;\r\n}\r\n\r\nexport interface IPlanCard extends ICustomCard {\r\n  planId: number;\r\n  planContent: IPlanContent[];\r\n  icon?: string;\r\n  currency?: string;\r\n  btnText?: string;\r\n  priceTerms?: string;\r\n  subPriceTerms?: string;\r\n  normalPrice?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "currency",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "normalPrice",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "planContent",
                    "type": "IPlanContent[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "planId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "priceTerms",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subPriceTerms",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ICustomCard",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IPlanCard-1"
        },
        {
            "name": "IPlanContent",
            "id": "interface-IPlanContent-39438ff4dd0cffc893e8edf322d20991",
            "file": "libs/shared/ui-library/src/lib/interfaces/plans-card.ts",
            "type": "interface",
            "sourceCode": "import type { ICustomCard } from './custom-card';\r\n\r\ninterface IPlanContent {\r\n  text: string;\r\n  label?: string;\r\n}\r\n\r\nexport interface IPlanCard extends ICustomCard {\r\n  planId: number;\r\n  planContent: IPlanContent[];\r\n  icon?: string;\r\n  currency?: string;\r\n  btnText?: string;\r\n  priceTerms?: string;\r\n  subPriceTerms?: string;\r\n  normalPrice?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPlanContent",
            "id": "interface-IPlanContent-39438ff4dd0cffc893e8edf322d20991-1",
            "file": "libs/shared/util-library/src/lib/interface/plans-card.ts",
            "type": "interface",
            "sourceCode": "import type { ICustomCard } from './custom-card';\r\n\r\ninterface IPlanContent {\r\n  text: string;\r\n  label?: string;\r\n}\r\n\r\nexport interface IPlanCard extends ICustomCard {\r\n  planId: number;\r\n  planContent: IPlanContent[];\r\n  icon?: string;\r\n  currency?: string;\r\n  btnText?: string;\r\n  priceTerms?: string;\r\n  subPriceTerms?: string;\r\n  normalPrice?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IPlanContent-1"
        },
        {
            "name": "IProduct",
            "id": "interface-IProduct-935ac69c0e6130f43049013112f805bb",
            "file": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IProduct {\r\n  name: string;\r\n  manufacturer: string;\r\n  price: {\r\n    value: string;\r\n  };\r\n}\r\n\r\n// TODO need to think whether this model is right?\r\nexport interface IProductList {\r\n  products: IProduct[];\r\n}\r\n\r\n// TODO need to check this Interface naming convention\r\nexport interface ICategoryAPI {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  subcategories: ICategoryAPI[];\r\n}\r\nexport interface IProductListAPI {\r\n  type: string;\r\n  products: IProduct[];\r\n}\r\nexport interface IEcommerceUserAPI {\r\n  rut: string;\r\n  email: string;\r\n  phone: string;\r\n  isEcommerceCandidate: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "manufacturer",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IProductList",
            "id": "interface-IProductList-935ac69c0e6130f43049013112f805bb",
            "file": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IProduct {\r\n  name: string;\r\n  manufacturer: string;\r\n  price: {\r\n    value: string;\r\n  };\r\n}\r\n\r\n// TODO need to think whether this model is right?\r\nexport interface IProductList {\r\n  products: IProduct[];\r\n}\r\n\r\n// TODO need to check this Interface naming convention\r\nexport interface ICategoryAPI {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  subcategories: ICategoryAPI[];\r\n}\r\nexport interface IProductListAPI {\r\n  type: string;\r\n  products: IProduct[];\r\n}\r\nexport interface IEcommerceUserAPI {\r\n  rut: string;\r\n  email: string;\r\n  phone: string;\r\n  isEcommerceCandidate: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "products",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IProductListAPI",
            "id": "interface-IProductListAPI-935ac69c0e6130f43049013112f805bb",
            "file": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IProduct {\r\n  name: string;\r\n  manufacturer: string;\r\n  price: {\r\n    value: string;\r\n  };\r\n}\r\n\r\n// TODO need to think whether this model is right?\r\nexport interface IProductList {\r\n  products: IProduct[];\r\n}\r\n\r\n// TODO need to check this Interface naming convention\r\nexport interface ICategoryAPI {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  subcategories: ICategoryAPI[];\r\n}\r\nexport interface IProductListAPI {\r\n  type: string;\r\n  products: IProduct[];\r\n}\r\nexport interface IEcommerceUserAPI {\r\n  rut: string;\r\n  email: string;\r\n  phone: string;\r\n  isEcommerceCandidate: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "products",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "iSelectOption",
            "id": "interface-iSelectOption-0b2ef8776b68add294320e3e22e4fc5b",
            "file": "libs/shared/ui-library/src/lib/interfaces/select-box.ts",
            "type": "interface",
            "sourceCode": "export interface iSelectOption {\r\n  value: string;\r\n  label: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISelectors",
            "id": "interface-ISelectors-d45edfc1f97db090f2cac8664d496072",
            "file": "libs/shared/util-library/src/lib/interface/selectors.ts",
            "type": "interface",
            "sourceCode": "export interface ISelectorsContent {\r\n  heading: string;\r\n  body?: string;\r\n  icon?: string;\r\n}\r\nexport interface ISelectors {\r\n  id: string;\r\n  content: ISelectorsContent;\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "ISelectorsContent",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISelectorsContent",
            "id": "interface-ISelectorsContent-d45edfc1f97db090f2cac8664d496072",
            "file": "libs/shared/util-library/src/lib/interface/selectors.ts",
            "type": "interface",
            "sourceCode": "export interface ISelectorsContent {\r\n  heading: string;\r\n  body?: string;\r\n  icon?: string;\r\n}\r\nexport interface ISelectors {\r\n  id: string;\r\n  content: ISelectorsContent;\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "heading",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITermsCondition",
            "id": "interface-ITermsCondition-d0b3bfcdc22dccb055ee5420537a4041",
            "file": "libs/shared/util-library/src/lib/interface/terms-condition.ts",
            "type": "interface",
            "sourceCode": "export interface ITermsCondition {\r\n  title: string;\r\n  terms: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "terms",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TERMS_CONDITION",
            "id": "interface-TERMS_CONDITION-7acee67bb79d79b5de8baa24b33b9a63",
            "file": "libs/shared/util-library/src/lib/interface/terms-condition.ts",
            "type": "interface",
            "sourceCode": "export interface TERMS_CONDITION {\r\n  title: string;\r\n  terms: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "new_tab",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-15106cf830c6f44bbbdc5096767a3d75",
            "file": "libs/shared/util-library/src/lib/interface/user/user.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IUser {\r\n  rutId: string;\r\n  email: string;\r\n}\r\n\r\nexport interface IOAuthToken {\r\n  access_token: string; // eslint-disable-line\r\n  token_type: 'bearer'; // eslint-disable-line\r\n  expires_in: number; // eslint-disable-line\r\n  scope: 'basic openid';\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "rutId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IWideCard",
            "id": "interface-IWideCard-986a557f9c78184fa3155905f0d2a00c",
            "file": "libs/shared/ui-library/src/lib/interfaces/wide-card.ts",
            "type": "interface",
            "sourceCode": "import type { ICustomCard } from './custom-card';\r\n\r\nexport interface IWideCard extends ICustomCard {\r\n  tagline?: string;\r\n  placeholder?: string;\r\n  caption?: string;\r\n  body?: string;\r\n  btnText?: string;\r\n  contentRight?: boolean;\r\n  darkTheme?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "caption",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "contentRight",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "darkTheme",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "tagline",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ICustomCard"
        },
        {
            "name": "Product",
            "id": "interface-Product-74ef253cc2e1465a315ca86c5735350d",
            "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\r\nimport * as productsActions from '../actions/products.actions';\r\n\r\nexport const featureKey = 'products';\r\n\r\nexport interface Product {\r\n  title: string;\r\n  category: string;\r\n  price: string;\r\n  planId: number;\r\n  imageUrl: string;\r\n  altText: string;\r\n  planContent: {\r\n    text: string;\r\n    label: string;\r\n  }[];\r\n  icon: string;\r\n  currency: string;\r\n  btnText: string;\r\n  priceTerms: string;\r\n  subPriceTerms: string;\r\n  normalPrice: string;\r\n}\r\nexport interface ProductsState {\r\n  list: Product[];\r\n  loading: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nconst initialState: ProductsState = {\r\n  list: [],\r\n  loading: false,\r\n};\r\n\r\nconst productsReducer = createReducer(\r\n  initialState,\r\n  on(productsActions.fetchProducts, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(productsActions.setProducts, (state, { products }) => ({\r\n    ...state,\r\n    loading: false,\r\n    list: products,\r\n  })),\r\n  on(productsActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    loading: true,\r\n    error,\r\n  }))\r\n);\r\n\r\nexport function reducer(state: ProductsState | undefined, action: Action) {\r\n  return productsReducer(state, action);\r\n}\r\n",
            "properties": [
                {
                    "name": "altText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "btnText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "currency",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "normalPrice",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "planContent",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "planId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "price",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "priceTerms",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subPriceTerms",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductsState",
            "id": "interface-ProductsState-74ef253cc2e1465a315ca86c5735350d",
            "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\r\nimport * as productsActions from '../actions/products.actions';\r\n\r\nexport const featureKey = 'products';\r\n\r\nexport interface Product {\r\n  title: string;\r\n  category: string;\r\n  price: string;\r\n  planId: number;\r\n  imageUrl: string;\r\n  altText: string;\r\n  planContent: {\r\n    text: string;\r\n    label: string;\r\n  }[];\r\n  icon: string;\r\n  currency: string;\r\n  btnText: string;\r\n  priceTerms: string;\r\n  subPriceTerms: string;\r\n  normalPrice: string;\r\n}\r\nexport interface ProductsState {\r\n  list: Product[];\r\n  loading: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nconst initialState: ProductsState = {\r\n  list: [],\r\n  loading: false,\r\n};\r\n\r\nconst productsReducer = createReducer(\r\n  initialState,\r\n  on(productsActions.fetchProducts, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(productsActions.setProducts, (state, { products }) => ({\r\n    ...state,\r\n    loading: false,\r\n    list: products,\r\n  })),\r\n  on(productsActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    loading: true,\r\n    error,\r\n  }))\r\n);\r\n\r\nexport function reducer(state: ProductsState | undefined, action: Action) {\r\n  return productsReducer(state, action);\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "list",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "responseApi",
            "id": "interface-responseApi-57b6664c830b329923fd782579199f2e",
            "file": "libs/domains/product-catalogue/src/lib/services/terms-condition.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { ITermsCondition } from '@lla/shared/util-library';\r\n\r\ninterface responseApi {\r\n  data: [ITermsCondition];\r\n  public: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TermsConditionService {\r\n  loadTermsAndConditions$ = this.http.get<responseApi>(\r\n    'https://cms-dev.lla.digital/_/items/product_terms'\r\n  );\r\n\r\n  constructor(private http: HttpClient) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "[ITermsCondition]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "public",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppService",
            "id": "injectable-AppService-747da5b8f376f2dbed0276090d793c4a",
            "file": "apps/server/src/app/app.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 5
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getData(): { message: string } {\r\n    return { message: 'Welcome to server!' };\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "AuthMiddleware",
            "id": "injectable-AuthMiddleware-5e2b9ea76717646f27766fd8a3db6579",
            "file": "apps/server/src/app/middlewares/auth.middlware.ts",
            "properties": [],
            "methods": [
                {
                    "name": "use",
                    "args": [
                        {
                            "name": "req",
                            "type": "Request"
                        },
                        {
                            "name": "res",
                            "type": "Response"
                        },
                        {
                            "name": "next",
                            "type": "NextFunction"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "Request",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "res",
                            "type": "Response",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "NextFunction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthMiddleware implements NestMiddleware {\r\n  constructor(private readonly authService: AuthService) {}\r\n\r\n  async use(req: Request, res: Response, next: NextFunction) {\r\n    await this.authService.fetchOAuthToken();\r\n    next();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-a757aa14742cbf50021b6909e4f1c41e",
            "file": "apps/server/src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "clientId",
                    "defaultValue": "'vtr_hybris'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clientSecret",
                    "defaultValue": "'secret'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "token",
                    "defaultValue": "null",
                    "type": "IOAuthToken",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "fetchOAuthToken",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpService, Injectable } from '@nestjs/common';\r\nimport { pluck } from 'rxjs/operators';\r\nimport { IOAuthToken } from '@lla/shared/util-library';\r\nimport { config } from '../../app/config';\r\n@Injectable()\r\nexport class AuthService {\r\n  clientId = 'vtr_hybris';\r\n  clientSecret = 'secret';\r\n  token: IOAuthToken = null;\r\n\r\n  constructor(private readonly httpService: HttpService) {}\r\n\r\n  async fetchOAuthToken() {\r\n    const params = `client_id=${this.clientId}&client_secret=${this.clientSecret}&&grant_type=client_credentials`;\r\n\r\n    this.token = await this.httpService\r\n      .post(`${config.sapBaseUrl}/${config.sapAuthToken}?${params}`)\r\n      .pipe(pluck('data'))\r\n      .toPromise();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CategoriesEffects",
            "id": "injectable-CategoriesEffects-90fd2a530ae21baf16a70e2ffc2c4c66",
            "file": "libs/domains/product-catalogue/src/lib/store/effects/categories.effects.ts",
            "properties": [
                {
                    "name": "fetchCategories$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<CategoriesAction>(categoriesActions.FETCH_CATEGORIES),\r\n      mergeMap(() =>\r\n        this.productsService.loadCategories$.pipe(\r\n          map((categories) => categoriesActions.setCategories({ categories })),\r\n          catchError(() =>\r\n            of(\r\n              categoriesActions.setError({ error: 'Error fetching categories' })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\r\nimport { mergeMap, map, catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport * as categoriesActions from '../actions/categories.actions';\r\nimport type { CategoriesAction } from '../actions/categories.actions';\r\nimport { ProductsService } from '../../services/products.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport default class CategoriesEffects {\r\n  fetchCategories$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<CategoriesAction>(categoriesActions.FETCH_CATEGORIES),\r\n      mergeMap(() =>\r\n        this.productsService.loadCategories$.pipe(\r\n          map((categories) => categoriesActions.setCategories({ categories })),\r\n          catchError(() =>\r\n            of(\r\n              categoriesActions.setError({ error: 'Error fetching categories' })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productsService: ProductsService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-2e6b046c3ff05636f1c012917e45e54a",
            "file": "apps/server/src/app/services/menu.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMainMenu",
                    "args": [
                        {
                            "name": "domain",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IMainMenuItem[]>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "domain",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRootMenu",
                    "args": [
                        {
                            "name": "menuItems",
                            "type": "IMainMenuItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "IMainMenuItem[]",
                    "typeParameters": [],
                    "line": 74,
                    "description": "<p>menu will have parent attribute as null if its a root menu</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2315,
                                "end": 2324,
                                "flags": 0,
                                "escapedText": "menuItems"
                            },
                            "type": "IMainMenuItem[]",
                            "tagName": {
                                "pos": 2309,
                                "end": 2314,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getSubMenuItem",
                    "args": [
                        {
                            "name": "allMenuItems",
                            "type": "IMainMenuItem[]"
                        },
                        {
                            "name": "parentMenu",
                            "type": "IMainMenuItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | ",
                    "typeParameters": [],
                    "line": 59,
                    "description": "<p>get all the menu items specific to parent menu</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1893,
                                "end": 1905,
                                "flags": 0,
                                "escapedText": "allMenuItems"
                            },
                            "type": "IMainMenuItem[]",
                            "tagName": {
                                "pos": 1887,
                                "end": 1892,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1919,
                                "end": 1929,
                                "flags": 0,
                                "escapedText": "parentMenu"
                            },
                            "type": "IMainMenuItem",
                            "tagName": {
                                "pos": 1913,
                                "end": 1918,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "langFilter",
                    "args": [
                        {
                            "name": "menuItem",
                            "type": "iMainMenuItem"
                        },
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "iTranslation[]",
                    "typeParameters": [],
                    "line": 83,
                    "description": "<p>returning the content which matches the language code</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2543,
                                "end": 2551,
                                "flags": 0,
                                "escapedText": "menuItem"
                            },
                            "type": "iMainMenuItem",
                            "tagName": {
                                "pos": 2537,
                                "end": 2542,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2565,
                                "end": 2569,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2559,
                                "end": 2564,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "langFilter",
                    "args": [
                        {
                            "name": "menuItems",
                            "type": "iMainMenuItem[]"
                        },
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ITranslation[]",
                    "typeParameters": [],
                    "line": 83,
                    "description": "<p>returning the content which matches the language code</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2543,
                                "end": 2551,
                                "flags": 0,
                                "escapedText": "menuItem"
                            },
                            "type": "IMainMenuItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Record<string | string>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Record<string | string>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpService } from '@nestjs/common';\r\n\r\nimport { iMainMenuItem, iTranslation } from '@lla/shared/util-library';\r\n\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { config } from '../../app/config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n  constructor(private readonly httpService: HttpService) {}\r\n\r\n  getMainMenu(domain = '', lang = ''): Observable<iMainMenuItem[]> {\r\n    const endpoint = 'main_menu';\r\n    const params = this.serializeParams({\r\n      fields: '*.*.*',\r\n      'filter[domain.domain_id][like]': domain,\r\n    });\r\n    return this.httpService\r\n      .get(`${config.directusBaseUrl}/${endpoint}?${params}`)\r\n      .pipe(map((response) => this.prepareMenu(response.data.data, lang)));\r\n  }\r\n\r\n  serializeParams(params: Record<string, string>): string {\r\n    return new URLSearchParams(params).toString();\r\n  }\r\n\r\n  /**\r\n   * prepares the menu list item\r\n   * 1. get parent menu items (root menu items)\r\n   * 2. gather all the sub menu item for all the root menu\r\n   */\r\n  prepareMenu(menuItems: iMainMenuItem[], lang: string): iMainMenuItem[] | [] {\r\n    const mainMenu = [];\r\n    const updatedMenu = [];\r\n    // filter out the content for current language\r\n    menuItems.forEach((menuItem) => {\r\n      menuItem['translation'] = this.langFilter(menuItem, lang);\r\n      updatedMenu.push(menuItem);\r\n    });\r\n    // get root menu items (parent menu)\r\n    const rootMenu = this.getRootMenu(updatedMenu);\r\n    // iterate each root menu and prepare the child menu items\r\n    rootMenu.forEach((rootMenuItem) => {\r\n      const subMenu = this.getSubMenuItem(updatedMenu, rootMenuItem);\r\n      mainMenu.push({ ...rootMenuItem, children: subMenu });\r\n    });\r\n    return mainMenu || [];\r\n  }\r\n  /**\r\n   * get all the menu items specific to parent menu\r\n   * @param allMenuItems\r\n   * @param parentMenu\r\n   */\r\n  getSubMenuItem(\r\n    allMenuItems: iMainMenuItem[],\r\n    parentMenu: iMainMenuItem\r\n  ): iMainMenuItem[] | [] {\r\n    return (\r\n      allMenuItems.filter(\r\n        (menuItem: iMainMenuItem) =>\r\n          menuItem.parent && menuItem.parent['id'] === parentMenu.id\r\n      ) || []\r\n    );\r\n  }\r\n  /**\r\n   * menu will have parent attribute as null if its a root menu\r\n   * @param menuItems\r\n   */\r\n  getRootMenu(menuItems: iMainMenuItem[]): iMainMenuItem[] {\r\n    return menuItems.filter((menu) => menu.parent === null);\r\n  }\r\n\r\n  /**\r\n   * returning the content which matches the language code\r\n   * @param menuItem\r\n   * @param lang\r\n   */\r\n  langFilter(menuItem: iMainMenuItem, lang: string): iTranslation[] {\r\n    return menuItem.translation.filter((menu) => menu.language_code === lang);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-06917b753c9589c19a618885e667cf9a-1",
            "file": "apps/ubc-shell/src/app/services/menu.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMainMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<iMainMenuItem[]>",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "serializeParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Record<string | string>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Record<string | string>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { iMainMenuItem } from '@lla/shared/util-library';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getMainMenu(): Observable<iMainMenuItem[]> {\r\n    const endpoint = '/api/menu/main-menu';\r\n    const params = this.serializeParams({\r\n      lang: 'en',\r\n    });\r\n    return this.http.get<iMainMenuItem[]>(`${endpoint}?${params}`);\r\n  }\r\n  serializeParams(params: Record<string, string>): string {\r\n    return new URLSearchParams(params).toString();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MenuService-1"
        },
        {
            "name": "ProductsEffects",
            "id": "injectable-ProductsEffects-5cfb1b115ff1057d69824ed7a4cd57a5",
            "file": "libs/domains/product-catalogue/src/lib/store/effects/products.effects.ts",
            "properties": [
                {
                    "name": "fetchProducts$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<ProductsAction>(productsActions.FETCH_PRODUCTS),\r\n      mergeMap(() =>\r\n        this.productsService.loadProducts$.pipe(\r\n          map((products) => productsActions.setProducts({ products })),\r\n          catchError(() =>\r\n            of(productsActions.setError({ error: 'Error fetching products' }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\r\nimport { mergeMap, map, catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport * as productsActions from '../actions/products.actions';\r\nimport type { ProductsAction } from '../actions/products.actions';\r\nimport { ProductsService } from '../../services/products.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport default class ProductsEffects {\r\n  fetchProducts$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<ProductsAction>(productsActions.FETCH_PRODUCTS),\r\n      mergeMap(() =>\r\n        this.productsService.loadProducts$.pipe(\r\n          map((products) => productsActions.setProducts({ products })),\r\n          catchError(() =>\r\n            of(productsActions.setError({ error: 'Error fetching products' }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private readonly actions$: Actions,\r\n    private readonly productsService: ProductsService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-db533e78bc83e662c791086f22c5cac4",
            "file": "apps/server/src/app/services/product.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getProductCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ICategoryList>",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "getProductList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IProductList>",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "serializeParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Record<string | string>"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Record<string | string>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpService, Injectable } from '@nestjs/common';\r\nimport { IProductList, ICategoryList } from '@lla/shared/util-library';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { config } from '../../app/config';\r\n\r\n@Injectable()\r\nexport class ProductService {\r\n  constructor(private readonly httpService: HttpService) {}\r\n\r\n  getProductList(): Observable<IProductList> {\r\n    const params = this.serializeParams({\r\n      fields: 'FULL',\r\n      currentPage: '0',\r\n      pageSize: '20',\r\n      query: 'bundle',\r\n    });\r\n    return this.httpService\r\n      .get(`${config.sapBaseUrl}/${config.productList}?${params}`)\r\n      .pipe(map((response) => response.data));\r\n  }\r\n\r\n  getProductCategories(): Observable<ICategoryList> {\r\n    const params = this.serializeParams({\r\n      fields: 'FULL',\r\n    });\r\n    return this.httpService\r\n      .get(`${config.sapBaseUrl}/${config.categoryList}?${params}`)\r\n      .pipe(map((response) => response.data));\r\n  }\r\n\r\n  serializeParams(params: Record<string, string>) {\r\n    return new URLSearchParams(params).toString();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-46ae0edb59750efc4d1172e8f114fba2",
            "file": "libs/domains/product-catalogue/src/lib/services/products.service.ts",
            "properties": [
                {
                    "name": "loadCategories$",
                    "defaultValue": "this.http.get<ICategoryAPI>('/api/product/categories').pipe(\r\n    map((response) =>\r\n      response.subcategories.map((category) => ({\r\n        label: category.name,\r\n        value: category.id,\r\n      }))\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "loadProducts$",
                    "defaultValue": "this.http.get<IProductListAPI>('/api/product/list').pipe(\r\n    map((response) =>\r\n      response.products.map((product) => ({\r\n        title: product.name,\r\n        category: product.manufacturer,\r\n        price: product.price ? product.price.value : '',\r\n        // mocked from here\r\n        planId: 1,\r\n        imageUrl: '../assets/vtr/sampleImg7.png',\r\n        altText: 'Test',\r\n        planContent: [\r\n          {\r\n            text: 'Internet + Nextgen Wifi',\r\n            label: '',\r\n          },\r\n          {\r\n            text: 'TV Hogar HD',\r\n            label: '86 Canales + 71 Canales HD',\r\n          },\r\n          {\r\n            text: 'Internet + Nextgen Wifi',\r\n            label: '',\r\n          },\r\n          {\r\n            text: 'TV Hogar HD',\r\n            label: '86 Canales + 71 Canales HD',\r\n          },\r\n        ],\r\n        icon: 'icon-ellipse',\r\n        currency: '$',\r\n        btnText: 'Lo Quiero',\r\n        priceTerms: '/mes',\r\n        subPriceTerms: 'X 3 meses',\r\n        normalPrice: 'Normal $59.990',\r\n      }))\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { IProductListAPI, ICategoryAPI } from '@lla/shared/util-library';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductsService {\r\n  loadProducts$ = this.http.get<IProductListAPI>('/api/product/list').pipe(\r\n    map((response) =>\r\n      response.products.map((product) => ({\r\n        title: product.name,\r\n        category: product.manufacturer,\r\n        price: product.price ? product.price.value : '',\r\n        // mocked from here\r\n        planId: 1,\r\n        imageUrl: '../assets/vtr/sampleImg7.png',\r\n        altText: 'Test',\r\n        planContent: [\r\n          {\r\n            text: 'Internet + Nextgen Wifi',\r\n            label: '',\r\n          },\r\n          {\r\n            text: 'TV Hogar HD',\r\n            label: '86 Canales + 71 Canales HD',\r\n          },\r\n          {\r\n            text: 'Internet + Nextgen Wifi',\r\n            label: '',\r\n          },\r\n          {\r\n            text: 'TV Hogar HD',\r\n            label: '86 Canales + 71 Canales HD',\r\n          },\r\n        ],\r\n        icon: 'icon-ellipse',\r\n        currency: '$',\r\n        btnText: 'Lo Quiero',\r\n        priceTerms: '/mes',\r\n        subPriceTerms: 'X 3 meses',\r\n        normalPrice: 'Normal $59.990',\r\n      }))\r\n    )\r\n  );\r\n\r\n  loadCategories$ = this.http.get<ICategoryAPI>('/api/product/categories').pipe(\r\n    map((response) =>\r\n      response.subcategories.map((category) => ({\r\n        label: category.name,\r\n        value: category.id,\r\n      }))\r\n    )\r\n  );\r\n\r\n  constructor(private http: HttpClient) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TermsConditionService",
            "id": "injectable-TermsConditionService-57b6664c830b329923fd782579199f2e",
            "file": "libs/domains/product-catalogue/src/lib/services/terms-condition.service.ts",
            "properties": [
                {
                    "name": "loadTermsAndConditions$",
                    "defaultValue": "this.http.get<responseApi>(\r\n    'https://cms-dev.lla.digital/_/items/product_terms'\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { ITermsCondition } from '@lla/shared/util-library';\r\n\r\ninterface responseApi {\r\n  data: [ITermsCondition];\r\n  public: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TermsConditionService {\r\n  loadTermsAndConditions$ = this.http.get<responseApi>(\r\n    'https://cms-dev.lla.digital/_/items/product_terms'\r\n  );\r\n\r\n  constructor(private http: HttpClient) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-f6a999b00104d6a494940fc4178adc30",
            "file": "apps/server/src/app/services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "candidateCheck",
                    "args": [
                        {
                            "name": "rutId",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "rutId",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "data",
                            "type": "IUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Record<string | string>"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Record<string | string>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpService } from '@nestjs/common';\r\nimport { map, pluck } from 'rxjs/operators';\r\nimport { IUser } from '@lla/shared/util-library';\r\nimport { AuthService } from './auth.service';\r\nimport { pswd } from './crendentials';\r\nimport { config } from '../../app/config';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  constructor(\r\n    private readonly httpService: HttpService,\r\n    private readonly authService: AuthService\r\n  ) {}\r\n\r\n  candidateCheck(rutId = '') {\r\n    const headers = {\r\n      client_id: '12345',\r\n      client_secret: 'abcde',\r\n      'correlation-id': '644e1dd7-2a7f-18fb-b8ed-ed78c3F92c2b',\r\n      channelId: 'ECOM',\r\n    };\r\n\r\n    const params = this.serializeParams({\r\n      taxIdentifier: rutId,\r\n    });\r\n\r\n    return this.httpService\r\n      .get(`${config.mulesoftBaseUrl}/${config.candidateCheck}?${params}`, {\r\n        headers,\r\n      })\r\n      .pipe(map((response) => response.data));\r\n  }\r\n\r\n  register(data: IUser) {\r\n    const params = this.serializeParams({\r\n      fields: 'DEFAULT',\r\n    });\r\n\r\n    return this.httpService\r\n      .post(\r\n        `${config.sapBaseUrl}/${config.registerUser}?${params}`,\r\n        JSON.stringify({\r\n          firstName: 'John',\r\n          lastName: 'Doe',\r\n          identifications: [\r\n            {\r\n              identificationNumber: data.rutId,\r\n              identificationType: 'NATIONAL_ID',\r\n            },\r\n          ],\r\n          password: pswd,\r\n          titleCode: 'Mr',\r\n          uid: data.email,\r\n        }),\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${this.authService.token.access_token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .pipe(pluck('data'));\r\n  }\r\n\r\n  serializeParams(params: Record<string, string>) {\r\n    return new URLSearchParams(params).toString();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "HttpService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "HttpService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-5d19980db4276aa8b736542a6b9c9985-1",
            "file": "libs/domains/product-catalogue/src/lib/services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "candidateCheck",
                    "args": [
                        {
                            "name": "rut",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "rut",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { IEcommerceUserAPI } from '@lla/shared/util-library';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  registerUser(user: { rutId: string; email: string }) {\r\n    return this.http.post('/api/user/register', user);\r\n  }\r\n\r\n  candidateCheck(rut: string) {\r\n    const params = new HttpParams().set('rutId', rut);\r\n    return this.http\r\n      .get<IEcommerceUserAPI>('/api/user/candidate-check', {\r\n        params: params,\r\n      })\r\n      .pipe(map((responce) => responce.isEcommerceCandidate));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "UserService-1"
        }
    ],
    "classes": [
        {
            "name": "homepageobject",
            "id": "class-homepageobject-dcdd1690c7a142d16e858ef43efdc142",
            "file": "apps/ecommerce-web-app-e2e/src/integration/homePageObjectLib.ts",
            "type": "class",
            "sourceCode": "class homepageobject {\r\n\r\n    getLogo(){\r\n        return cy.get('.logo:nth-child(1)').should('be.visible').and('have.att','class')\r\n    }\r\n    getLogoImg(){\r\n        return cy.get('').should('be.visible').and('have.attr','src')\r\n    }\r\n}\r\n\r\nexport default homepageobject;",
            "properties": [],
            "methods": [
                {
                    "name": "getLogo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 3
                },
                {
                    "name": "getLogoImg",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-1877fb079acc3d660832703fb24302de",
            "file": "libs/shared/ui-library/src/lib/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "body",
                    "defaultValue": "''",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "opacity",
                    "defaultValue": "'100'",
                    "line": 17,
                    "type": "COMPONENT_OPACITY"
                },
                {
                    "name": "status",
                    "defaultValue": "'SUCCESS'",
                    "line": 16,
                    "type": "COMPONENT_STATUS"
                },
                {
                    "name": "statusIcon",
                    "defaultValue": "''",
                    "line": 20
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "line": 19
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "line": 18,
                    "type": "COMPONENT_TYPE"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>To emit click event to parent component</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\ntype COMPONENT_STATUS = 'SUCCESS' | 'WARNING' | 'ERROR' | 'INFO';\r\ntype COMPONENT_OPACITY = '24' | '40' | '100';\r\ntype COMPONENT_TYPE = 'full-width' | 'default';\r\n\r\n@Component({\r\n  selector: 'lla-alert',\r\n  templateUrl: './alert.component.html',\r\n})\r\n\r\n/**\r\n * Alerts component\r\n */\r\nexport class AlertComponent {\r\n  @Input() status: COMPONENT_STATUS = 'SUCCESS';\r\n  @Input() opacity?: COMPONENT_OPACITY = '100';\r\n  @Input() type?: COMPONENT_TYPE = 'default';\r\n  @Input() title = '';\r\n  @Input() statusIcon = '';\r\n  @Input() body?: string = '';\r\n  @Output() clickHandler: EventEmitter<null> = new EventEmitter();\r\n\r\n  /**\r\n   * To emit click event to parent component\r\n   */\r\n  onClose() {\r\n    if (this.clickHandler) this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"alert__position\">\r\n  <div\r\n    class=\"alert\"\r\n    [ngClass]=\"[\r\n      status ? (status | lowercase) : '',\r\n      opacity ? 'opacity__' + opacity : '',\r\n      type ? type + '-alert' : ''\r\n    ]\"\r\n  >\r\n  <span class=\"alert__iconPlaceholder\" [ngClass]=\"statusIcon\"></span>\r\n    <span class=\"alert__title\" [ngClass]= \"statusIcon ? '' : 'reset_alert'\">{{ title }}</span>\r\n    <a class=\"alert__close\" (click)=\"onClose()\">&times;</a>\r\n    <div class=\"alert__content\">\r\n      {{ body }}\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-387208d6779d94e568c7fe8fa91a71fb",
            "file": "apps/ubc-shell/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-shell",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-shell',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".body {\r\n    display: inline;\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>App </p>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-10fb7a94d690c255a234082453a1e6ca-1",
            "file": "apps/ecommerce-web-app/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logo",
                    "defaultValue": "{\r\n    src: '/assets/vtr/logo/logo-mobile.svg',\r\n    alt: 'logo',\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  logo = {\r\n    src: '/assets/vtr/logo/logo-mobile.svg',\r\n    alt: 'logo',\r\n  };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  margin: 0px;\r\n}\r\n\r\n.app_space {\r\n  margin: 1em;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menu",
                        "type": "MenuService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "menu",
                        "type": "MenuService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppComponent-1",
            "templateData": "<lla-header [logo]=\"logo\"></lla-header>\r\n<main class=\"app_space\">\r\n  <router-outlet></router-outlet>\r\n</main>\r\n<lla-footer [logo]=\"logo\"></lla-footer>\r\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-960cf731048261b74d0a9188c2fd7dbd",
            "file": "libs/shared/ui-library/src/lib/components/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-breadcrumb",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadCrumb",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "string[]"
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClickHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "description": "<p>On click handler of breadcrumb</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-breadcrumb',\r\n  templateUrl: './breadcrumb.component.html',\r\n})\r\n\r\n/**\r\n * BreadcrumbComponent\r\n */\r\nexport class BreadcrumbComponent {\r\n  @Input() breadCrumb: string[] = [];\r\n  @Input() isDarkMode?: boolean = false;\r\n  @Output() clickHandler: EventEmitter<string> = new EventEmitter();\r\n\r\n  /**\r\n   * On click handler of breadcrumb\r\n   */\r\n  onClickHandler(event: MouseEvent): void {\r\n    this.clickHandler.emit((event.target as HTMLInputElement).innerHTML.trim());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div [ngClass]=\"{ breadcrumb: true, 'dark-mode': isDarkMode }\">\r\n  <div class=\"breadcrumb__wrapper\">\r\n    <a\r\n      (click)=\"onClickHandler($event)\"\r\n      class=\"breadcrumb__wrapper__item\"\r\n      *ngFor=\"let item of breadCrumb\"\r\n    >\r\n      {{ item }}\r\n    </a>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ButtongroupComponent",
            "id": "component-ButtongroupComponent-0e2f6b6d7f195308f77aa2769c1dd24d",
            "file": "apps/storybook-app/src/app/stories/atom/button-groups/btn-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-btn-groups",
            "styleUrls": [
                "./btn-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./btn-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "currentValue",
                    "defaultValue": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "extraClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "list",
                    "defaultValue": "[\r\n    { value: 'item 1', label: 'item 1' },\r\n    { value: 'item 2', label: 'item 2' },\r\n    { value: 'item 3', label: 'item 3' },\r\n    { value: 'item 4', label: 'item 4' },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "updatedValue",
                    "defaultValue": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-btn-groups',\r\n  templateUrl: './btn-group.component.html',\r\n  styleUrls: ['./btn-group.component.scss'],\r\n})\r\n/**\r\n * btn-group Component\r\n */\r\nexport class ButtongroupComponent implements OnChanges {\r\n  list = [\r\n    { value: 'item 1', label: 'item 1' },\r\n    { value: 'item 2', label: 'item 2' },\r\n    { value: 'item 3', label: 'item 3' },\r\n    { value: 'item 4', label: 'item 4' },\r\n  ];\r\n  extraClass = '';\r\n  Arr = Array;\r\n  currentValue = 4;\r\n  updatedValue = 4;\r\n  backgroundColor = '';\r\n  isDarkMode = false;\r\n\r\n  ngOnChanges() {\r\n    if (this.updatedValue > this.currentValue) {\r\n      for (let i = this.currentValue; i < this.updatedValue; ) {\r\n        this.list.push({\r\n          value: `item ${++i}`,\r\n          label: `item ${i}`,\r\n        });\r\n      }\r\n    } else if (this.updatedValue < this.currentValue) {\r\n      for (let i = this.updatedValue; i < this.currentValue; i++) {\r\n        this.list.pop();\r\n      }\r\n    }\r\n    this.currentValue = this.updatedValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".template-fluid {\r\n    padding: 30px 15px;\r\n    min-height: 100vh;\r\n}",
                    "styleUrl": "./btn-group.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    <div class=\"btn-groups-wrapper\" [ngClass]=\"[isDarkMode ? 'vtr-btn-group-dark' : 'vtr-btn-group-light',\r\n    extraClass ? extraClass : '']\">\r\n        <mat-button-toggle-group [value]=\"list[0].value\" class=\"btn-group-outer\" name=\"fontStyle\" aria-label=\"Font Style\" (click)=\"$event.stopPropagation()\">\r\n            <mat-button-toggle  class=\"btn-group-inner\"  *ngFor=\"let item of list;\" [value]=\"item.value\" >{{ item.label }}</mat-button-toggle>\r\n          </mat-button-toggle-group>\r\n    </div>\r\n  </div>\r\n\r\n"
        },
        {
            "name": "ButtongroupComponent",
            "id": "component-ButtongroupComponent-6532c25df18a8c95bfdc7f3c70d34c51-1",
            "file": "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-btn-groups",
            "styleUrls": [
                "./btn-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./btn-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "currentValue",
                    "defaultValue": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "extraClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "list",
                    "defaultValue": "[\r\n    { value: 'item 1', label: 'item 1' },\r\n    { value: 'item 2', label: 'item 2' },\r\n    { value: 'item 3', label: 'item 3' },\r\n    { value: 'item 4', label: 'item 4' },\r\n  ]",
                    "type": "IButtonGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "updatedValue",
                    "defaultValue": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges } from '@angular/core';\r\nimport { IButtonGroup } from '../../../interfaces/button-group';\r\n\r\n@Component({\r\n  selector: 'lla-btn-groups',\r\n  templateUrl: './btn-group.component.html',\r\n  styleUrls: ['./btn-group.component.scss'],\r\n})\r\n/**\r\n * btn-group Component\r\n */\r\nexport class ButtongroupComponent implements OnChanges {\r\n  list: IButtonGroup[] = [\r\n    { value: 'item 1', label: 'item 1' },\r\n    { value: 'item 2', label: 'item 2' },\r\n    { value: 'item 3', label: 'item 3' },\r\n    { value: 'item 4', label: 'item 4' },\r\n  ];\r\n  extraClass: string;\r\n  Arr = Array;\r\n  currentValue = 4;\r\n  updatedValue = 4;\r\n\r\n  ngOnChanges() {\r\n    if (this.updatedValue > this.currentValue) {\r\n      for (let i = this.currentValue; i < this.updatedValue; ) {\r\n        this.list.push({\r\n          value: `item ${++i}`,\r\n          label: `item ${i}`,\r\n        });\r\n      }\r\n    } else if (this.updatedValue < this.currentValue) {\r\n      for (let i = this.updatedValue; i < this.currentValue; i++) {\r\n        this.list.pop();\r\n      }\r\n    }\r\n    this.currentValue = this.updatedValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".template-fluid {\r\n    padding: 30px 15px;\r\n    min-height: 100vh;\r\n}",
                    "styleUrl": "./btn-group.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtongroupComponent-1",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    <div class=\"btn-groups-wrapper\" [ngClass]=\"[isDarkMode ? 'vtr-btn-group-dark' : 'vtr-btn-group-light',\r\n    extraClass ? extraClass : '']\">\r\n        <mat-button-toggle-group [value]=\"list[0].value\" class=\"btn-group-outer\" name=\"fontStyle\" aria-label=\"Font Style\" (click)=\"$event.stopPropagation()\">\r\n            <mat-button-toggle  class=\"btn-group-inner\"  *ngFor=\"let item of list;\" [value]=\"item.value\" >{{ item.label }}</mat-button-toggle>\r\n          </mat-button-toggle-group>\r\n    </div>\r\n  </div>\r\n\r\n"
        },
        {
            "name": "ButtonsComponent",
            "id": "component-ButtonsComponent-a42923a7261b0a7a9cc1a32377086cd8",
            "file": "apps/storybook-app/src/app/stories/atom/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "bgcolor",
                    "defaultValue": "'white'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "extraClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "ghostText",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLink",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isPrimary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isSecondary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "noExist",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\n/**\r\n * Buttons component ngOnInit\r\n */\r\nexport class ButtonsComponent {\r\n  extraClass = '';\r\n  text = '';\r\n  backgroundColor = '';\r\n  isdisabled = false;\r\n  isSecondary = false;\r\n  isPrimary = false;\r\n  isLink = false;\r\n  ghostText = false;\r\n  bgcolor = 'white';\r\n  noExist = false;\r\n  TextColor = '';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".template-fluid {\r\n    padding: 30px 15px;\r\n    min-height: 100vh;\r\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div\r\n  class=\"template-fluid\"\r\n  [ngClass]=\"{\r\n    'dark-theme': backgroundColor === '#000000',\r\n    'light-theme': backgroundColor === '#ffffff'\r\n  }\"\r\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n>\r\n  <button\r\n    mat-raised-button\r\n    [disabled]=\"isdisabled\"\r\n    [ngClass]=\"[\r\n      extraClass ? extraClass : '',\r\n      noExist ? 'btn-no-exist' : '',\r\n      isPrimary ? 'button--primary' : '',\r\n      isSecondary ? 'button--secondary' : '',\r\n      isLink ? 'button--link' : ''\r\n    ]\"\r\n  >\r\n    <span\r\n      class=\"icon-left\"\r\n      *ngIf=\"\r\n        extraClass == 'btn-large-icon btn-left' ||\r\n        extraClass == 'btn-small-icon btn-left'\r\n      \"\r\n    >\r\n      <svg\r\n        width=\"20\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          clip-rule=\"evenodd\"\r\n          d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\r\n          stroke=\"white\"\r\n          stroke-width=\"1.47126\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        />\r\n      </svg>\r\n    </span>\r\n    <span\r\n      *ngIf=\"\r\n        extraClass !== 'btn-icon large-icon' &&\r\n        extraClass !== 'btn-icon small-icon'\r\n      \"\r\n    >\r\n      {{ text }}\r\n    </span>\r\n    <span\r\n      *ngIf=\"\r\n        extraClass == 'btn-large-icon btn-right' ||\r\n        extraClass == 'btn-small-icon btn-right' ||\r\n        extraClass == 'btn-icon large-icon' ||\r\n        extraClass == 'btn-icon small-icon'\r\n      \"\r\n      [ngClass]=\"[\r\n        extraClass == 'btn-large-icon btn-right'\r\n          ? 'icon-right'\r\n          : extraClass == 'btn-small-icon btn-right'\r\n          ? 'icon-right'\r\n          : '',\r\n        extraClass == 'btn-icon large-icon'\r\n          ? 'icon'\r\n          : extraClass == 'btn-icon small-icon'\r\n          ? 'icon'\r\n          : ''\r\n      ]\"\r\n    >\r\n      <svg\r\n        width=\"20\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          clip-rule=\"evenodd\"\r\n          d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\r\n          stroke=\"white\"\r\n          stroke-width=\"1.47126\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        /></svg></span>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "ButtonsComponent",
            "id": "component-ButtonsComponent-cef1f58eee00b1fe19eda91d6386a175-1",
            "file": "libs/shared/ui-library/src/lib/stories/atom/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "bgcolor",
                    "defaultValue": "'white'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "extraClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "ghostText",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLink",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isPrimary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isSecondary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "noExist",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\n/**\r\n * Buttons component ngOnInit\r\n */\r\nexport class ButtonsComponent {\r\n  extraClass = '';\r\n  text = '';\r\n  backgroundColor = '';\r\n  isdisabled = false;\r\n  isSecondary;\r\n  isPrimary;\r\n  isLink;\r\n  ghostText = false;\r\n  bgcolor = 'white';\r\n  noExist = false;\r\n  TextColor = '';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".template-fluid {\r\n    padding: 30px 15px;\r\n    min-height: 100vh;\r\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonsComponent-1",
            "templateData": "<div\r\n  class=\"template-fluid\"\r\n  [ngClass]=\"{\r\n    'dark-theme': backgroundColor === '#000000',\r\n    'light-theme': backgroundColor === '#ffffff'\r\n  }\"\r\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n>\r\n  <button\r\n    mat-raised-button\r\n    [disabled]=\"isdisabled\"\r\n    [ngClass]=\"[\r\n      extraClass ? extraClass : '',\r\n      noExist ? 'btn-no-exist' : '',\r\n      isPrimary ? 'button--primary' : '',\r\n      isSecondary ? 'button--secondary' : '',\r\n      isLink ? 'button--link' : ''\r\n    ]\"\r\n  >\r\n    <span\r\n      class=\"icon-left\"\r\n      *ngIf=\"\r\n        extraClass == 'btn-large-icon btn-left' ||\r\n        extraClass == 'btn-small-icon btn-left'\r\n      \"\r\n    >\r\n      <svg\r\n        width=\"20\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          clip-rule=\"evenodd\"\r\n          d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\r\n          stroke=\"white\"\r\n          stroke-width=\"1.47126\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        />\r\n      </svg>\r\n    </span>\r\n    <span\r\n      *ngIf=\"\r\n        extraClass !== 'btn-icon large-icon' &&\r\n        extraClass !== 'btn-icon small-icon'\r\n      \"\r\n    >\r\n      {{ text }}\r\n    </span>\r\n    <span\r\n      *ngIf=\"\r\n        extraClass == 'btn-large-icon btn-right' ||\r\n        extraClass == 'btn-small-icon btn-right' ||\r\n        extraClass == 'btn-icon large-icon' ||\r\n        extraClass == 'btn-icon small-icon'\r\n      \"\r\n      [ngClass]=\"[\r\n        extraClass == 'btn-large-icon btn-right'\r\n          ? 'icon-right'\r\n          : extraClass == 'btn-small-icon btn-right'\r\n          ? 'icon-right'\r\n          : '',\r\n        extraClass == 'btn-icon large-icon'\r\n          ? 'icon'\r\n          : extraClass == 'btn-icon small-icon'\r\n          ? 'icon'\r\n          : ''\r\n      ]\"\r\n    >\r\n      <svg\r\n        width=\"20\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          clip-rule=\"evenodd\"\r\n          d=\"M18.6552 1L1 9.09839H10.1954C10.3985 9.09839 10.5632 9.26307 10.5632 9.46621V18.6552L18.6552 1Z\"\r\n          stroke=\"white\"\r\n          stroke-width=\"1.47126\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        /></svg></span>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "CenteredCardComponent",
            "id": "component-CenteredCardComponent-461922fdcf2c85739ec559af73db247b",
            "file": "libs/shared/ui-library/src/lib/components/cards/centered-card/centered-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-centered-card",
            "styleUrls": [
                "./centered-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./centered-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardData",
                    "defaultValue": "{\r\n    imageUrl: '',\r\n    title: '',\r\n  }",
                    "line": 10,
                    "type": "ICenteredCard"
                },
                {
                    "name": "isbordered",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "false",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport type { ICenteredCard } from '../../../interfaces/centered-card';\r\n\r\n@Component({\r\n  selector: 'lla-centered-card',\r\n  templateUrl: './centered-card.component.html',\r\n  styleUrls: ['./centered-card.component.scss'],\r\n})\r\nexport class CenteredCardComponent {\r\n  @Input() cardData: ICenteredCard = {\r\n    imageUrl: '',\r\n    title: '',\r\n  };\r\n  @Input() isbordered?: boolean = false;\r\n  @Input() isdarkTheme?: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-centered {\r\n    .card-layout {\r\n      width: 200px;\r\n      padding: 0px;\r\n      box-shadow: 1px 1px 4px 1px $grey400;\r\n    }\r\n  \r\n    .card-layout-spacing {\r\n      padding: 8px 8px 0 8px;\r\n    }\r\n  \r\n    .card-layout img {\r\n      width: 200px;\r\n      height: 204px;\r\n    }\r\n  \r\n    .card-content {\r\n      text-align: center;\r\n      font-family: $InterRegular;\r\n      padding: 12px 20px 16px 20px;\r\n    }\r\n  \r\n    .card-title {\r\n      font-family: $InterBold;\r\n      font-size: 17px;\r\n      line-height: 20px;\r\n      padding: 5px;\r\n    }\r\n  \r\n    .card-tagline {\r\n      font-size: 13px;\r\n      line-height: 20px;\r\n      color: $grey100;\r\n      padding: 5px;\r\n    }\r\n  \r\n    .card-price {\r\n      font-size: 13px;\r\n      line-height: 20px;\r\n    }\r\n  \r\n    .card-layout-dark {\r\n      background: $black200;\r\n  \r\n      .card-tagline,\r\n      .card-price,\r\n      .card-title {\r\n        color: $white900;\r\n      }\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./centered-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"card-layout-centered\">\r\n  <mat-card\r\n    class=\"card-layout\"\r\n    [ngClass]=\"{\r\n      'card-layout-spacing': isbordered,\r\n      'card-layout-dark': isdarkTheme\r\n    }\"\r\n  >\r\n    <img src=\"{{ cardData.imageUrl }}\" alt=\"{{ cardData.altText }}\" />\r\n    <div class=\"card-content\">\r\n      <div class=\"card-tagline\">{{ cardData.tagline }}</div>\r\n      <div class=\"card-title\">{{ cardData.title }}</div>\r\n      <div class=\"card-price\">{{ cardData.price }}</div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-16ac80f95023010dee7a60cf25ebfeb4",
            "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "caption",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "iserror",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isgroup",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isprimary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "label",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "values",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n})\r\n/**\r\n * Checkbox component\r\n */\r\nexport class CheckboxComponent {\r\n  isChecked = false;\r\n  disabled = false;\r\n  backgroundColor = '';\r\n  isprimary = false;\r\n  isgroup = false;\r\n  iserror = false;\r\n  label = false;\r\n  caption = false;\r\n  values = 0;\r\n  Arr = Array;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div *ngIf=\"isprimary\">\r\n    <div\r\n      [ngClass]=\"[\r\n        backgroundColor == 'rgba(255,255,255,1)'\r\n          ? 'primary-checkbox'\r\n          : 'dark-checkbox'\r\n      ]\"\r\n    >\r\n      <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\r\n      <mat-checkbox *ngIf=\"!isgroup\" [checked]=\"isChecked\" [disabled]=\"disabled\"\r\n        ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\r\n          >Checkbox label</span\r\n        ></mat-checkbox\r\n      >\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"iserror\" class=\"error-checkbox\">\r\n    <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\r\n    <mat-checkbox [checked]=\"isChecked\"\r\n      ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\r\n        >Checkbox label</span\r\n      ></mat-checkbox\r\n    >\r\n  </div>\r\n  <div *ngIf=\"isgroup\" class=\"primary-checkbox\">\r\n    <p class=\"group-checkbox-caption checkbox-caption\" *ngIf=\"caption\">\r\n      Group caption\r\n    </p>\r\n    <mat-list>\r\n      <mat-list-item *ngFor=\"let item of Arr(values).fill(1); let i = index\">\r\n        <label class=\"checkbox-container\">\r\n          <input type=\"checkbox\" class=\"new-checkbox\" />\r\n          <span class=\"checkmark\"\r\n            ><span *ngIf=\"label\" class=\"mat-checkbox-label label-addon\">CheckBox {{i+1}}</span></span\r\n          ></label\r\n        >\r\n      </mat-list-item>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-0a32dba2d341431bd2c7d288c8cfd7c4-1",
            "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "backgroundColor",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "caption",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "iserror",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isgroup",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isprimary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "label",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "values",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n})\r\n/**\r\n * Checkbox component\r\n */\r\nexport class CheckboxComponent {\r\n  isChecked = false;\r\n  disabled = false;\r\n  backgroundColor;\r\n  isprimary;\r\n  isgroup;\r\n  iserror;\r\n  label;\r\n  caption;\r\n  values;\r\n  Arr = Array;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CheckboxComponent-1",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div *ngIf=\"isprimary\">\r\n    <div\r\n      [ngClass]=\"[\r\n        backgroundColor == 'rgba(255,255,255,1)'\r\n          ? 'primary-checkbox'\r\n          : 'dark-checkbox'\r\n      ]\"\r\n    >\r\n      <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\r\n      <mat-checkbox *ngIf=\"!isgroup\" [checked]=\"isChecked\" [disabled]=\"disabled\"\r\n        ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\r\n          >Checkbox label</span\r\n        ></mat-checkbox\r\n      >\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"iserror\" class=\"error-checkbox\">\r\n    <p class=\"checkbox-caption\" *ngIf=\"caption\">Caption</p>\r\n    <mat-checkbox [checked]=\"isChecked\"\r\n      ><span class=\"mat-checkbox-label\" *ngIf=\"label\"\r\n        >Checkbox label</span\r\n      ></mat-checkbox\r\n    >\r\n  </div>\r\n  <div *ngIf=\"isgroup\" class=\"primary-checkbox\">\r\n    <p class=\"group-checkbox-caption checkbox-caption\" *ngIf=\"caption\">\r\n      Group caption\r\n    </p>\r\n    <mat-list>\r\n      <mat-list-item *ngFor=\"let item of Arr(values).fill(1); let i = index\">\r\n        <label class=\"checkbox-container\">\r\n          <input type=\"checkbox\" class=\"new-checkbox\" />\r\n          <span class=\"checkmark\"\r\n            ><span *ngIf=\"label\" class=\"mat-checkbox-label label-addon\">CheckBox {{i+1}}</span></span\r\n          ></label\r\n        >\r\n      </mat-list-item>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorsComponent",
            "id": "component-ColorsComponent-4fcc2fffab6115d54d95f199315e4996",
            "file": "apps/storybook-app/src/app/stories/atom/colors/colors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-colors",
            "styleUrls": [
                "./colors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./colors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "bgcolorFlowPrimary",
                    "defaultValue": "['blue']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "bgcolorFlowSecondary",
                    "defaultValue": "['green', 'violent']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "bgcolorFlowTeritary",
                    "defaultValue": "['red', 'orange']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "bgcolorNeutral",
                    "defaultValue": "['grey']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "bgcolorVTRPrimary",
                    "defaultValue": "['pink']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "bgcolorVTRSecondary",
                    "defaultValue": "['blue', 'violent', 'lightBlue', 'paleCyan']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "bgcolorVTRTeritary",
                    "defaultValue": "['green', 'paleBlue', 'orange', 'red']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "btnCategory",
                    "defaultValue": "'primary'",
                    "type": "colors",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "opacity",
                    "defaultValue": "[\r\n    'C50',\r\n    'C100',\r\n    'C200',\r\n    'C300',\r\n    'C400',\r\n    'C500',\r\n    'C600',\r\n    'C700',\r\n    'C800',\r\n    'C900',\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "textAlignment",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "transparency",
                    "defaultValue": "['OP8', 'OP16', 'OP24', 'OP32', 'OP40', 'OP48']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "description": "<p>OnInit Function, to store current selected Theme</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\ntype colors = 'primary' | 'secondary' | 'neutral' | 'teritary';\r\n@Component({\r\n  selector: 'lla-colors',\r\n  templateUrl: './colors.component.html',\r\n  styleUrls: ['./colors.component.scss'],\r\n})\r\n\r\nexport class ColorsComponent implements OnInit {\r\n  textAlignment = 'left';\r\n  opacity = [\r\n    'C50',\r\n    'C100',\r\n    'C200',\r\n    'C300',\r\n    'C400',\r\n    'C500',\r\n    'C600',\r\n    'C700',\r\n    'C800',\r\n    'C900',\r\n  ];\r\n  transparency = ['OP8', 'OP16', 'OP24', 'OP32', 'OP40', 'OP48'];\r\n  btnCategory: colors = 'primary';\r\n  getTheme: string | null = 'VTR';\r\n  bgcolorVTRPrimary = ['pink'];\r\n  bgcolorVTRSecondary = ['blue', 'violent', 'lightBlue', 'paleCyan'];\r\n  bgcolorVTRTeritary = ['green', 'paleBlue', 'orange', 'red'];\r\n  bgcolorFlowPrimary = ['blue'];\r\n  bgcolorFlowSecondary = ['green', 'violent'];\r\n  bgcolorFlowTeritary = ['red', 'orange'];\r\n  bgcolorNeutral = ['grey'];\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  /**\r\n   * OnInit Function, to store current selected Theme\r\n   */\r\n  ngOnInit(): void {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".colorPallett {\r\n    margin: 50px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  .colorSet {\r\n    flex-basis: 45%;\r\n  }\r\n  .colorBox {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n  }\r\n  .colorInnerBox {\r\n    width: 48px;\r\n    height: 48px;\r\n    border-radius: 10px;\r\n    margin: 10px;\r\n  }\r\n  \r\n  .outlinedBox {\r\n    background-color: transparent !important;\r\n  }\r\n  .codeValue {\r\n    width: 10%;\r\n  }\r\n  .codeTransparent {\r\n    width: 20%;\r\n  }",
                    "styleUrl": "./colors.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<article\r\n  class=\"template-fluid\"\r\n  [ngStyle]=\"{\r\n    'text-align': textAlignment,\r\n    'background-color': backgroundColor,\r\n    color: TextColor\r\n  }\"\r\n  [ngClass]=\"[btnCategory ? btnCategory : ' ']\"\r\n>\r\n  <section *ngIf=\"getTheme == 'VTR'\">\r\n    <section *ngIf=\"btnCategory == 'primary'\">\r\n      <div *ngFor=\"let primaryColor of bgcolorVTRPrimary\">\r\n        <h4>{{ primaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div [ngClass]=\"'colorInnerBox ' + op\"></div>\r\n              <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'secondary'\">\r\n      <div *ngFor=\"let secondaryColor of bgcolorVTRSecondary\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'teritary'\">\r\n      <div *ngFor=\"let teritaryColor of bgcolorVTRTeritary\" class=\"colorSet\">\r\n        <h4>{{ teritaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'neutral'\">\r\n      <div *ngFor=\"let neutralColor of bgcolorNeutral\">\r\n        <h4>{{ neutralColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </section>\r\n  <section *ngIf=\"getTheme == 'Flow'\">\r\n    <section *ngIf=\"btnCategory == 'primary'\">\r\n      <div *ngFor=\"let primaryColor of bgcolorFlowPrimary\">\r\n        <h4>{{ primaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div [ngClass]=\"'colorInnerBox ' + op\"></div>\r\n              <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'secondary'\">\r\n      <div *ngFor=\"let secondaryColor of bgcolorFlowSecondary\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'teritary'\">\r\n      <div *ngFor=\"let teritaryColor of bgcolorFlowTeritary\" class=\"colorSet\">\r\n        <h4>{{ teritaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'neutral'\">\r\n      <div *ngFor=\"let neutralColor of bgcolorNeutral\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </section>\r\n</article>\r\n"
        },
        {
            "name": "ColorsComponent",
            "id": "component-ColorsComponent-2607ce28706bc5e55a738d7dd9c2ca71-1",
            "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-colors",
            "styleUrls": [
                "./colors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./colors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "bgcolorFlowPrimary",
                    "defaultValue": "['blue']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "false",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport type { CTA_CARD } from '../../../interfaces/cta-card';\r\n\r\n@Component({\r\n  selector: 'lla-cta-card',\r\n  templateUrl: './cta-card.component.html',\r\n  styleUrls: ['./cta-card.component.scss'],\r\n})\r\nexport class CtaCardComponent {\r\n  @Input() cardData: CTA_CARD = {\r\n    imageUrl: '',\r\n    title: '',\r\n  };\r\n  @Input() isbordered?: boolean = false;\r\n  @Input() isdarkTheme?: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-cta {\r\n    .card-layout {\r\n      width: 340px;\r\n      padding: 0px;\r\n      box-shadow: 1px 1px 4px 1px $grey400;\r\n    }\r\n  \r\n    .card-layout img {\r\n      width: 100%;\r\n      height: 180px;\r\n    }\r\n  \r\n    .card-layout-spacing {\r\n      padding: 8px 8px 0 8px;\r\n    }\r\n  \r\n    .card-title {\r\n      font-family: $InterBold;\r\n      font-size: 17px;\r\n      line-height: 20px;\r\n      padding-top: 16px;\r\n    }\r\n  \r\n    .card-placeholder {\r\n      font-family: $InterBold;\r\n      font-size: 17px;\r\n      line-height: 20px;\r\n    }\r\n  \r\n    .card-content {\r\n      padding: 0 20px;\r\n    }\r\n  \r\n    .card-caption {\r\n      font-family: $InterRegular;\r\n      font-size: 13px;\r\n      line-height: 20px;\r\n      padding-top: 8px;\r\n      color: $card-caption;\r\n    }\r\n  \r\n    .card-footer {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding-bottom: 10px;\r\n    }\r\n  \r\n    .card-price {\r\n      font-family: $InterRegular;\r\n      font-size: 15px;\r\n      line-height: 24px;\r\n      color: $black200;\r\n    }\r\n  \r\n    .card-layout-cta-dark {\r\n      background: $black200;\r\n  \r\n      .card-caption,\r\n      .card-title,\r\n      .card-placeholder,\r\n      .card-price {\r\n        color: $white900;\r\n      }\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./cta-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"card-layout-cta\">\r\n  <mat-card\r\n    class=\"card-layout\"\r\n    [ngClass]=\"{\r\n      'card-layout-spacing': isbordered,\r\n      'card-layout-cta-dark': isdarkTheme\r\n    }\"\r\n  >\r\n    <img src=\"{{ cardData.imageUrl }}\" alt=\"{{ cardData.altText }}\" />\r\n    <div class=\"card-content\">\r\n      <div class=\"card-title\">{{ cardData.title }}</div>\r\n      <div class=\"card-placeholder\">{{ cardData.placeholder }}</div>\r\n      <div class=\"card-caption\">{{ cardData.caption }}</div>\r\n      <div class=\"card-footer\">\r\n        <div class=\"card-price\">{{ cardData.price }}</div>\r\n        <button mat-raised-button class=\"button--primary btn-small\">\r\n          {{ cardData.btnText }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-ae6f64e878ee13f4b7955f966af455a6",
            "file": "libs/shared/ui-library/src/lib/components/dropdown/select-dropdown/select-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-select-dropdown",
            "styleUrls": [
                "./select-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 17
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "description": "<p>Inputs for select box option</p>\n",
                    "line": 16,
                    "type": "iSelectOption[]"
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "line": 18,
                    "type": "STATUS"
                }
            ],
            "outputsClass": [
                {
                    "name": "dataSelected",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<iSelectOption>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSelectChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\r\nimport { MatSelectChange } from '@angular/material/select';\r\nimport type { iSelectOption } from '../../../interfaces/select-box';\r\n\r\ntype STATUS = 'success' | 'error' | '';\r\n\r\n@Component({\r\n  selector: 'lla-select-dropdown',\r\n  templateUrl: './select-dropdown.component.html',\r\n  styleUrls: ['./select-dropdown.component.scss'],\r\n})\r\nexport class DropdownComponent {\r\n  /**\r\n   * Inputs for select box option\r\n   */\r\n  @Input() options: iSelectOption[] = [];\r\n  @Input() label = '';\r\n  @Input() status: STATUS = '';\r\n  @Input() message?: string = '';\r\n  @Input() isDisabled?: boolean = false;\r\n  @Output() dataSelected: EventEmitter<iSelectOption> = new EventEmitter();\r\n\r\n  handleChanges(event: MatSelectChange): void {\r\n    this.dataSelected.emit({\r\n      value: event.value,\r\n      label: event.source.triggerValue,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-form-field\r\n  class=\"select-box\"\r\n  [ngClass]=\"status\"\r\n>\r\n  <mat-label>{{ label }}</mat-label>\r\n  <mat-select\r\n    (selectionChange)=\"handleChanges($event)\"\r\n    disableOptionCentering\r\n    panelClass=\"selectBoxPanel\"\r\n    [disabled]=\"isDisabled\"\r\n  >\r\n    <mat-option *ngFor=\"let option of options\" [value]=\"option.value\">\r\n      {{ option.label }}\r\n    </mat-option>\r\n  </mat-select>\r\n  <mat-hint class=\"toaster toaster-background\">{{\r\n    message\r\n  }}</mat-hint>\r\n</mat-form-field>\r\n\r\n"
        },
        {
            "name": "EcommerceWebformComponent",
            "id": "component-EcommerceWebformComponent-6a3d3bf5b3892a0226ebd9670f015c7b",
            "file": "libs/domains/product-catalogue/src/lib/components/ecommerce-webform/ecommerce-webform.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-ecommerce-webform",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ecommerce-webform.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bgcolorFlowTeritary",
                    "defaultValue": "['red', 'orange']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "bgcolorNeutral",
                    "defaultValue": "['grey']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "bgcolorVTRPrimary",
                    "defaultValue": "['pink']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "bgcolorVTRSecondary",
                    "defaultValue": "['blue', 'violent', 'lightBlue', 'paleCyan']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "bgcolorVTRTeritary",
                    "defaultValue": "['green', 'paleBlue', 'orange', 'red']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "btnCategory",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "opacity",
                    "defaultValue": "[\r\n    'C50',\r\n    'C100',\r\n    'C200',\r\n    'C300',\r\n    'C400',\r\n    'C500',\r\n    'C600',\r\n    'C700',\r\n    'C800',\r\n    'C900',\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "textAlignment",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Input Parameters</p>\n",
                    "line": 21
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "transparency",
                    "defaultValue": "['OP8', 'OP16', 'OP24', 'OP32', 'OP40', 'OP48']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>OnInit Function, to store current selected Theme</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-colors',\r\n  templateUrl: './colors.component.html',\r\n  styleUrls: ['./colors.component.scss'],\r\n})\r\n/**\r\n * Color component\r\n */\r\nexport class ColorsComponent implements OnInit {\r\n  /**\r\n   * Color component constructor\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n  /**\r\n   * Input Parameters\r\n   */\r\n  textAlignment = 'left';\r\n  opacity = [\r\n    'C50',\r\n    'C100',\r\n    'C200',\r\n    'C300',\r\n    'C400',\r\n    'C500',\r\n    'C600',\r\n    'C700',\r\n    'C800',\r\n    'C900',\r\n  ];\r\n  transparency = ['OP8', 'OP16', 'OP24', 'OP32', 'OP40', 'OP48'];\r\n  btnCategory: 'primary';\r\n  getTheme = 'VTR';\r\n  bgcolorVTRPrimary = ['pink'];\r\n  bgcolorVTRSecondary = ['blue', 'violent', 'lightBlue', 'paleCyan'];\r\n  bgcolorVTRTeritary = ['green', 'paleBlue', 'orange', 'red'];\r\n  bgcolorFlowPrimary = ['blue'];\r\n  bgcolorFlowSecondary = ['green', 'violent'];\r\n  bgcolorFlowTeritary = ['red', 'orange'];\r\n  bgcolorNeutral = ['grey'];\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  /**\r\n   * OnInit Function, to store current selected Theme\r\n   */\r\n  ngOnInit(): void {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".colorPallett {\r\n    margin: 50px;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n  .colorSet {\r\n    flex-basis: 45%;\r\n  }\r\n  .colorBox {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n  }\r\n  .colorInnerBox {\r\n    width: 48px;\r\n    height: 48px;\r\n    border-radius: 10px;\r\n    margin: 10px;\r\n  }\r\n  \r\n  .outlinedBox {\r\n    background-color: transparent !important;\r\n  }\r\n  .codeValue {\r\n    width: 10%;\r\n  }\r\n  .codeTransparent {\r\n    width: 20%;\r\n  }",
                    "styleUrl": "./colors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Color component constructor</p>\n",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ColorsComponent-1",
            "templateData": "<article\r\n  class=\"template-fluid\"\r\n  [ngStyle]=\"{\r\n    'text-align': textAlignment,\r\n    'background-color': backgroundColor,\r\n    color: TextColor\r\n  }\"\r\n  [ngClass]=\"[btnCategory ? btnCategory : ' ']\"\r\n>\r\n  <section *ngIf=\"getTheme == 'VTR'\">\r\n    <section *ngIf=\"btnCategory == 'primary'\">\r\n      <div *ngFor=\"let primaryColor of bgcolorVTRPrimary\">\r\n        <h4>{{ primaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div [ngClass]=\"'colorInnerBox ' + op\"></div>\r\n              <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'secondary'\">\r\n      <div *ngFor=\"let secondaryColor of bgcolorVTRSecondary\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'teritary'\">\r\n      <div *ngFor=\"let teritaryColor of bgcolorVTRTeritary\" class=\"colorSet\">\r\n        <h4>{{ teritaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'neutral'\">\r\n      <div *ngFor=\"let neutralColor of bgcolorNeutral\">\r\n        <h4>{{ neutralColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </section>\r\n  <section *ngIf=\"getTheme == 'Flow'\">\r\n    <section *ngIf=\"btnCategory == 'primary'\">\r\n      <div *ngFor=\"let primaryColor of bgcolorFlowPrimary\">\r\n        <h4>{{ primaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div [ngClass]=\"'colorInnerBox ' + op\"></div>\r\n              <div [ngClass]=\"'colorInnerBox outlinedBox ' + op\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + primaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'secondary'\">\r\n      <div *ngFor=\"let secondaryColor of bgcolorFlowSecondary\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + secondaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'teritary'\">\r\n      <div *ngFor=\"let teritaryColor of bgcolorFlowTeritary\" class=\"colorSet\">\r\n        <h4>{{ teritaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of opacity\"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + teritaryColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section *ngIf=\"btnCategory == 'neutral'\">\r\n      <div *ngFor=\"let neutralColor of bgcolorNeutral\">\r\n        <h4>{{ secondaryColor | uppercase }}</h4>\r\n        <div class=\"colorPallett\">\r\n          <div class=\"colorSet\">\r\n            <p><strong>Colors</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"\r\n                let op of [\r\n                  'C50',\r\n                  'C100',\r\n                  'C200',\r\n                  'C300',\r\n                  'C400',\r\n                  'C500',\r\n                  'C600',\r\n                  'C700',\r\n                  'C800'\r\n                ]\r\n              \"\r\n            >\r\n              <p class=\"codeValue\">{{ op.replace('C', '') }}</p>\r\n              <div\r\n                mat-raised-button\r\n                [ngStyle]=\"{ 'font-weight': '600', border: '0px' }\"\r\n                [ngClass]=\"'colorInnerBox ' + op\"\r\n              ></div>\r\n              <div\r\n                [ngStyle]=\"{ 'font-weight': '600' }\"\r\n                [ngClass]=\"'colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"transparencySet\">\r\n            <p><strong>Transparency</strong></p>\r\n            <div\r\n              [ngClass]=\"'colorBox  ' + neutralColor\"\r\n              *ngFor=\"let op of transparency\"\r\n            >\r\n              <p class=\"codeTransparent\">{{ op.replace('OP', '') + '%' }}</p>\r\n              <div [ngClass]=\"'transparentBox colorInnerBox ' + op\"></div>\r\n              <div\r\n                [ngClass]=\"'transparentBox colorInnerBox outlinedBox ' + op\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </section>\r\n</article>\r\n"
        },
        {
            "name": "CtaCardComponent",
            "id": "component-CtaCardComponent-6b7e5eb766082d0f706540727c49b129",
            "file": "libs/shared/ui-library/src/lib/components/cards/cta-card/cta-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-cta-card",
            "styleUrls": [
                "./cta-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cta-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardData",
                    "defaultValue": "{\r\n    imageUrl: '',\r\n    title: '',\r\n  }",
                    "line": 10,
                    "type": "ICtaCard"
                },
                {
                    "name": "isbordered",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "false",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport type { ICtaCard } from '../../../interfaces/cta-card';\r\n\r\n@Component({\r\n  selector: 'lla-cta-card',\r\n  templateUrl: './cta-card.component.html',\r\n  styleUrls: ['./cta-card.component.scss'],\r\n})\r\nexport class CtaCardComponent {\r\n  @Input() cardData: ICtaCard = {\r\n    imageUrl: '',\r\n    title: '',\r\n  };\r\n  @Input() isbordered?: boolean = false;\r\n  @Input() isdarkTheme?: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-cta {\r\n    .card-layout {\r\n      width: 340px;\r\n      padding: 0px;\r\n      box-shadow: 1px 1px 4px 1px $grey400;\r\n    }\r\n  \r\n    .card-layout img {\r\n      width: 100%;\r\n      height: 180px;\r\n    }\r\n  \r\n    .card-layout-spacing {\r\n      padding: 8px 8px 0 8px;\r\n    }\r\n  \r\n    .card-title {\r\n      font-family: $InterBold;\r\n      font-size: 17px;\r\n      line-height: 20px;\r\n      padding-top: 16px;\r\n    }\r\n  \r\n    .card-placeholder {\r\n      font-family: $InterBold;\r\n      font-size: 17px;\r\n      line-height: 20px;\r\n    }\r\n  \r\n    .card-content {\r\n      padding: 0 20px;\r\n    }\r\n  \r\n    .card-caption {\r\n      font-family: $InterRegular;\r\n      font-size: 13px;\r\n      line-height: 20px;\r\n      padding-top: 8px;\r\n      color: $card-caption;\r\n    }\r\n  \r\n    .card-footer {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding-bottom: 10px;\r\n    }\r\n  \r\n    .card-price {\r\n      font-family: $InterRegular;\r\n      font-size: 15px;\r\n      line-height: 24px;\r\n      color: $black200;\r\n    }\r\n  \r\n    .card-layout-cta-dark {\r\n      background: $black200;\r\n  \r\n      .card-caption,\r\n      .card-title,\r\n      .card-placeholder,\r\n      .card-price {\r\n        color: $white900;\r\n      }\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./cta-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"card-layout-cta\">\r\n  <mat-card\r\n    class=\"card-layout\"\r\n    [ngClass]=\"{\r\n      'card-layout-spacing': isbordered,\r\n      'card-layout-cta-dark': isdarkTheme\r\n    }\"\r\n  >\r\n    <img src=\"{{ cardData.imageUrl }}\" alt=\"{{ cardData.altText }}\" />\r\n    <div class=\"card-content\">\r\n      <div class=\"card-title\">{{ cardData.title }}</div>\r\n      <div class=\"card-placeholder\">{{ cardData.placeholder }}</div>\r\n      <div class=\"card-caption\">{{ cardData.caption }}</div>\r\n      <div class=\"card-footer\">\r\n        <div class=\"card-price\">{{ cardData.price }}</div>\r\n        <button mat-raised-button class=\"button--primary btn-small\">\r\n          {{ cardData.btnText }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "DialogContentComponent",
            "id": "component-DialogContentComponent-804ec9811b58cbb9782f8649aacb4257",
            "file": "libs/shared/ui-library/src/lib/components/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-dialogs-popup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialogs-popup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "IDialogData",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<DialogContentComponent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { IDialogData } from '@lla/shared/util-library';\r\n\r\n@Component({\r\n  selector: 'lla-dialogs-popup',\r\n  templateUrl: './dialogs-popup.component.html',\r\n})\r\nexport class DialogContentComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogContentComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: IDialogData\r\n  ) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogContentComponent>"
                    },
                    {
                        "name": "data",
                        "type": "IDialogData"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogContentComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IDialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"dialog\" >\r\n  <span *ngIf=\"data.closeButton\" class=\"icon-close-outline icon-close\" mat-dialog-close></span>  \r\n  <div class=\"title\" *ngIf=\"!data.iconOntop\">{{data.title}} </div>\r\n  <div class=\"icon\" *ngIf=\"data.iconOntop\" [ngClass]=\"[data.iconClass ? data.iconClass : '']\"></div>\r\n  <mat-dialog-content class=\"mat-typography\">        \r\n    <p class=\"description\">{{data.description}}</p> \r\n  </mat-dialog-content> \r\n  <mat-dialog-actions> \r\n      <button *ngIf=\"data.primaryButton\" mat-raised-button class=\"button--primary btn-large\">{{data.primaryButtontext}}</button> \r\n      <button *ngIf=\"data.secondaryButton\" mat-raised-button class=\"button--secondary btn-large\">{{data.secondaryButtontext}}</button>\r\n  </mat-dialog-actions> \r\n</div>"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-985a62254912ab140c2d6303ea3844e8",
            "file": "libs/shared/ui-library/src/lib/components/dropdown/select-dropdown/select-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-select-dropdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 16
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "description": "<p>Inputs for select box option</p>\n",
                    "line": 15,
                    "type": "iSelectOption[]"
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "line": 17,
                    "type": "STATUS"
                }
            ],
            "outputsClass": [
                {
                    "name": "dataSelected",
                    "defaultValue": "new EventEmitter()",
                    "line": 20,
                    "type": "EventEmitter<iSelectOption>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSelectChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\r\nimport { MatSelectChange } from '@angular/material/select';\r\nimport type { iSelectOption } from '../../../interfaces/select-box';\r\n\r\ntype STATUS = 'success' | 'error' | '';\r\n\r\n@Component({\r\n  selector: 'lla-select-dropdown',\r\n  templateUrl: './select-dropdown.component.html',\r\n})\r\nexport class DropdownComponent {\r\n  /**\r\n   * Inputs for select box option\r\n   */\r\n  @Input() options: iSelectOption[] = [];\r\n  @Input() label = '';\r\n  @Input() status: STATUS = '';\r\n  @Input() message?: string = '';\r\n  @Input() isDisabled?: boolean = false;\r\n  @Output() dataSelected: EventEmitter<iSelectOption> = new EventEmitter();\r\n\r\n  handleChanges(event: MatSelectChange): void {\r\n    this.dataSelected.emit({\r\n      value: event.value,\r\n      label: event.source.triggerValue,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<mat-form-field\r\n  class=\"select-box\"\r\n  [ngClass]=\"status\"\r\n>\r\n  <mat-label>{{ label }}</mat-label>\r\n  <mat-select\r\n    (selectionChange)=\"handleChanges($event)\"\r\n    disableOptionCentering\r\n    panelClass=\"selectBoxPanel\"\r\n    [disabled]=\"isDisabled\"\r\n  >\r\n    <mat-option *ngFor=\"let option of options\" [value]=\"option.value\">\r\n      {{ option.label }}\r\n    </mat-option>\r\n  </mat-select>\r\n  <mat-hint class=\"toaster toaster-background\">{{\r\n    message\r\n  }}</mat-hint>\r\n</mat-form-field>\r\n\r\n"
        },
        {
            "name": "EcommerceWebformComponent",
            "id": "component-EcommerceWebformComponent-6a3d3bf5b3892a0226ebd9670f015c7b",
            "file": "libs/domains/product-catalogue/src/lib/components/ecommerce-webform/ecommerce-webform.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-ecommerce-webform",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ecommerce-webform.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EcommerceWebformComponent>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n@Component({\r\n  selector: 'lla-ecommerce-webform',\r\n  templateUrl: './ecommerce-webform.component.html',\r\n})\r\nexport class EcommerceWebformComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<EcommerceWebformComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: boolean\r\n  ) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EcommerceWebformComponent>"
                    },
                    {
                        "name": "data",
                        "type": "boolean"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EcommerceWebformComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Form Submission Status</h2>\r\n<mat-dialog-content class=\"text-center form-user-validation\">\r\n  <div *ngIf=\"data\">\r\n    <p>You are an E-Commerce candidate, please continue to shopping cart</p>\r\n    <button\r\n      mat-raised-button\r\n      [mat-dialog-close]=\"true\"\r\n      class=\"button--primary btn-small\"\r\n    >\r\n      Close\r\n    </button>\r\n  </div>\r\n  <div *ngIf=\"!data\">\r\n    <p>You are not an E-Commerce candidate!</p>\r\n    <button\r\n      mat-raised-button\r\n      [mat-dialog-close]=\"true\"\r\n      class=\"button--primary btn-small\"\r\n    >\r\n      Click to Call\r\n    </button>\r\n  </div>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-8f2279b21fb5d3f6841cfac781d5eeff",
            "file": "libs/shared/feature-library/src/lib/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "logo",
                    "defaultValue": "{ src: '', alt: '' }",
                    "line": 9,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss'],\r\n})\r\nexport class FooterComponent {\r\n  @Input() logo: {\r\n    src: string;\r\n    alt: string;\r\n  } = { src: '', alt: '' };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-spacer {\r\n    flex: 1 1 auto;\r\n}\r\n\r\n.mat-toolbar {\r\n    background: black;\r\n    color:white;\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    background: none;\r\n    outline: none;\r\n    color: #ffffff;\r\n}",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-toolbar>\r\n    <mat-toolbar-row>\r\n        <span class=\"nav-spacer\"></span>\r\n        <lla-logo [imgPath]=\"logo.src\" [altTag]=\"logo.alt\"></lla-logo>\r\n        <span class=\"nav-spacer\"></span>\r\n    </mat-toolbar-row>\r\n    <mat-toolbar-row>\r\n        <span class=\"nav-spacer\"></span>\r\n        <button class=\"wrapper-icon sm-icon\" aria-label=\"icon-button with menu icon\">\r\n        <span class=\"icon-share-social-outline\"></span>\r\n        </button>\r\n        <button class=\"wrapper-icon sm-icon\" aria-label=\"icon-button with menu icon\">\r\n        <span class=\"icon-share-social-outline\"></span>\r\n        </button>\r\n        <button class=\"wrapper-icon sm-icon\" aria-label=\"icon-button with menu icon\">\r\n        <span class=\"icon-share-social-outline\"></span>\r\n        </button>\r\n        <span class=\"nav-spacer\"></span>\r\n    </mat-toolbar-row>\r\n    <mat-toolbar-row>\r\n        <span class=\"nav-spacer\"></span>\r\n        <p>Copyright 2021. VTR</p>\r\n        <span class=\"nav-spacer\"></span>\r\n    </mat-toolbar-row>\r\n</mat-toolbar>"
        },
        {
            "name": "FullsizeCardComponent",
            "id": "component-FullsizeCardComponent-800ae143e9907ada8b9a7919f71a2f46",
            "file": "libs/shared/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-fullsize-card",
            "styleUrls": [
                "./fullsize-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fullsize-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardData",
                    "defaultValue": "{\r\n    imageUrl: '',\r\n    title: '',\r\n  }",
                    "line": 13,
                    "type": "IFullSizeCard"
                },
                {
                    "name": "cardVariant",
                    "defaultValue": "'FULLSIZE'",
                    "line": 12,
                    "type": "CARD_VARIANT"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport type { IFullSizeCard } from '../../../interfaces/fullsize-card';\r\n\r\ntype CARD_VARIANT = 'FULLSIZE' | 'FULLSIZECTA' | 'FULLSIZEPRICE';\r\n\r\n@Component({\r\n  selector: 'lla-fullsize-card',\r\n  templateUrl: './fullsize-card.component.html',\r\n  styleUrls: ['./fullsize-card.component.scss'],\r\n})\r\nexport class FullsizeCardComponent {\r\n  @Input() cardVariant: CARD_VARIANT = 'FULLSIZE';\r\n  @Input() cardData: IFullSizeCard = {\r\n    imageUrl: '',\r\n    title: '',\r\n  };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-layout-fullsize {\r\n  .card-layout {\r\n    width: 215px;\r\n    height: 200px;\r\n    padding: 0px;\r\n    position: relative;\r\n  }\r\n\r\n  .card-layout img {\r\n    width: 215px;\r\n    height: 200px;\r\n  }\r\n\r\n  .card-content {\r\n    position: absolute;\r\n    top: 12px;\r\n    left: 20px;\r\n  }\r\n\r\n  .card-title {\r\n    font-family: $InterRegular;\r\n    font-weight: bold;\r\n    font-size: 17px;\r\n    line-height: 20px;\r\n  }\r\n\r\n  .card-caption {\r\n    font-family: $InterRegular;\r\n    font-size: 13px;\r\n    color: $card-caption;\r\n  }\r\n}\r\n\r\n.card-layout-fullsize-cta {\r\n  .card-layout {\r\n    width: 215px;\r\n    height: 200px;\r\n    padding: 0px;\r\n    position: relative;\r\n  }\r\n\r\n  .card-layout img {\r\n    width: 215px;\r\n    height: 200px;\r\n  }\r\n\r\n  .card-content {\r\n    position: absolute;\r\n    left: 20px;\r\n    bottom: 19.84px;\r\n  }\r\n\r\n  .card-title {\r\n    font-family: $InterRegular;\r\n    font-family: 15px;\r\n    font-weight: bold;\r\n    height: 24px;\r\n  }\r\n}\r\n\r\n.card-layout-fullsize-price {\r\n  .card-layout {\r\n    width: 215px;\r\n    height: 200px;\r\n    padding: 0px;\r\n    position: relative;\r\n    box-shadow: 1px 1px 4px 1px $grey400;\r\n  }\r\n\r\n  .card-layout img {\r\n    width: 215px;\r\n    height: 200px;\r\n  }\r\n\r\n  .card-title {\r\n    font-family: $InterRegular;\r\n    font-family: 15px;\r\n    font-weight: bold;\r\n    height: 22px;\r\n    position: absolute;\r\n    bottom: 19px;\r\n    left: 20px;\r\n  }\r\n\r\n  .card-price {\r\n    font-family: $InterRegular;\r\n    color: $card-caption;\r\n    height: 22px;\r\n    position: absolute;\r\n    bottom: 19px;\r\n    right: 20px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./fullsize-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div\r\n  [ngClass]=\"{\r\n    'card-layout-fullsize': cardVariant == 'FULLSIZE',\r\n    'card-layout-fullsize-cta': cardVariant == 'FULLSIZECTA',\r\n    'card-layout-fullsize-price': cardVariant == 'FULLSIZEPRICE'\r\n  }\"\r\n>\r\n  <mat-card class=\"card-layout\">\r\n    <img src=\"{{ cardData.imageUrl }}\" alt=\"{{ cardData.altText }}\" />\r\n    <div class=\"card-content\">\r\n      <div class=\"card-title\">{{ cardData.title }}</div>\r\n      <div class=\"card-caption\">\r\n        {{ cardData.caption }}\r\n      </div>\r\n      <button\r\n        *ngIf=\"cardVariant == 'FULLSIZECTA'\"\r\n        class=\"button--primary btn-small\"\r\n      >\r\n        {{ cardData.btnText }}\r\n      </button>\r\n      <div class=\"card-price\">\r\n        {{ cardData.price }}\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-f613ee8376d4dfbad8a3b748e3827a02",
            "file": "apps/storybook-app/src/app/stories/atom/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-grid",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cols",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "gridByBreakpoint",
                    "defaultValue": "{\r\n    xl: 12,\r\n    lg: 12,\r\n    md: 12,\r\n    sm: 8,\r\n    sml: 12,\r\n    xs: 4,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "gutter",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "gutterSize",
                    "defaultValue": "{\r\n    sm: 16,\r\n    lg: 24,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'lla-grid',\r\n  templateUrl: './grid.component.html',\r\n})\r\n/**\r\n * Grid component ngOnInit\r\n */\r\nexport class GridComponent {\r\n  cols = 1;\r\n  gutter = 1;\r\n  backgroundColor = '';\r\n\r\n  gridByBreakpoint = {\r\n    xl: 12,\r\n    lg: 12,\r\n    md: 12,\r\n    sm: 8,\r\n    sml: 12,\r\n    xs: 4,\r\n  };\r\n  gutterSize = {\r\n    sm: 16,\r\n    lg: 24,\r\n  };\r\n  /**\r\n   * Alerts component constructor\r\n   */\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n          if (result.breakpoints[Breakpoints.XSmall]) {\r\n            this.cols = this.gridByBreakpoint.xs;\r\n            this.gutter = this.gutterSize.sm;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Small]) {\r\n            this.cols = this.gridByBreakpoint.sm;\r\n            this.gutter = this.gutterSize.sm;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Medium]) {\r\n            this.cols = this.gridByBreakpoint.md;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Large]) {\r\n            this.cols = this.gridByBreakpoint.lg;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.XLarge]) {\r\n            this.cols = this.gridByBreakpoint.xl;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.HandsetLandscape]) {\r\n            this.cols = this.gridByBreakpoint.sml;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Alerts component constructor</p>\n",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\r\n  [ngClass]=\"{\r\n    'dark-theme': backgroundColor === '#000000',\r\n    'light-theme': backgroundColor === '#ffffff'\r\n  }\"\r\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n>\r\n  <div class=\"grid-wrapper\">\r\n    <mat-grid-list #grid [cols]=\"cols\" rowHeight=\"1:50\" [gutterSize]=\"gutter\">\r\n      <mat-grid-tile>1</mat-grid-tile>\r\n      <mat-grid-tile>2</mat-grid-tile>\r\n      <mat-grid-tile>3</mat-grid-tile>\r\n      <mat-grid-tile>4</mat-grid-tile>\r\n      <mat-grid-tile>5</mat-grid-tile>\r\n      <mat-grid-tile>6</mat-grid-tile>\r\n      <mat-grid-tile>7</mat-grid-tile>\r\n      <mat-grid-tile>8</mat-grid-tile>\r\n      <mat-grid-tile>9</mat-grid-tile>\r\n      <mat-grid-tile>10</mat-grid-tile>\r\n      <mat-grid-tile>11</mat-grid-tile>\r\n      <mat-grid-tile>12</mat-grid-tile>\r\n    </mat-grid-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-620db35c36e157e3305ee14f81651255-1",
            "file": "libs/shared/ui-library/src/lib/stories/atom/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-grid",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cols",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "gridByBreakpoint",
                    "defaultValue": "{\r\n    xl: 12,\r\n    lg: 12,\r\n    md: 12,\r\n    sm: 8,\r\n    sml: 12,\r\n    xs: 4,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "gutter",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "gutterSize",
                    "defaultValue": "{\r\n    sm: 16,\r\n    lg: 24,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'lla-grid',\r\n  templateUrl: './grid.component.html',\r\n})\r\n/**\r\n * Grid component ngOnInit\r\n */\r\nexport class GridComponent {\r\n  cols: number;\r\n  gutter: number;\r\n  backgroundColor;\r\n\r\n  gridByBreakpoint = {\r\n    xl: 12,\r\n    lg: 12,\r\n    md: 12,\r\n    sm: 8,\r\n    sml: 12,\r\n    xs: 4,\r\n  };\r\n  gutterSize = {\r\n    sm: 16,\r\n    lg: 24,\r\n  };\r\n  /**\r\n   * Alerts component constructor\r\n   */\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n          if (result.breakpoints[Breakpoints.XSmall]) {\r\n            this.cols = this.gridByBreakpoint.xs;\r\n            this.gutter = this.gutterSize.sm;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Small]) {\r\n            this.cols = this.gridByBreakpoint.sm;\r\n            this.gutter = this.gutterSize.sm;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Medium]) {\r\n            this.cols = this.gridByBreakpoint.md;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.Large]) {\r\n            this.cols = this.gridByBreakpoint.lg;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.XLarge]) {\r\n            this.cols = this.gridByBreakpoint.xl;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n          if (result.breakpoints[Breakpoints.HandsetLandscape]) {\r\n            this.cols = this.gridByBreakpoint.sml;\r\n            this.gutter = this.gutterSize.lg;\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Alerts component constructor</p>\n",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GridComponent-1",
            "templateData": "<div\r\n  [ngClass]=\"{\r\n    'dark-theme': backgroundColor === '#000000',\r\n    'light-theme': backgroundColor === '#ffffff'\r\n  }\"\r\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n>\r\n  <div class=\"grid-wrapper\">\r\n    <mat-grid-list #grid [cols]=\"cols\" rowHeight=\"1:50\" [gutterSize]=\"gutter\">\r\n      <mat-grid-tile>1</mat-grid-tile>\r\n      <mat-grid-tile>2</mat-grid-tile>\r\n      <mat-grid-tile>3</mat-grid-tile>\r\n      <mat-grid-tile>4</mat-grid-tile>\r\n      <mat-grid-tile>5</mat-grid-tile>\r\n      <mat-grid-tile>6</mat-grid-tile>\r\n      <mat-grid-tile>7</mat-grid-tile>\r\n      <mat-grid-tile>8</mat-grid-tile>\r\n      <mat-grid-tile>9</mat-grid-tile>\r\n      <mat-grid-tile>10</mat-grid-tile>\r\n      <mat-grid-tile>11</mat-grid-tile>\r\n      <mat-grid-tile>12</mat-grid-tile>\r\n    </mat-grid-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-09bd50140ca78a4b39ba10ddd64ca930",
            "file": "libs/shared/feature-library/src/lib/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "logo",
                    "defaultValue": "{ src: '', alt: '' }",
                    "line": 9,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input() logo: {\r\n    src: string;\r\n    alt: string;\r\n  } = { src: '', alt: '' };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-spacer {\r\n    flex: 1 1 auto;\r\n}\r\n\r\n.mat-toolbar {\r\n    background: black;\r\n    color:white;\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    background: none;\r\n    outline: none;\r\n    color: #ffffff;\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row>\r\n      <lla-logo [imgPath]=\"logo.src\" [altTag]=\"logo.alt\"></lla-logo>\r\n      <span class=\"nav-spacer\"></span>\r\n      <button class=\"wrapper-icon sm-icon\" aria-label=\"icon-button with menu icon\">\r\n        <span class=\"icon-battery-charging\"></span>\r\n      </button>\r\n      <button class=\"wrapper-icon sm-icon\" aria-label=\"icon-button with menu icon\">\r\n        <span class=\"icon-cart-outline\"></span>\r\n      </button>\r\n      <button class=\"wrapper-icon sm-icon\" aria-label=\"icon-button with menu icon\">\r\n        <span class=\"icon-menu-outline\"></span>\r\n      </button>\r\n    </mat-toolbar-row>\r\n  </mat-toolbar>"
        },
        {
            "name": "HorizontalMenuComponent",
            "id": "component-HorizontalMenuComponent-94e01eb1de7619ef6e7f2e732cde498f",
            "file": "libs/shared/ui-library/src/lib/components/horizontal-menu/horizontal-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-horizontal-menu",
            "styleUrls": [
                "./horizontal-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horizontal-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconVisible",
                    "defaultValue": "true",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "menuList",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "iMainMenuItem[] | "
                },
                {
                    "name": "subtitleVisible",
                    "defaultValue": "true",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "titleVisible",
                    "defaultValue": "true",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { iMainMenuItem } from '@lla/shared/util-library';\r\n\r\n@Component({\r\n  selector: 'lla-horizontal-menu',\r\n  templateUrl: './horizontal-menu.component.html',\r\n  styleUrls: ['./horizontal-menu.component.scss'],\r\n})\r\nexport class HorizontalMenuComponent {\r\n  @Input() menuList: iMainMenuItem[] | [] = [];\r\n  @Input() isDarkMode?: boolean = true;\r\n  @Input() iconVisible?: boolean = true;\r\n  @Input() titleVisible?: boolean = true;\r\n  @Input() subtitleVisible?: boolean = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./horizontal-menu.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"horizontalMenu__menu\" [ngClass]=\"{'dark-mode': isDarkMode}\">\r\n  <ul class=\"horizontalMenu__menu__ul hidden-xs\">\r\n    <li class=\"horizontalMenu__menu__li\" *ngFor=\"let item of menuList\">\r\n      <ng-container *ngIf=\"item.translation.length>0\" >\r\n        <a href=\"{{item.translation[0].url}}\">\r\n          <span\r\n            *ngIf=\"iconVisible\"\r\n            class=\"icon-placeholder icon-square-outline\"\r\n            [ngClass]=\"{'horizontalMenu__menu__icon__single':!subtitleVisible,\r\n          'horizontalMenu__menu__icon__subtitle':subtitleVisible,\r\n        'horizontalMenu__menu__icon__title':titleVisible }\"\r\n          ></span>\r\n          <span\r\n            [ngClass]=\"{'horizontalMenu__menu__title':subtitleVisible}\"\r\n            *ngIf=\"titleVisible\"\r\n            >{{item.translation[0].title}} <br />\r\n            <span *ngIf=\"subtitleVisible\" class=\"horizontalMenu__menu__subtitle\"\r\n              >subtitle</span\r\n            >\r\n          </span>\r\n        </a>\r\n      </ng-container>\r\n     \r\n    </li>\r\n  </ul>\r\n</div>"
        },
        {
            "name": "HorizontalMenuStoryComponent",
            "id": "component-HorizontalMenuStoryComponent-19d0eb3e5bc66ab5e80d66c828996a70",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-horizontal-menu",
            "styleUrls": [
                "./horizontal-menu.scss"
            ],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <lla-main-menu\n     [menuList]=\"menuList\"\n     [isDarkMode]=\"isDarkMode\"\n     [logoPath]=\"logoPath\"\n     [logoPosition]=\"logoPosition\"\n     [iconVisible]=\"iconVisible\"\n     [titleVisible]=\"titleVisible\"\n     [subtitleVisible]=\"subtitleVisible\"\n   >\n   </lla-main-menu>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "iconVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "logoPath",
                    "defaultValue": "'/vtr/logo/logo-color-dark.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "logoPosition",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "menuList",
                    "defaultValue": "[\r\n    {\r\n      id: 9,\r\n      status: 'published',\r\n      slug: 'internet',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 11,\r\n          main_menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 3,\r\n            domain: 'flow',\r\n            brand: 'flow',\r\n            domain_description: 'Flow',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 3,\r\n          status: 'published',\r\n          title: 'Internet',\r\n          menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/internet',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 13,\r\n          status: 'published',\r\n          slug: 'mega-600',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 6,\r\n              main_menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 11,\r\n              status: 'published',\r\n              title: 'Mega 600',\r\n              menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-600',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 15,\r\n          status: 'published',\r\n          slug: 'mega-500',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 8,\r\n              main_menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 15,\r\n              status: 'published',\r\n              title: 'Mega 500',\r\n              menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-500',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 11,\r\n      status: 'published',\r\n      slug: 'packs',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 4,\r\n          main_menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 7,\r\n          status: 'published',\r\n          title: 'Packs',\r\n          menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/packs',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 12,\r\n          status: 'published',\r\n          slug: 'triple-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 5,\r\n              main_menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 9,\r\n              status: 'published',\r\n              title: 'Triple Pack',\r\n              menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/triple-pack',\r\n              new_tab: ['true'],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 14,\r\n          status: 'published',\r\n          slug: 'double-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 7,\r\n              main_menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 13,\r\n              status: 'published',\r\n              title: 'Double Pack',\r\n              menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/double-pack',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 16,\r\n      status: 'published',\r\n      slug: 'television',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 9,\r\n          main_menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 17,\r\n          status: 'published',\r\n          title: 'Television',\r\n          menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/television',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n    {\r\n      id: 17,\r\n      status: 'published',\r\n      slug: 'mobile',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 10,\r\n          main_menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 19,\r\n          status: 'published',\r\n          title: 'Mobile',\r\n          menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/mobile',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "subtitleVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "themeParam",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "titleVisible",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 483
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-horizontal-menu',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <lla-main-menu\r\n      [menuList]=\"menuList\"\r\n      [isDarkMode]=\"isDarkMode\"\r\n      [logoPath]=\"logoPath\"\r\n      [logoPosition]=\"logoPosition\"\r\n      [iconVisible]=\"iconVisible\"\r\n      [titleVisible]=\"titleVisible\"\r\n      [subtitleVisible]=\"subtitleVisible\"\r\n    >\r\n    </lla-main-menu>\r\n  </div>`,\r\n  styleUrls: ['./horizontal-menu.scss'],\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class HorizontalMenuStoryComponent implements OnChanges {\r\n  backgroundColor = '';\r\n  isDarkMode = true;\r\n  logoPosition = 'left';\r\n  logoPath = '/vtr/logo/logo-color-dark.svg';\r\n  themeParam = '';\r\n  iconVisible = false;\r\n  titleVisible = true;\r\n  subtitleVisible = false;\r\n  menuList = [\r\n    {\r\n      id: 9,\r\n      status: 'published',\r\n      slug: 'internet',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 11,\r\n          main_menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 3,\r\n            domain: 'flow',\r\n            brand: 'flow',\r\n            domain_description: 'Flow',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 3,\r\n          status: 'published',\r\n          title: 'Internet',\r\n          menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/internet',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 13,\r\n          status: 'published',\r\n          slug: 'mega-600',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 6,\r\n              main_menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 11,\r\n              status: 'published',\r\n              title: 'Mega 600',\r\n              menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-600',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 15,\r\n          status: 'published',\r\n          slug: 'mega-500',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 8,\r\n              main_menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 15,\r\n              status: 'published',\r\n              title: 'Mega 500',\r\n              menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-500',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 11,\r\n      status: 'published',\r\n      slug: 'packs',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 4,\r\n          main_menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 7,\r\n          status: 'published',\r\n          title: 'Packs',\r\n          menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/packs',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 12,\r\n          status: 'published',\r\n          slug: 'triple-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 5,\r\n              main_menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 9,\r\n              status: 'published',\r\n              title: 'Triple Pack',\r\n              menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/triple-pack',\r\n              new_tab: ['true'],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 14,\r\n          status: 'published',\r\n          slug: 'double-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 7,\r\n              main_menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 13,\r\n              status: 'published',\r\n              title: 'Double Pack',\r\n              menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/double-pack',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 16,\r\n      status: 'published',\r\n      slug: 'television',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 9,\r\n          main_menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 17,\r\n          status: 'published',\r\n          title: 'Television',\r\n          menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/television',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n    {\r\n      id: 17,\r\n      status: 'published',\r\n      slug: 'mobile',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 10,\r\n          main_menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 19,\r\n          status: 'published',\r\n          title: 'Mobile',\r\n          menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/mobile',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n  ];\r\n\r\n  ngOnChanges() {\r\n    if (this.isDarkMode) {\r\n      this.themeParam = 'dark';\r\n    } else {\r\n      this.themeParam = 'light';\r\n    }\r\n\r\n    this.logoPath = '/vtr/logo/logo-color-' + this.themeParam + '.svg';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./horizontal-menu.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "IconsComponent",
            "id": "component-IconsComponent-fcc2f91087b35e2755fdaa1aa373654a",
            "file": "libs/shared/ui-library/src/lib/stories/atom/icons/icons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-horizontal-menu",
            "styleUrls": [
                "./horizontal-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horizontal-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconVisible",
                    "defaultValue": "true",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "menuList",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "iMainMenuItem[] | "
                },
                {
                    "name": "subtitleVisible",
                    "defaultValue": "true",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "titleVisible",
                    "defaultValue": "true",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { iMainMenuItem } from '@lla/shared/util-library';\r\n\r\n@Component({\r\n  selector: 'lla-horizontal-menu',\r\n  templateUrl: './horizontal-menu.component.html',\r\n  styleUrls: ['./horizontal-menu.component.scss'],\r\n})\r\nexport class HorizontalMenuComponent {\r\n  @Input() menuList: iMainMenuItem[] | [] = [];\r\n  @Input() isDarkMode?: boolean = true;\r\n  @Input() iconVisible?: boolean = true;\r\n  @Input() titleVisible?: boolean = true;\r\n  @Input() subtitleVisible?: boolean = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./horizontal-menu.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"horizontalMenu__menu\" [ngClass]=\"{'dark-mode': isDarkMode}\">\r\n  <ul class=\"horizontalMenu__menu__ul hidden-xs\">\r\n    <li class=\"horizontalMenu__menu__li\" *ngFor=\"let item of menuList\">\r\n      <ng-container *ngIf=\"item.translation.length>0\" >\r\n        <a href=\"{{item.translation[0].url}}\">\r\n          <span\r\n            *ngIf=\"iconVisible\"\r\n            class=\"icon-placeholder icon-square-outline\"\r\n            [ngClass]=\"{'horizontalMenu__menu__icon__single':!subtitleVisible,\r\n          'horizontalMenu__menu__icon__subtitle':subtitleVisible,\r\n        'horizontalMenu__menu__icon__title':titleVisible }\"\r\n          ></span>\r\n          <span\r\n            [ngClass]=\"{'horizontalMenu__menu__title':subtitleVisible}\"\r\n            *ngIf=\"titleVisible\"\r\n            >{{item.translation[0].title}} <br />\r\n            <span *ngIf=\"subtitleVisible\" class=\"horizontalMenu__menu__subtitle\"\r\n              >subtitle</span\r\n            >\r\n          </span>\r\n        </a>\r\n      </ng-container>\r\n     \r\n    </li>\r\n  </ul>\r\n</div>"
        },
        {
            "name": "HorizontalMenuStoryComponent",
            "id": "component-HorizontalMenuStoryComponent-19d0eb3e5bc66ab5e80d66c828996a70",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-horizontal-menu",
            "styleUrls": [
                "./horizontal-menu.scss"
            ],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <lla-main-menu\n     [menuList]=\"menuList\"\n     [isDarkMode]=\"isDarkMode\"\n     [logoPath]=\"logoPath\"\n     [logoPosition]=\"logoPosition\"\n     [iconVisible]=\"iconVisible\"\n     [titleVisible]=\"titleVisible\"\n     [subtitleVisible]=\"subtitleVisible\"\n   >\n   </lla-main-menu>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "iconVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "logoPath",
                    "defaultValue": "'/vtr/logo/logo-color-dark.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "logoPosition",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "menuList",
                    "defaultValue": "[\r\n    {\r\n      id: 9,\r\n      status: 'published',\r\n      slug: 'internet',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 11,\r\n          main_menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 3,\r\n            domain: 'flow',\r\n            brand: 'flow',\r\n            domain_description: 'Flow',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 3,\r\n          status: 'published',\r\n          title: 'Internet',\r\n          menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/internet',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 13,\r\n          status: 'published',\r\n          slug: 'mega-600',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 6,\r\n              main_menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 11,\r\n              status: 'published',\r\n              title: 'Mega 600',\r\n              menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-600',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 15,\r\n          status: 'published',\r\n          slug: 'mega-500',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 8,\r\n              main_menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 15,\r\n              status: 'published',\r\n              title: 'Mega 500',\r\n              menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-500',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 11,\r\n      status: 'published',\r\n      slug: 'packs',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 4,\r\n          main_menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 7,\r\n          status: 'published',\r\n          title: 'Packs',\r\n          menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/packs',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 12,\r\n          status: 'published',\r\n          slug: 'triple-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 5,\r\n              main_menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 9,\r\n              status: 'published',\r\n              title: 'Triple Pack',\r\n              menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/triple-pack',\r\n              new_tab: ['true'],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 14,\r\n          status: 'published',\r\n          slug: 'double-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 7,\r\n              main_menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 13,\r\n              status: 'published',\r\n              title: 'Double Pack',\r\n              menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/double-pack',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 16,\r\n      status: 'published',\r\n      slug: 'television',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 9,\r\n          main_menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 17,\r\n          status: 'published',\r\n          title: 'Television',\r\n          menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/television',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n    {\r\n      id: 17,\r\n      status: 'published',\r\n      slug: 'mobile',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 10,\r\n          main_menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 19,\r\n          status: 'published',\r\n          title: 'Mobile',\r\n          menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/mobile',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "subtitleVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "themeParam",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "titleVisible",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 483
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-horizontal-menu',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <lla-main-menu\r\n      [menuList]=\"menuList\"\r\n      [isDarkMode]=\"isDarkMode\"\r\n      [logoPath]=\"logoPath\"\r\n      [logoPosition]=\"logoPosition\"\r\n      [iconVisible]=\"iconVisible\"\r\n      [titleVisible]=\"titleVisible\"\r\n      [subtitleVisible]=\"subtitleVisible\"\r\n    >\r\n    </lla-main-menu>\r\n  </div>`,\r\n  styleUrls: ['./horizontal-menu.scss'],\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class HorizontalMenuStoryComponent implements OnChanges {\r\n  backgroundColor = '';\r\n  isDarkMode = true;\r\n  logoPosition = 'left';\r\n  logoPath = '/vtr/logo/logo-color-dark.svg';\r\n  themeParam = '';\r\n  iconVisible = false;\r\n  titleVisible = true;\r\n  subtitleVisible = false;\r\n  menuList = [\r\n    {\r\n      id: 9,\r\n      status: 'published',\r\n      slug: 'internet',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 11,\r\n          main_menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 3,\r\n            domain: 'flow',\r\n            brand: 'flow',\r\n            domain_description: 'Flow',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 3,\r\n          status: 'published',\r\n          title: 'Internet',\r\n          menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/internet',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 13,\r\n          status: 'published',\r\n          slug: 'mega-600',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 6,\r\n              main_menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 11,\r\n              status: 'published',\r\n              title: 'Mega 600',\r\n              menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-600',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 15,\r\n          status: 'published',\r\n          slug: 'mega-500',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 8,\r\n              main_menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 15,\r\n              status: 'published',\r\n              title: 'Mega 500',\r\n              menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-500',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 11,\r\n      status: 'published',\r\n      slug: 'packs',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 4,\r\n          main_menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 7,\r\n          status: 'published',\r\n          title: 'Packs',\r\n          menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/packs',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 12,\r\n          status: 'published',\r\n          slug: 'triple-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 5,\r\n              main_menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 9,\r\n              status: 'published',\r\n              title: 'Triple Pack',\r\n              menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/triple-pack',\r\n              new_tab: ['true'],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 14,\r\n          status: 'published',\r\n          slug: 'double-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 7,\r\n              main_menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 13,\r\n              status: 'published',\r\n              title: 'Double Pack',\r\n              menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/double-pack',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 16,\r\n      status: 'published',\r\n      slug: 'television',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 9,\r\n          main_menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 17,\r\n          status: 'published',\r\n          title: 'Television',\r\n          menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/television',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n    {\r\n      id: 17,\r\n      status: 'published',\r\n      slug: 'mobile',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 10,\r\n          main_menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 19,\r\n          status: 'published',\r\n          title: 'Mobile',\r\n          menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/mobile',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n  ];\r\n\r\n  ngOnChanges() {\r\n    if (this.isDarkMode) {\r\n      this.themeParam = 'dark';\r\n    } else {\r\n      this.themeParam = 'light';\r\n    }\r\n\r\n    this.logoPath = '/vtr/logo/logo-color-' + this.themeParam + '.svg';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./horizontal-menu.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-1c5cd2f3f77e96b7a0eea30849372980",
            "file": "libs/shared/ui-library/src/lib/components/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-horizontal-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./horizontal-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconVisible",
                    "defaultValue": "true",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "menuList",
                    "defaultValue": "[]",
                    "line": 9,
                    "type": "IMainMenuItem[] | "
                },
                {
                    "name": "subtitleVisible",
                    "defaultValue": "true",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "titleVisible",
                    "defaultValue": "true",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClickHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-logo',\r\n  templateUrl: './logo.component.html',\r\n  styleUrls: ['./logo.component.scss'],\r\n})\r\n/**\r\n * Logo Component\r\n */\r\nexport class LogoComponent {\r\n  /**\r\n   * Logo parameters\r\n   */\r\n  @Input() imgPath = '';\r\n  @Input() altTag?: string = 'logo';\r\n  @Output() clickHandler?: EventEmitter<null> = new EventEmitter();\r\n\r\n  onClickHandler() {\r\n    if (this.clickHandler) this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"logo\">\r\n  <img \r\n  (click)=\"onClickHandler()\"\r\n  [src]=\"imgPath\" \r\n  alt=\"altTag\" />\r\n</div>"
        },
        {
            "name": "HorizontalMenuStoryComponent",
            "id": "component-HorizontalMenuStoryComponent-e2196e5ba479fb04f7bd2939aaa5a8ba",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-horizontal-menu",
            "styleUrls": [],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <lla-main-menu\n     [menuList]=\"menuList\"\n     [isDarkMode]=\"isDarkMode\"\n     [logoPath]=\"logoPath\"\n     [logoPosition]=\"logoPosition\"\n     [iconVisible]=\"iconVisible\"\n     [titleVisible]=\"titleVisible\"\n     [subtitleVisible]=\"subtitleVisible\"\n   >\n   </lla-main-menu>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "iconVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "logoPath",
                    "defaultValue": "'/vtr/logo/logo-color-dark.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "logoPosition",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "menuList",
                    "defaultValue": "[\r\n    {\r\n      id: 9,\r\n      status: 'published',\r\n      slug: 'internet',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 11,\r\n          main_menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 3,\r\n            domain: 'flow',\r\n            brand: 'flow',\r\n            domain_description: 'Flow',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 3,\r\n          status: 'published',\r\n          title: 'Internet',\r\n          menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/internet',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 13,\r\n          status: 'published',\r\n          slug: 'mega-600',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 6,\r\n              main_menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 11,\r\n              status: 'published',\r\n              title: 'Mega 600',\r\n              menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-600',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 15,\r\n          status: 'published',\r\n          slug: 'mega-500',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 8,\r\n              main_menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 15,\r\n              status: 'published',\r\n              title: 'Mega 500',\r\n              menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-500',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 11,\r\n      status: 'published',\r\n      slug: 'packs',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 4,\r\n          main_menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 7,\r\n          status: 'published',\r\n          title: 'Packs',\r\n          menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/packs',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 12,\r\n          status: 'published',\r\n          slug: 'triple-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 5,\r\n              main_menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 9,\r\n              status: 'published',\r\n              title: 'Triple Pack',\r\n              menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/triple-pack',\r\n              new_tab: ['true'],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 14,\r\n          status: 'published',\r\n          slug: 'double-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 7,\r\n              main_menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 13,\r\n              status: 'published',\r\n              title: 'Double Pack',\r\n              menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/double-pack',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 16,\r\n      status: 'published',\r\n      slug: 'television',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 9,\r\n          main_menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 17,\r\n          status: 'published',\r\n          title: 'Television',\r\n          menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/television',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n    {\r\n      id: 17,\r\n      status: 'published',\r\n      slug: 'mobile',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 10,\r\n          main_menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 19,\r\n          status: 'published',\r\n          title: 'Mobile',\r\n          menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/mobile',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "subtitleVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "themeParam",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "titleVisible",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 482
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-horizontal-menu',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <lla-main-menu\r\n      [menuList]=\"menuList\"\r\n      [isDarkMode]=\"isDarkMode\"\r\n      [logoPath]=\"logoPath\"\r\n      [logoPosition]=\"logoPosition\"\r\n      [iconVisible]=\"iconVisible\"\r\n      [titleVisible]=\"titleVisible\"\r\n      [subtitleVisible]=\"subtitleVisible\"\r\n    >\r\n    </lla-main-menu>\r\n  </div>`,\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class HorizontalMenuStoryComponent implements OnChanges {\r\n  backgroundColor = '';\r\n  isDarkMode = true;\r\n  logoPosition = 'left';\r\n  logoPath = '/vtr/logo/logo-color-dark.svg';\r\n  themeParam = '';\r\n  iconVisible = false;\r\n  titleVisible = true;\r\n  subtitleVisible = false;\r\n  menuList = [\r\n    {\r\n      id: 9,\r\n      status: 'published',\r\n      slug: 'internet',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 11,\r\n          main_menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 3,\r\n            domain: 'flow',\r\n            brand: 'flow',\r\n            domain_description: 'Flow',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 3,\r\n          status: 'published',\r\n          title: 'Internet',\r\n          menu_id: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/internet',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 13,\r\n          status: 'published',\r\n          slug: 'mega-600',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 6,\r\n              main_menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 11,\r\n              status: 'published',\r\n              title: 'Mega 600',\r\n              menu_id: {\r\n                id: 13,\r\n                status: 'published',\r\n                slug: 'mega-600',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-600',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 15,\r\n          status: 'published',\r\n          slug: 'mega-500',\r\n          parent: {\r\n            id: 9,\r\n            status: 'published',\r\n            slug: 'internet',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 11,\r\n                main_menu_id: 9,\r\n                domain_id: 3,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 3,\r\n                status: 'published',\r\n                title: 'Internet',\r\n                menu_id: '9',\r\n                language_code: 'en',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 4,\r\n                status: 'published',\r\n                title: 'Internet-es',\r\n                menu_id: '9',\r\n                language_code: 'es',\r\n                url: '/internet',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 8,\r\n              main_menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 15,\r\n              status: 'published',\r\n              title: 'Mega 500',\r\n              menu_id: {\r\n                id: 15,\r\n                status: 'published',\r\n                slug: 'mega-500',\r\n                parent: 9,\r\n              },\r\n              language_code: 'en',\r\n              url: '/internet/mega-500',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 11,\r\n      status: 'published',\r\n      slug: 'packs',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 4,\r\n          main_menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 7,\r\n          status: 'published',\r\n          title: 'Packs',\r\n          menu_id: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/packs',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [\r\n        {\r\n          id: 12,\r\n          status: 'published',\r\n          slug: 'triple-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 5,\r\n              main_menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 9,\r\n              status: 'published',\r\n              title: 'Triple Pack',\r\n              menu_id: {\r\n                id: 12,\r\n                status: 'published',\r\n                slug: 'triple-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/triple-pack',\r\n              new_tab: ['true'],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 14,\r\n          status: 'published',\r\n          slug: 'double-pack',\r\n          parent: {\r\n            id: 11,\r\n            status: 'published',\r\n            slug: 'packs',\r\n            parent: null,\r\n            domain: [\r\n              {\r\n                id: 4,\r\n                main_menu_id: 11,\r\n                domain_id: 4,\r\n              },\r\n            ],\r\n            translation: [\r\n              {\r\n                id: 7,\r\n                status: 'published',\r\n                title: 'Packs',\r\n                menu_id: '11',\r\n                language_code: 'en',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n              {\r\n                id: 8,\r\n                status: 'published',\r\n                title: 'Packs-es',\r\n                menu_id: '11',\r\n                language_code: 'es',\r\n                url: '/packs',\r\n                new_tab: [],\r\n              },\r\n            ],\r\n          },\r\n          domain: [\r\n            {\r\n              id: 7,\r\n              main_menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              domain_id: {\r\n                id: 4,\r\n                domain: 'vtr',\r\n                brand: 'vtr',\r\n                domain_description: 'VTR',\r\n              },\r\n            },\r\n          ],\r\n          translation: [\r\n            {\r\n              id: 13,\r\n              status: 'published',\r\n              title: 'Double Pack',\r\n              menu_id: {\r\n                id: 14,\r\n                status: 'published',\r\n                slug: 'double-pack',\r\n                parent: 11,\r\n              },\r\n              language_code: 'en',\r\n              url: '/packs/double-pack',\r\n              new_tab: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 16,\r\n      status: 'published',\r\n      slug: 'television',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 9,\r\n          main_menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 17,\r\n          status: 'published',\r\n          title: 'Television',\r\n          menu_id: {\r\n            id: 16,\r\n            status: 'published',\r\n            slug: 'television',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/television',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n    {\r\n      id: 17,\r\n      status: 'published',\r\n      slug: 'mobile',\r\n      parent: null,\r\n      domain: [\r\n        {\r\n          id: 10,\r\n          main_menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          domain_id: {\r\n            id: 4,\r\n            domain: 'vtr',\r\n            brand: 'vtr',\r\n            domain_description: 'VTR',\r\n          },\r\n        },\r\n      ],\r\n      translation: [\r\n        {\r\n          id: 19,\r\n          status: 'published',\r\n          title: 'Mobile',\r\n          menu_id: {\r\n            id: 17,\r\n            status: 'published',\r\n            slug: 'mobile',\r\n            parent: null,\r\n          },\r\n          language_code: 'en',\r\n          url: '/mobile',\r\n          new_tab: [],\r\n        },\r\n      ],\r\n      children: [],\r\n    },\r\n  ];\r\n\r\n  ngOnChanges() {\r\n    if (this.isDarkMode) {\r\n      this.themeParam = 'dark';\r\n    } else {\r\n      this.themeParam = 'light';\r\n    }\r\n\r\n    this.logoPath = `/vtr/logo/logo-color-${this.themeParam}.svg`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "IconsComponent",
            "id": "component-IconsComponent-5563e76fba0d9f9344a3ef2b8983148e",
            "file": "apps/storybook-app/src/app/stories/atom/icons/icons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-icons",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "fontColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "fontSize",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "iconClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-icons',\r\n  templateUrl: './icons.component.html',\r\n})\r\n/**\r\n * Icons Component\r\n */\r\nexport class IconsComponent {\r\n  fontSize = '';\r\n  iconClass = '';\r\n  backgroundColor = '';\r\n  fontColor = '';\r\n  label = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div class=\"wrapper-icon\" [ngClass]=\"[fontSize ? fontSize : '']\">\r\n    <span\r\n      [ngClass]=\"[iconClass ? iconClass : '']\"\r\n      [ngStyle]=\"{ color: fontColor }\"\r\n    >\r\n    </span>\r\n    <span\r\n      *ngIf=\"label\"\r\n      class=\"description-icon\"\r\n      [ngStyle]=\"{ color: fontColor }\"\r\n      >Label</span\r\n    >\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "IconsComponent",
            "id": "component-IconsComponent-5563e76fba0d9f9344a3ef2b8983148e-1",
            "file": "libs/shared/ui-library/src/lib/stories/atom/icons/icons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-icons",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "fontColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "fontSize",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "iconClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-icons',\r\n  templateUrl: './icons.component.html',\r\n})\r\n/**\r\n * Icons Component\r\n */\r\nexport class IconsComponent {\r\n  fontSize = '';\r\n  iconClass = '';\r\n  backgroundColor = '';\r\n  fontColor = '';\r\n  label = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IconsComponent-1",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div class=\"wrapper-icon\" [ngClass]=\"[fontSize ? fontSize : '']\">\r\n    <span\r\n      [ngClass]=\"[iconClass ? iconClass : '']\"\r\n      [ngStyle]=\"{ color: fontColor }\"\r\n    >\r\n    </span>\r\n    <span\r\n      *ngIf=\"label\"\r\n      class=\"description-icon\"\r\n      [ngStyle]=\"{ color: fontColor }\"\r\n      >Label</span\r\n    >\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ImgGalleryComponent",
            "id": "component-ImgGalleryComponent-bd0dc87e7ac8976a6ab7f024a0d4dd1e",
            "file": "libs/shared/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-img-gallery",
            "styleUrls": [
                "./img-gallery.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./img-gallery.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imageList",
                    "defaultValue": "[]",
                    "line": 17,
                    "type": "Iimages[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "columnCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "galleryDesignsAvailable",
                    "defaultValue": "[\r\n    [{ cols: 1, rows: 1 }],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 2 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "imgCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "layoutPatternPicked",
                    "defaultValue": "[]",
                    "type": "Imatrix[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "maxImageToBeShown",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getColumnCount",
                    "args": [
                        {
                            "name": "imgCount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>Get the total number of grid columns.\nThe column count for 1 image will be 1.\nThe column count for 2 to 4 image will be 2.\nThe column count for more than 4 image will be 3.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "imgCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLayoutPattern",
                    "args": [
                        {
                            "name": "imageCount",
                            "type": "number",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": " | []",
                    "typeParameters": [],
                    "line": 81,
                    "description": "<p>Based on image count, decide to choose gallery pattern from the list of galleryDesignsAvailable\nPick galleryDesignsAvailable[count-1] if the image size is count.\nPick galleryDesignsAvailable[6] if the image size is more than 6.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "imageCount",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "description": "<p>Initate the image gallery</p>\n"
                },
                {
                    "name": "onClickHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "description": "<p>On click handler for gallery</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\r\n\r\nexport interface Iimages {\r\n  path: string;\r\n  altTag: string;\r\n}\r\nexport interface Imatrix {\r\n  cols: number;\r\n  rows: number;\r\n}\r\n@Component({\r\n  selector: 'lla-img-gallery',\r\n  templateUrl: './img-gallery.component.html',\r\n  styleUrls: ['./img-gallery.component.scss'],\r\n})\r\nexport class ImgGalleryComponent implements OnInit {\r\n  @Input() imageList: Iimages[] = [];\r\n  @Output() clickHandler: EventEmitter<null> = new EventEmitter();\r\n  maxImageToBeShown = 6;\r\n  // Pattern to get the desired layout based on image count\r\n  galleryDesignsAvailable = [\r\n    [{ cols: 1, rows: 1 }],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 2 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 2 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n    [\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n      { cols: 1, rows: 1 },\r\n    ],\r\n  ];\r\n  imgCount = 0;\r\n  layoutPatternPicked: Imatrix[] = [];\r\n  columnCount?: number = 0;\r\n\r\n  /**\r\n   * Initate the image gallery\r\n   */\r\n  ngOnInit(): void {\r\n    this.imgCount = this.imageList.length;\r\n    this.columnCount = this.getColumnCount(this.imgCount);\r\n    this.layoutPatternPicked = this.getLayoutPattern(this.imageList.length);\r\n  }\r\n\r\n  /**\r\n   * Get the total number of grid columns.\r\n   * The column count for 1 image will be 1.\r\n   * The column count for 2 to 4 image will be 2.\r\n   * The column count for more than 4 image will be 3.\r\n   */\r\n  getColumnCount(imgCount: number): number {\r\n    return imgCount >= 5 ? 3 : imgCount == 1 ? 1 : 2;\r\n  }\r\n  /**\r\n   * Based on image count, decide to choose gallery pattern from the list of galleryDesignsAvailable\r\n   * Pick galleryDesignsAvailable[count-1] if the image size is count.\r\n   * Pick galleryDesignsAvailable[6] if the image size is more than 6.\r\n   */\r\n  getLayoutPattern(imageCount: number = 0): [] | Imatrix[] {\r\n    return imageCount === 0\r\n      ? []\r\n      : imageCount > this.maxImageToBeShown\r\n      ? this.galleryDesignsAvailable[5]\r\n      : this.galleryDesignsAvailable[imageCount - 1];\r\n  }\r\n  /**\r\n   * On click handler for gallery\r\n   */\r\n  onClickHandler() {\r\n    this.clickHandler.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-grid-list {\r\n    width: 360px;\r\n    height: 240px;\r\n    position: relative;\r\n    padding-bottom: 0px !important;\r\n}\r\nmat-grid-tile, mat-grid-list {\r\n    background: $white900;\r\n}\r\n.overlapText{\r\n    position: absolute;\r\n    color: $white900;\r\n    font-size: 22px;\r\n    right: 12%;\r\n    top: 70%;\r\n    line-height: 26px;\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./img-gallery.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-grid-list [cols]=\"columnCount\">\r\n    <mat-grid-tile\r\n        *ngFor=\"let matrix of layoutPatternPicked;let i=index\" \r\n        [colspan]=\"matrix.cols\"\r\n        [rowspan]=\"matrix.rows\">\r\n        <img \r\n          [src]=\"imageList[i].path\" \r\n          alt=\"imageList[i].altTag\"/>   \r\n    </mat-grid-tile>\r\n    <span class=\"overlapText\" *ngIf=\"imgCount>6\" (click)=\"onClickHandler()\"> {{ imgCount-6 }} +</span>\r\n</mat-grid-list>\r\n  "
        },
        {
            "name": "MainMenuComponent",
            "id": "component-MainMenuComponent-35947e78035112a3f6fe05e91deff90f",
            "file": "libs/shared/ui-library/src/lib/components/main-menu/main-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-main-menu",
            "styleUrls": [
                "./main-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconVisible",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "logoPath",
                    "defaultValue": "''",
                    "line": 11
                },
                {
                    "name": "logoPosition",
                    "defaultValue": "'left'",
                    "line": 12
                },
                {
                    "name": "menuList",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "iMainMenuItem[] | "
                },
                {
                    "name": "subtitleVisible",
                    "defaultValue": "false",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "titleVisible",
                    "defaultValue": "true",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { iMainMenuItem } from '@lla/shared/util-library';\r\n\r\n@Component({\r\n  selector: 'lla-main-menu',\r\n  templateUrl: './main-menu.component.html',\r\n  styleUrls: ['./main-menu.component.scss'],\r\n})\r\nexport class MainMenuComponent {\r\n  @Input() menuList: iMainMenuItem[] | [] = [];\r\n  @Input() logoPath = '';\r\n  @Input() logoPosition? = 'left';\r\n  @Input() isDarkMode?: boolean = true;\r\n  @Input() iconVisible?: boolean = false;\r\n  @Input() titleVisible?: boolean = true;\r\n  @Input() subtitleVisible?: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-menu.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"horizontalMenu__menu\" [ngClass]=\"{'dark-mode': isDarkMode}\">\r\n  <div\r\n    class=\"horizontalMenu__menu__container\"\r\n    [ngClass]=\"{'reverseFlex':logoPosition=='center'}\"\r\n  >\r\n    <span\r\n      class=\"horizontalMenu__menu__icon icon-placeholder icon-search-outline visible-xs\"\r\n      [ngClass]=\"{'hidden-xs':logoPosition=='left'}\"\r\n    ></span>\r\n    <lla-logo class=\"horizontalMenu__menu__img\" [imgPath]=\"logoPath\"></lla-logo>\r\n    <lla-horizontal-menu\r\n      class=\"horizontalMenu horizontalMenu__menu__list hidden-xs\"\r\n      [iconVisible]=\"iconVisible\"\r\n      [titleVisible]=\"titleVisible\"\r\n      [subtitleVisible]=\"subtitleVisible\"\r\n      [menuList]=\"menuList\"\r\n    ></lla-horizontal-menu>\r\n    <div class=\"horizontalMenu__menu__alignBase hidden-xs\">\r\n      <input\r\n        class=\"horizontalMenu__menu__search\"\r\n        type=\"text\"\r\n        id=\"searchText\"\r\n        maxlength=\"140\"\r\n        placeholder=\"Search\"\r\n      />\r\n    </div>\r\n    <span\r\n      class=\"horizontalMenu__menu__icon icon-placeholder icon-reorder-three-outline visible-xs\"\r\n    ></span>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SearchDropdownComponent",
            "id": "component-SearchDropdownComponent-d12aa20ad3461f56691fd1cc11700a8a",
            "file": "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-search-dropdown",
            "styleUrls": [
                "./search-dropdown.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./search-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "4",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 26,
                    "type": "iSelectOption[]"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 27
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "line": 28,
                    "type": "STATUS"
                }
            ],
            "outputsClass": [
                {
                    "name": "sendData",
                    "defaultValue": "new EventEmitter()",
                    "line": 31,
                    "type": "EventEmitter<iSelectOption>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredOptions$",
                    "type": "Observable<iSelectOption[]>",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "myControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "<p>Inputs for select box option</p>\n",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "options",
                            "type": "iSelectOption[]"
                        },
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "iSelectOption[]",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "iSelectOption[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { iSelectOption } from '../../../interfaces/select-box';\r\n\r\ntype STATUS = 'success' | 'error' | '';\r\n\r\n@Component({\r\n  selector: 'lla-search-dropdown',\r\n  templateUrl: './search-dropdown.component.html',\r\n  styleUrls: ['./search-dropdown.component.css'],\r\n})\r\nexport class SearchDropdownComponent implements OnChanges {\r\n  /**\r\n   * Inputs for select box option\r\n   */\r\n  myControl = new FormControl();\r\n  filteredOptions$?: Observable<iSelectOption[]>;\r\n  @Input() options: iSelectOption[] = [];\r\n  @Input() placeholder? = '';\r\n  @Input() status?: STATUS = '';\r\n  @Input() message?: string = '';\r\n  @Input() isDisabled?: boolean = false;\r\n  @Output() dataSelected?: EventEmitter<iSelectOption> = new EventEmitter();\r\n  ngOnChanges() {\r\n    this.filteredOptions$ = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((label) => this.filter(this.options, label))\r\n    );\r\n  }\r\n\r\n  private filter(options: iSelectOption[], label: string): iSelectOption[] {\r\n    const filterValue = label.toLowerCase();\r\n    const results = options.filter((optionsSelectable) =>\r\n      optionsSelectable.label.toLowerCase().includes(filterValue)\r\n    );\r\n    return results.length\r\n      ? results\r\n      : [\r\n          {\r\n            value: 'No data',\r\n            label: 'No data',\r\n          },\r\n        ];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search-dropdown.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<form class=\"searchDropdown\">\r\n  <mat-form-field class=\"example-full-width\">\r\n    <mat-label class=\"dropdown\">{{placeholder}}</mat-label>\r\n    <input\r\n      type=\"text\"\r\n      aria-label=\"Number\"\r\n      matInput\r\n      [formControl]=\"myControl\"\r\n      [matAutocomplete]=\"auto\"\r\n    />\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option\r\n        *ngFor=\"let option of filteredOptions$ | async\"\r\n        [value]=\"option.label\"\r\n      >\r\n        {{option.label}}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>\r\n\r\n"
        },
        {
            "name": "SelectorsComponent",
            "id": "component-SelectorsComponent-b1c13328bd454284dac7df84d231ad19",
            "file": "libs/shared/ui-library/src/lib/components/selectors/selectors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-selectors",
            "styleUrls": [
                "./selectors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selectors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "isLargeText",
                    "defaultValue": "false",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "ISelectors[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "dataSelected",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<ISelectors>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "columnNum",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "i",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { MatRadioChange } from '@angular/material/radio';\r\nimport { ISelectors } from '@lla/shared/util-library';\r\n\r\n@Component({\r\n  selector: 'lla-selectors',\r\n  templateUrl: './selectors.component.html',\r\n  styleUrls: ['./selectors.component.scss'],\r\n})\r\nexport class SelectorsComponent {\r\n  @Input() options: ISelectors[] = [];\r\n  @Input() isdisabled?: boolean = false;\r\n  @Input() isDarkMode?: boolean = false;\r\n  @Input() isLargeText?: boolean = false;\r\n  @Output() dataSelected: EventEmitter<ISelectors> = new EventEmitter();\r\n  columnNum = 3;\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n          this.columnNum =\r\n            result.breakpoints[Breakpoints.Small] ||\r\n            result.breakpoints[Breakpoints.XSmall]\r\n              ? 1\r\n              : 3;\r\n        }\r\n      });\r\n  }\r\n  handleChanges(event: MatRadioChange): void {\r\n    const data = this.options.find((item) => item.id === event.value);\r\n    this.dataSelected.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./selectors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "description": "<p>Automatic switching to next input code</p>\n",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\ntype COMPENETSTATUS = 'SUCCESS' | 'ERROR' | 'DEFAULT';\r\ntype COMPENETTYPE = 'FILLIN' | 'OUTLINE';\r\n\r\n@Component({\r\n  selector: 'lla-input-code',\r\n  templateUrl: './input-code.component.html',\r\n})\r\n\r\n/**\r\n * InputCodeComponent\r\n */\r\nexport class InputCodeComponent {\r\n  @Input() count?: number = 4;\r\n  @Input() types: COMPENETTYPE = 'FILLIN';\r\n  @Input() status: COMPENETSTATUS = 'DEFAULT';\r\n  @Input() isDisabled?: boolean = false;\r\n  @Input() isReadOnly?: boolean = false;\r\n  @Output() sendData: EventEmitter<string[]> = new EventEmitter();\r\n  userEnteredValue: string[] = [];\r\n  Arr = Array;\r\n  /**\r\n   * Input InputCodeComponent\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n  /**\r\n   * Converting text input to password input\r\n   */\r\n  onInputEntered(event: KeyboardEvent, i: number) {\r\n    this.userEnteredValue[i] = (event.target as HTMLInputElement).value;\r\n    if (this.isUserErasing(event)) {\r\n      const inputElement = document.getElementById('mat-input-' + i.toString());\r\n      if (inputElement != null) inputElement.setAttribute('type', 'text');\r\n    } else if (this.isUserEntersData(event)) {\r\n      // Coverting text type to password type after 300sec. Delay has been implemented for animation purpose.\r\n      setTimeout(() => {\r\n        const inputElement = document.getElementById(\r\n          'mat-input-' + i.toString()\r\n        );\r\n        if (inputElement != null) inputElement.setAttribute('type', 'password');\r\n      }, 300);\r\n      this.switchToNextTab(i);\r\n    }\r\n    this.updateParent(this.userEnteredValue);\r\n  }\r\n  /**\r\n   * Check if user is deleting the pre-entered data\r\n   */\r\n  isUserErasing(event: KeyboardEvent): boolean {\r\n    return event.code == 'Backspace' || event.code == 'Delete' ? true : false;\r\n  }\r\n  /**\r\n   * Check if user enters a Numeric or Alpha character\r\n   */\r\n  isUserEntersData(event: KeyboardEvent): boolean {\r\n    return event.code.slice(0, 5) == 'Digit' || event.code.slice(0, 3) == 'Key'\r\n      ? true\r\n      : false;\r\n  }\r\n  /**\r\n   * Automatic switching to next input code\r\n   */\r\n  switchToNextTab(i: number): void {\r\n    const j = i + 1;\r\n    if (this.count != null && j < this.count) {\r\n      const inputElement = document.getElementById('mat-input-' + j.toString());\r\n      if (inputElement != null) inputElement.focus();\r\n    }\r\n  }\r\n  /**\r\n   * Emitting data to parent component\r\n   */\r\n  updateParent(userEnteredValue: string[]): void {\r\n    if (this.count != null && userEnteredValue.length >= this.count) {\r\n      this.sendData.emit(userEnteredValue);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Input InputCodeComponent</p>\n",
                "args": [],
                "line": 22
            },
            "templateData": "<mat-grid-list [cols]=\"columnNum\" rowHeight=\"1:2\" class=\"selector\">\r\n  <mat-grid-tile>\r\n    <div [ngClass]=\"{ primaryradiobutton: true, 'darkmode': isDarkMode }\">\r\n      <mat-radio-group>\r\n        <ng-container *ngFor=\"let option of options\">\r\n          <mat-radio-button\r\n            [disabled]=\"isdisabled\"\r\n            [ngClass]=\"{ selector__container: true, 'largecontent': isLargeText }\"\r\n            [value]=\"option.id\"\r\n            (change)=\"handleChanges($event)\"\r\n          >\r\n            <div class=\"selector__container__content\">\r\n              <h4>{{option.content.heading}}</h4>\r\n              <p>{{option.content.body}}</p>\r\n              <span *ngIf=\"option.content.icon\" class=\"icon-placeholder\" [ngClass]=\"option.content.icon\">\r\n              </span>\r\n            </div>\r\n          </mat-radio-button>\r\n        </ng-container>\r\n      </mat-radio-group>\r\n    </div>\r\n  </mat-grid-tile>\r\n</mat-grid-list>\r\n"
        },
       
        {
            "name": "InputsComponent",
            "id": "component-InputsComponent-351ab0b5e66107ef49314c2171eca228-1",
            "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-inputs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./inputs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "affixTypes",
                    "defaultValue": "'$'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "iconType",
                    "defaultValue": "'iconcopy'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "styles",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "TextColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "types",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "description": ""
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-inputs',\r\n  templateUrl: './inputs.component.html',\r\n})\r\n/**\r\n * Input component\r\n */\r\nexport class InputsComponent implements OnInit {\r\n  /**\r\n   * Input component\r\n   */\r\n  constructor() {\r\n    // Empty constructor\r\n  }\r\n\r\n  active = [];\r\n  getTheme = 'VTR';\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  status = '';\r\n  size = '';\r\n  styles = '';\r\n  types = '';\r\n  hide = true;\r\n  isdisabled = false;\r\n  iconType = 'iconcopy';\r\n  affixTypes = '$';\r\n\r\n  /**\r\n   *\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Input component</p>\n",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "InputsComponent-1",
            "templateData": "<article\r\n  class=\"template-fluid\"\r\n  [ngStyle]=\"{\r\n    'background-color': backgroundColor,\r\n    color: TextColor\r\n  }\"\r\n>\r\n  <div *ngIf=\"types != 'inputWithCode'\">\r\n    <p\r\n      [ngClass]=\"[status ? status : '', size ? size : '', styles ? styles : '']\"\r\n    >\r\n      <label class=\"inputLabel\"\r\n        ><strong>Label {{ status == 'required' ? '*' : '' }} </strong></label\r\n      ><br />\r\n      <mat-form-field appearance=\"standard\">\r\n        <div *ngIf=\"types == 'inputWithPassword'\">\r\n          <div class=\"icon-holder\">\r\n            <span class=\"icon-lock icon-placeholder\"></span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"symbols\" *ngIf=\"types == 'Price'\">\r\n          <span class=\"icon-placeholder\" *ngIf=\"position == 'prefix'\">{{\r\n            affixTypes\r\n          }}</span>\r\n        </div>\r\n\r\n        <div *ngIf=\"types == 'inputWithPassword'\">\r\n          <input\r\n            matInput\r\n            [type]=\"hide ? 'password' : 'text'\"\r\n            [disabled]=\"status == 'disabled' ? true : false\"\r\n            [readonly]=\"status == 'readOnly' ? true : false\"\r\n            placeholder=\"Placeholder\"\r\n            class=\"inputBox\"\r\n            maxlength=\"size == 'large'? 24 : 18\"\r\n          />\r\n        </div>\r\n        <div *ngIf=\"types == 'inputWithPassword'\">\r\n          <div\r\n            class=\"icon-holder\"\r\n            (click)=\"hide = !hide\"\r\n            [attr.aria-label]=\"'Hide password'\"\r\n            [attr.aria-pressed]=\"hide\"\r\n          >\r\n            <span\r\n              class=\"display-icon icon-placeholder\"\r\n              [ngClass]=\"hide ? 'icon-eye-outline' : 'icon-eye-off-outline'\"\r\n              [ngStyle]=\"{ 'font-size': '30px' }\"\r\n            ></span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          *ngIf=\"types != 'inputWithTextarea' && types != 'inputWithPassword'\"\r\n        >\r\n          <input\r\n            matInput\r\n            *ngIf=\"types == 'defaultInputs'\"\r\n            [disabled]=\"status == 'disabled' ? true : false\"\r\n            [readonly]=\"status == 'readOnly' ? true : false\"\r\n            placeholder=\"Placeholder\"\r\n            class=\"inputBox\"\r\n            maxlength=\"size == 'large'? 24 : 18\"\r\n          />\r\n          <div *ngIf=\"types == 'Price'\" class=\"no-spinner\">\r\n            <input\r\n              matInput\r\n              *ngIf=\"types == 'Price'\"\r\n              type=\"number\"\r\n              [disabled]=\"status == 'disabled' ? true : false\"\r\n              [readonly]=\"status == 'readOnly' ? true : false\"\r\n              placeholder=\"Placeholder\"\r\n              class=\"inputBox\"\r\n              maxlength=\"size == 'large'? 24 : 18\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"types == 'inputWithTextarea'\">\r\n          <textarea\r\n            matInput\r\n            class=\"inputTextArea\"\r\n            placeholder=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply.\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <mat-hint\r\n          *ngIf=\"\r\n            status == 'default' ||\r\n            status == 'active' ||\r\n            status == 'disabled' ||\r\n            status == 'readOnly'\r\n          \"\r\n          >Assistive Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'success'\" class=\"toaster success-background\"\r\n          >Success Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'error'\" class=\"toaster error-background\"\r\n          >Error Text</mat-hint\r\n        >\r\n        <mat-hint *ngIf=\"status == 'required'\">Required*</mat-hint>\r\n\r\n        <div class=\"icon-holder\" *ngIf=\"types == 'defaultInputs'\">\r\n          <span\r\n            class=\"icon-placeholder\"\r\n            [ngClass]=\"[iconType ? iconType : '']\"\r\n          ></span>\r\n        </div>\r\n\r\n        <div class=\"symbols\" *ngIf=\"types == 'Price'\">\r\n          <span class=\"icon-placeholder\" *ngIf=\"position == 'suffix'\">{{\r\n            affixTypes\r\n          }}</span>\r\n        </div>\r\n      </mat-form-field>\r\n    </p>\r\n  </div>\r\n\r\n  <div *ngIf=\"types == 'inputWithCode'\">\r\n    <div\r\n      class=\"inputCode\"\r\n      [ngClass]=\"[status ? status : '', size ? size : '', styles ? styles : '']\"\r\n    >\r\n      <label class=\"inputLabel\"\r\n        ><strong>Label {{ status == 'required' ? '*' : '' }} </strong></label\r\n      ><br />\r\n      <div class=\"inputCodeBox\">\r\n        <div\r\n          class=\"mat-form-field-infix\"\r\n          *ngFor=\"let item of [].constructor(count); let i = index\"\r\n        >\r\n          <input\r\n            (keyup)=\"onInputEntry($event, i)\"\r\n            class=\"inputcode\"\r\n            [ngClass]=\"styles ? styles : ''\"\r\n            matInput\r\n            [type]=\"active[i] && active[i] == 'true' ? 'password' : 'text'\"\r\n            maxlength=\"1\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <mat-hint\r\n        *ngIf=\"\r\n          status == 'default' ||\r\n          status == 'active' ||\r\n          status == 'disabled' ||\r\n          status == 'readOnly'\r\n        \"\r\n        >Assistive Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'success'\" class=\"toaster success-background\"\r\n        >Success Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'error'\" class=\"toaster error-background\"\r\n        >Error Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'required'\">Required*</mat-hint>\r\n    </div>\r\n  </div>\r\n</article>\r\n"
        },
        {
            "name": "LabelsComponent",
            "id": "component-LabelsComponent-392f2fe7ce40d759d2d0dda0b42b2325",
            "file": "libs/shared/ui-library/src/lib/components/labels/labels.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-labels",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./labels.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "defaultValue": "''",
                    "line": 8
                },
                {
                    "name": "type",
                    "defaultValue": "'product'",
                    "line": 9,
                    "type": "COMPONENT_TYPE"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\ntype COMPONENT_TYPE = 'product' | 'discount' | 'featured';\r\n@Component({\r\n  selector: 'lla-labels',\r\n  templateUrl: './labels.component.html',\r\n})\r\nexport class LabelsComponent {\r\n  @Input() content = '';\r\n  @Input() type: COMPONENT_TYPE = 'product';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"labels\" [ngClass]=\"type\">\r\n    <p>{{content}}</p>\r\n</div>\r\n"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-4018cab0b1e7c735f941e48cad41fb62",
            "file": "apps/storybook-app/src/app/stories/atom/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "horizontal",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "list",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-list',\r\n  templateUrl: './list.component.html',\r\n})\r\n\r\nexport class ListComponent {\r\n  list = 0;\r\n  backgroundColor = '';\r\n  icon = false;\r\n  horizontal = false;\r\n  Arr = Array;\r\n  isDarkMode = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div [ngClass]=\"[isDarkMode ? 'vtr-list-dark' : 'vtr-list-light']\">\r\n    <mat-list>\r\n      <div class=\"list-title\">Title List</div>\r\n      <div [ngClass]=\"horizontal ? 'list-items' : ''\">\r\n        <mat-list-item\r\n          class=\"list\"\r\n          *ngFor=\"let item of Arr(list); let i = index\"\r\n          ><div *ngIf=\"icon\" class=\"list-icons icon-folder\"></div>\r\n          <div>List item {{ i + 1 }}</div></mat-list-item\r\n        >\r\n      </div>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "StorydropdownComponent",
            "id": "component-StorydropdownComponent-52fedd03312ee9081c858e6a39a160ef",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-dropdown",
            "styleUrls": [
                "./dropdown.scss"
            ],
            "styles": [],
            "template": "<div [ngStyle]=\"{ 'background-color': backgroundColor }\">   <lla-select-dropdown\n     *ngIf=\"isDropdown\"\n     [options]=\"options\"\n     [label]=\"label\"\n     [status]=\"status\"\n     [message]=\"message\"\n     [isDisabled]=\"isDisabled\"\n   ></lla-select-dropdown>\n   <lla-search-dropdown\n     *ngIf=\"searchDropdown\"\n     [placeholder]=\"placeholder\"\n     [status]=\"status\"\n     [message]=\"message\"\n     [isDisabled]=\"isDisabled\"\n     [options]=\"options\"\n   ></lla-search-dropdown>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "currentValue",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isDisabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "labelForOptions",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "options",
                    "defaultValue": "[\r\n    { value: 'Television + Telefion', label: 'Television + Telefion' },\r\n    { value: 'Internet + Television', label: 'Internet + Television' },\r\n    { value: 'Television + Telefion', label: 'Television + Telefion' },\r\n  ]",
                    "type": "iSelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "updatedValue",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges } from '@angular/core';\r\nimport { iSelectOption } from '../../../interfaces/select-box';\r\n@Component({\r\n  selector: 'storybook-dropdown',\r\n  template: ` <div [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    <lla-select-dropdown\r\n      *ngIf=\"isDropdown\"\r\n      [options]=\"options\"\r\n      [label]=\"label\"\r\n      [status]=\"status\"\r\n      [message]=\"message\"\r\n      [isDisabled]=\"isDisabled\"\r\n    ></lla-select-dropdown>\r\n    <lla-search-dropdown\r\n      *ngIf=\"searchDropdown\"\r\n      [placeholder]=\"placeholder\"\r\n      [status]=\"status\"\r\n      [message]=\"message\"\r\n      [isDisabled]=\"isDisabled\"\r\n      [options]=\"options\"\r\n    ></lla-search-dropdown>\r\n  </div>`,\r\n  styleUrls: ['./dropdown.scss'],\r\n})\r\nexport default class StorydropdownComponent implements OnChanges {\r\n  backgroundColor: string;\r\n  options: iSelectOption[] = [\r\n    { value: 'Television + Telefion', label: 'Television + Telefion' },\r\n    { value: 'Internet + Television', label: 'Internet + Television' },\r\n    { value: 'Television + Telefion', label: 'Television + Telefion' },\r\n  ];\r\n  placeholder: string;\r\n  status: string;\r\n  message: string;\r\n  isDisabled: boolean;\r\n  currentValue = 3;\r\n  updatedValue = 3;\r\n  labelForOptions: string;\r\n\r\n  ngOnChanges() {\r\n    if (this.updatedValue > this.currentValue) {\r\n      for (let i = this.currentValue; i < this.updatedValue; ) {\r\n        this.options.push({\r\n          value: 'value' + ++i,\r\n          label: this.labelForOptions,\r\n        });\r\n      }\r\n    } else if (this.updatedValue < this.currentValue) {\r\n      for (let i = this.updatedValue; i < this.currentValue; i++) {\r\n        this.options.pop();\r\n      }\r\n    }\r\n    this.currentValue = this.updatedValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "StoryImgGalleryComponent",
            "id": "component-StoryImgGalleryComponent-2d90549afbaea38f3bd0afdc05b632ee",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "backgroundColor",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "horizontal",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "icon",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "list",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-list',\r\n  templateUrl: './list.component.html',\r\n})\r\n/**\r\n * List Component\r\n */\r\nexport class ListComponent {\r\n  list;\r\n  backgroundColor;\r\n  icon = false;\r\n  horizontal = false;\r\n  Arr = Array;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ListComponent-1",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div [ngClass]=\"[isDarkMode ? 'vtr-list-dark' : 'vtr-list-light']\">\r\n    <mat-list>\r\n      <div class=\"list-title\">Title List</div>\r\n      <div [ngClass]=\"horizontal ? 'list-items' : ''\">\r\n        <mat-list-item\r\n          class=\"list\"\r\n          *ngFor=\"let item of Arr(list); let i = index\"\r\n          ><div *ngIf=\"icon\" class=\"list-icons icon-folder\"></div>\r\n          <div>List item {{ i + 1 }}</div></mat-list-item\r\n        >\r\n      </div>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "StoryinputCodeComponent",
            "id": "component-StoryinputCodeComponent-4e6a6164f41d7e25c2fad9bec099f7f6",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-logo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 27,
                    "type": "iSelectOption[]"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 28
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "line": 29,
                    "type": "STATUS"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOption",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<iSelectOption>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredOptions$",
                    "type": "Observable<iSelectOption[]>",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "myControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "textLimit",
                    "defaultValue": "40",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Inputs for select box option</p>\n",
                    "line": 24
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "options",
                            "type": "iSelectOption[]"
                        },
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "iSelectOption[]",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "iSelectOption[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "description": "<p>To get the current theme from storybook</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-inputCode',\r\n  template: `<article\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{\r\n      'background-color': backgroundColor,\r\n      color: TextColor\r\n    }\"\r\n  >\r\n    <div\r\n      class=\"inputCode\"\r\n      [ngClass]=\"[\r\n        status ? (status | lowercase) : '',\r\n        types ? (types | lowercase) : '',\r\n        isDisabled ? 'disabled' : '',\r\n        isReadOnly ? 'readOnly' : ''\r\n      ]\"\r\n    >\r\n      <label id=\"test\" class=\"inputLabel\"\r\n        ><strong>Label {{ status == 'REQUIRED' ? '*' : '' }} </strong></label\r\n      ><br />\r\n    </div>\r\n    <lla-input-code\r\n      (sendData)=\"getData($event)\"\r\n      [isDisabled]=\"isDisabled\"\r\n      [isReadOnly]=\"isReadOnly\"\r\n      [status]=\"status\"\r\n      [count]=\"count\"\r\n      [types]=\"types\"\r\n    ></lla-input-code>\r\n    <div\r\n      class=\"inputCode\"\r\n      [ngClass]=\"[\r\n        status ? (status | lowercase) : '',\r\n        types ? (types | lowercase) : '',\r\n        isDisabled ? 'disabled' : '',\r\n        isReadOnly ? 'readOnly' : ''\r\n      ]\"\r\n    >\r\n      <mat-hint *ngIf=\"status == 'DEFAULT' || isDisabled || isReadOnly\"\r\n        >Assistive Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'SUCCESS'\" class=\"toaster success-background\"\r\n        >Success Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'ERROR'\" class=\"toaster error-background\"\r\n        >Error Text</mat-hint\r\n      >\r\n      <mat-hint *ngIf=\"status == 'REQUIRED'\">Required*</mat-hint>\r\n    </div>\r\n  </article>`,\r\n  styleUrls: ['./inputCode.scss'],\r\n})\r\n/**\r\n * StoryinputCodeComponent\r\n */\r\nexport default class StoryinputCodeComponent implements OnInit {\r\n  getTheme = 'VTR';\r\n  backgroundColor = '';\r\n  TextColor = '';\r\n  status = 'default';\r\n  isdisabled = false;\r\n  Arr = Array;\r\n  data = '';\r\n  isDisabled;\r\n  isReadOnly;\r\n  count;\r\n  types;\r\n  /**\r\n   * To get data from child component(Input Code component)\r\n   */\r\n  getData(data) {\r\n    this.data = data;\r\n  }\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"logo\">\r\n  <img \r\n  (click)=\"onClickHandler()\"\r\n  [src]=\"imgPath\" \r\n  alt=\"altTag\" />\r\n</div>"
        },
        {
            "name": "SelectorsComponent",
            "id": "component-SelectorsComponent-b90451c77f5e40b74dfae02963536381",
            "file": "libs/shared/ui-library/src/lib/components/selectors/selectors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-main-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconVisible",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 25,
                    "type": "ISelectors[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "dataSelected",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter<ISelectors>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "columnSize",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "getDeviceBreakpoint",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "handleChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatRadioChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatRadioChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSmallDevice",
                    "args": [
                        {
                            "name": "breakpointState",
                            "type": "BreakpointState"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "breakpointState",
                            "type": "BreakpointState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subtitleVisible",
                    "defaultValue": "false",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "titleVisible",
                    "defaultValue": "true",
                    "line": 14,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  ValueProvider,\r\n} from '@angular/core';\r\nimport {\r\n  BreakpointObserver,\r\n  Breakpoints,\r\n  BreakpointState,\r\n} from '@angular/cdk/layout';\r\nimport { MatRadioChange } from '@angular/material/radio';\r\n\r\nimport { ISelectors } from '@lla/shared/util-library';\r\n\r\n@Component({\r\n  selector: 'lla-selectors',\r\n  templateUrl: './selectors.component.html',\r\n  styleUrls: ['./selectors.component.scss'],\r\n})\r\nexport class SelectorsComponent implements OnChanges, OnInit {\r\n  @Input() options: ISelectors[] = [];\r\n  @Input() isdisabled?: boolean = false;\r\n  @Input() isDarkMode?: boolean = false;\r\n  @Input() isLargeText?: boolean = false;\r\n  @Output() dataSelected: EventEmitter<ISelectors> = new EventEmitter();\r\n  columnSize = 0;\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver) {}\r\n\r\n  ngOnChanges() {\r\n    this.getDeviceBreakpoint();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getDeviceBreakpoint();\r\n  }\r\n\r\n  getDeviceBreakpoint(): void {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      /* \r\n      The columnsze will be 1 if, it is a small device\r\n      The columnsze will be 1 if, it is a large device\r\n      */\r\n      .subscribe((breakpointState: BreakpointState) => {\r\n        this.columnSize = this.isSmallDevice(breakpointState) ? 1 : 3;\r\n      });\r\n  }\r\n  isSmallDevice(breakpointState: BreakpointState): boolean {\r\n    if (breakpointState.matches) {\r\n      return (\r\n        breakpointState.breakpoints[Breakpoints.Small] ||\r\n        breakpointState.breakpoints[Breakpoints.XSmall]\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleChanges(event: MatRadioChange): void {\r\n    const data = this.options.find((item) => item.id === event.value);\r\n    this.dataSelected.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"horizontalMenu__menu\" [ngClass]=\"{'dark-mode': isDarkMode}\">\r\n  <div\r\n    class=\"horizontalMenu__menu__container\"\r\n    [ngClass]=\"{'reverseFlex':logoPosition=='center'}\"\r\n  >\r\n    <span\r\n      class=\"horizontalMenu__menu__icon icon-placeholder icon-search-outline visible-xs\"\r\n      [ngClass]=\"{'hidden-xs':logoPosition=='left'}\"\r\n    ></span>\r\n    <lla-logo class=\"horizontalMenu__menu__img\" [imgPath]=\"logoPath\"></lla-logo>\r\n    <lla-horizontal-menu\r\n      class=\"horizontalMenu horizontalMenu__menu__list hidden-xs\"\r\n      [iconVisible]=\"iconVisible\"\r\n      [titleVisible]=\"titleVisible\"\r\n      [subtitleVisible]=\"subtitleVisible\"\r\n      [menuList]=\"menuList\"\r\n    ></lla-horizontal-menu>\r\n    <div class=\"horizontalMenu__menu__alignBase hidden-xs\">\r\n      <input\r\n        class=\"horizontalMenu__menu__search\"\r\n        type=\"text\"\r\n        id=\"searchText\"\r\n        maxlength=\"140\"\r\n        placeholder=\"Search\"\r\n      />\r\n    </div>\r\n    <span\r\n      class=\"horizontalMenu__menu__icon icon-placeholder icon-reorder-three-outline visible-xs\"\r\n    ></span>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "StoryLogoComponent",
            "id": "component-StoryLogoComponent-9ca1445d7eebd8344b8313e140d8aa21",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-main-menu",
            "styleUrls": [
                "./main-menu.component.scss"
            ],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngClass]=\"{ 'dark-mode': isDarkMode }\"\n >\n   <div>\n     <lla-logo [altTag]=\"altContent\" [imgPath]=\"imgPath\"></lla-logo>\n   </div>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altContent",
                    "defaultValue": "'logo'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "colorParam",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fill",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "imgPath",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "path",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sizeParam",
                    "defaultValue": "'lg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "themeParam",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "eventHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "description": "<p>StoryLogoComponent</p>\n"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-logo',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngClass]=\"{ 'dark-mode': isDarkMode }\"\r\n  >\r\n    <div>\r\n      <lla-logo [altTag]=\"altContent\" [imgPath]=\"imgPath\"></lla-logo>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./logo.scss'],\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class StoryLogoComponent implements OnChanges {\r\n  isDarkMode = true;\r\n  path = '';\r\n  altContent = 'logo';\r\n  imgPath = '';\r\n  size = '';\r\n  fill = '';\r\n  themeParam = '';\r\n  colorParam = '';\r\n  sizeParam = 'lg';\r\n\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnChanges() {\r\n    this.themeParam = this.isDarkMode ? 'dark' : 'light';\r\n    this.sizeParam = this.size == 'small' ? 'sm' : 'lg';\r\n    this.colorParam = this.fill == 'Color' ? 'color' : 'bw';\r\n\r\n    this.imgPath =\r\n      '/vtr/logo/logo-' +\r\n      this.colorParam +\r\n      '-' +\r\n      this.sizeParam +\r\n      '-' +\r\n      this.themeParam +\r\n      '.svg';\r\n  }\r\n\r\n  eventHandler(): void {\r\n    window.location.reload();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-menu.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "StoryLogoPageComponent",
            "id": "component-StoryLogoPageComponent-1e7a894a9c735937c64ff1eac5b2407c",
            "file": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closeButton",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "flowDesktopLogo",
                    "defaultValue": "'/flow/logo/logo-desktop.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "flowMobileLogo",
                    "defaultValue": "'/flow/logo/logo-mobile.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "iconOntop",
                    "defaultValue": "false",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "link",
                    "defaultValue": "'http://google.com'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "logoDesktopPath",
                    "defaultValue": "this.vtrDesktopLogo",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "logoMobilePath",
                    "defaultValue": "this.vtrMobileLogo",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "secondaryButtontext",
                    "defaultValue": "''",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "vtrDesktopLogo",
                    "defaultValue": "'/vtr/logo/logo-desktop.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "vtrMobileLogo",
                    "defaultValue": "'/vtr/logo/logo-mobile.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-logo-page2',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <div style=\"display: flex;\">\r\n      <a class=\"hidden-xs hidden-sm\" [href]=\"url\">\r\n        <lla-logo\r\n          (clickHandler)=\"eventHandler($event)\"\r\n          [altTag]=\"altContent\"\r\n          [imgPath]=\"logoDesktopPath\"\r\n        ></lla-logo>\r\n      </a>\r\n      <a class=\"visible-sm visible-xs hidden-md\" [href]=\"url\">\r\n        <lla-logo\r\n          (clickHandler)=\"eventHandler($event)\"\r\n          [altTag]=\"altContent\"\r\n          [imgPath]=\"logoMobilePath\"\r\n        ></lla-logo>\r\n      </a>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./logoPage.scss'],\r\n})\r\n/**\r\n * StoryLogoPageComponent\r\n */\r\nexport default class StoryLogoPageComponent implements OnInit {\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  url = '';\r\n  altContent = 'logo';\r\n  link = 'http://google.com';\r\n\r\n  vtrDesktopLogo = '/vtr/logo/logo-desktop.svg';\r\n  vtrMobileLogo = '/vtr/logo/logo-mobile.svg';\r\n  flowDesktopLogo = '/flow/logo/logo-desktop.svg';\r\n  flowMobileLogo = '/flow/logo/logo-mobile.svg';\r\n\r\n  logoDesktopPath = this.vtrDesktopLogo;\r\n  logoMobilePath = this.vtrMobileLogo;\r\n\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n      if (this.getTheme == 'Flow') {\r\n        this.logoDesktopPath = this.flowDesktopLogo;\r\n        this.logoMobilePath = this.flowMobileLogo;\r\n      }\r\n      if (this.getTheme == 'VTR') {\r\n        this.logoDesktopPath = this.vtrDesktopLogo;\r\n        this.logoMobilePath = this.vtrMobileLogo;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Value emitted from child component\r\n   */\r\n  eventHandler(): void {\r\n    this.url = this.link;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button mat-raised-button class=\"button--primary btn-small\" (click)=\"openDialog()\">Open dialog</button>"
        },
        {
            "name": "StorySelectorComponent",
            "id": "component-StorySelectorComponent-012136bbc723ed0efe4a7cbd25436bb8",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-product-catalogue",
            "styleUrls": [],
            "styles": [],
            "template": "<div [ngStyle]=\"{ 'background-color': backgroundColor }\">   <div [ngClass]=\"[body ? '' : 'hideBody', icon ? '' : 'hideIcon']\">\n     <lla-selectors\n       [options]=\"options\"\n       [isdisabled]=\"isdisabled\"\n       [isDarkMode]=\"isDarkMode\"\n       [isLargeText]=\"isLargeText\"\n     ></lla-selectors>\n   </div>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedCategoryValue$",
                    "defaultValue": "this.store\r\n    .select(selectSelectedCategory)\r\n    .pipe(map((category) => category?.value))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "options",
                    "defaultValue": "[\r\n    {\r\n      id: '1',\r\n      content: {\r\n        heading: 'Con ayuda de un técnico',\r\n        body: 'Elige un horario y uno de nuestros técnicos te visitará',\r\n        icon: 'icon-build',\r\n      },\r\n    },\r\n    {\r\n      id: '2',\r\n      content: {\r\n        heading: 'Con ayuda de un técnico',\r\n        body: 'Elige un horario y uno de nuestros técnicos te visitará',\r\n        icon: 'icon-build',\r\n      },\r\n    },\r\n    {\r\n      id: '3',\r\n      content: {\r\n        heading: 'Con ayuda de un técnico',\r\n        body: 'Elige un horario y uno de nuestros técnicos te visitará',\r\n        icon: 'icon-build',\r\n      },\r\n    },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'storybook-selectors',\r\n  template: ` <div [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    <div [ngClass]=\"[body ? '' : 'hideBody', icon ? '' : 'hideIcon']\">\r\n      <lla-selectors\r\n        [options]=\"options\"\r\n        [isdisabled]=\"isdisabled\"\r\n        [isDarkMode]=\"isDarkMode\"\r\n        [isLargeText]=\"isLargeText\"\r\n      ></lla-selectors>\r\n    </div>\r\n  </div>`,\r\n  styleUrls: ['./selectors.scss'],\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class StorySelectorComponent {\r\n  backgroundColor = '';\r\n  isdisabled = false;\r\n  isDarkMode = false;\r\n  isLargeText = false;\r\n  options = [\r\n    {\r\n      id: '1',\r\n      content: {\r\n        heading: 'Con ayuda de un técnico',\r\n        body: 'Elige un horario y uno de nuestros técnicos te visitará',\r\n        icon: 'icon-build',\r\n      },\r\n    },\r\n    {\r\n      id: '2',\r\n      content: {\r\n        heading: 'Con ayuda de un técnico',\r\n        body: 'Elige un horario y uno de nuestros técnicos te visitará',\r\n        icon: 'icon-build',\r\n      },\r\n    },\r\n    {\r\n      id: '3',\r\n      content: {\r\n        heading: 'Con ayuda de un técnico',\r\n        body: 'Elige un horario y uno de nuestros técnicos te visitará',\r\n        icon: 'icon-build',\r\n      },\r\n    },\r\n  ];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".btn-groups-wrapper{\r\n    display: flex;\r\n    justify-content: center;\r\n    max-width: unset;\r\n}",
                    "styleUrl": "./product-category.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProductListingComponent",
            "id": "component-ProductListingComponent-a4e2f4b2567cf007e54c82bfbc589390",
            "file": "libs/domains/product-catalogue/src/lib/components/product-listing/product-listing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-product-listing",
            "styleUrls": [
                "./product-listing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-listing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedProducts$",
                    "defaultValue": "this.store.select(selectProductsBySelectedCategory)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onSelectProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport * as productsActions from '../../store/actions/products.actions';\r\nimport { AppState } from '../../product-catalogue.module';\r\nimport { selectProductsBySelectedCategory } from '../../store/selectors/products.selector';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { WebformModalComponent } from '../webform-modal/webform-modal.component';\r\nimport { EcommerceWebformComponent } from '../ecommerce-webform/ecommerce-webform.component';\r\n\r\n@Component({\r\n  selector: 'lla-product-listing',\r\n  templateUrl: './product-listing.component.html',\r\n  styleUrls: ['./product-listing.component.scss'],\r\n})\r\nexport class ProductListingComponent implements OnInit {\r\n  selectedProducts$ = this.store.select(selectProductsBySelectedCategory);\r\n\r\n  constructor(\r\n    private readonly store: Store<AppState>,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(productsActions.fetchProducts());\r\n  }\r\n\r\n  onSelectProduct(id: number) {\r\n    const dialogRef = this.dialog.open(WebformModalComponent, {\r\n      width: '500px',\r\n      data: id,\r\n    });\r\n    dialogRef.componentInstance.clickHandler.subscribe((res: boolean) => {\r\n      if (res) {\r\n        this.dialog.open(EcommerceWebformComponent, {\r\n          width: '500px',\r\n          data: true,\r\n        });\r\n      } else {\r\n        this.dialog.open(EcommerceWebformComponent, {\r\n          width: '500px',\r\n          data: false,\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".products-listing {\r\n    display: flex;\r\n    margin: 20px;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n.products-listing .plans-card{\r\n  margin:20px;\r\n}",
                    "styleUrl": "./product-listing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"products-listing\" *ngIf=\"selectedProducts$ | async as products\">\r\n  <lla-plans-card\r\n    *ngFor=\"let product of products;\"\r\n    class=\"plans-card\"\r\n    (clickHandler)=\"onSelectProduct($event)\"\r\n    [cardData]=\"product\"\r\n  ></lla-plans-card>\r\n</div>\r\n"
        },
        {
            "name": "RadiobuttonComponent",
            "id": "component-RadiobuttonComponent-26815b3f199181fcf671047092086ecf",
            "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-radiobutton",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./radiobutton.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "caption",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "horizontal",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "iserror",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isgroup",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isprimary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "values",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-radiobutton',\r\n  templateUrl: './radiobutton.component.html',\r\n})\r\n/**\r\n * Radio Button component constructor\r\n */\r\nexport class RadiobuttonComponent {\r\n  backgroundColor = '';\r\n  isprimary = false;\r\n  iserror = false;\r\n  isgroup = false;\r\n  label = false;\r\n  horizontal = false;\r\n  caption = false;\r\n  disabled = false;\r\n  values = 0;\r\n  Arr = Array;\r\n  isChecked = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div\r\n    *ngIf=\"isprimary\"\r\n    [ngClass]=\"[\r\n      backgroundColor == 'rgba(255,255,255,1)'\r\n        ? 'primary-radiobutton'\r\n        : 'dark-radiobutton'\r\n    ]\"\r\n  >\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-radio-group>\r\n      <mat-radio-button value=\"1\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span> </mat-radio-button\r\n      ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span><br *ngIf=\"!horizontal\" /><br\r\n        *ngIf=\"!horizontal\"\r\n      />\r\n      <mat-radio-button value=\"2\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span>\r\n      </mat-radio-button>\r\n    </mat-radio-group>\r\n  </div>\r\n  <div class=\"error-radiobutton\" *ngIf=\"iserror\">\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-radio-group>\r\n      <mat-radio-button value=\"1\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span> </mat-radio-button\r\n      ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span><br *ngIf=\"!horizontal\" /><br\r\n        *ngIf=\"!horizontal\"\r\n      />\r\n      <mat-radio-button value=\"2\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span>\r\n      </mat-radio-button>\r\n    </mat-radio-group>\r\n  </div>\r\n  <div *ngIf=\"isgroup\" class=\"primary-radiobutton\">\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-list>\r\n      <mat-list-item *ngFor=\"let item of Arr(values).fill(1); let i = index\">\r\n        <label class=\"radio-container\">\r\n          <span *ngIf=\"label\">Radio Button {{i+1}}</span>\r\n          <input type=\"radio\" name=\"radio\" [id]=\"i\" />\r\n          <span class=\"radio-checkmark\"></span>\r\n        </label>\r\n      </mat-list-item>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SearchDropdownComponent",
            "id": "component-SearchDropdownComponent-60b8f0f470ff8409605a2b53e993d7bd",
            "file": "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-radiobutton",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./radiobutton.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 27,
                    "type": "iSelectOption[]"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 28
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "line": 29,
                    "type": "STATUS"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOption",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<iSelectOption>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredOptions$",
                    "type": "Observable<iSelectOption[]>",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "textLimit",
                    "defaultValue": "40",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Inputs for select box option</p>\n",
                    "line": 24
                },
                {
                    "name": "iserror",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isgroup",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isprimary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "values",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-radiobutton',\r\n  templateUrl: './radiobutton.component.html',\r\n})\r\n/**\r\n * Radio Button component constructor\r\n */\r\nexport class RadiobuttonComponent {\r\n  backgroundColor = '';\r\n  isprimary = false;\r\n  iserror = false;\r\n  isgroup = false;\r\n  label;\r\n  horizontal;\r\n  caption;\r\n  disabled;\r\n  values;\r\n  Arr = Array;\r\n  /**\r\n   * Radio Button component constructor\r\n   */\r\n  isChecked = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RadiobuttonComponent-1",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <div\r\n    *ngIf=\"isprimary\"\r\n    [ngClass]=\"[\r\n      backgroundColor == 'rgba(255,255,255,1)'\r\n        ? 'primary-radiobutton'\r\n        : 'dark-radiobutton'\r\n    ]\"\r\n  >\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-radio-group>\r\n      <mat-radio-button value=\"1\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span> </mat-radio-button\r\n      ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span><br *ngIf=\"!horizontal\" /><br\r\n        *ngIf=\"!horizontal\"\r\n      />\r\n      <mat-radio-button value=\"2\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span>\r\n      </mat-radio-button>\r\n    </mat-radio-group>\r\n  </div>\r\n  <div class=\"error-radiobutton\" *ngIf=\"iserror\">\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-radio-group>\r\n      <mat-radio-button value=\"1\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span> </mat-radio-button\r\n      ><span *ngIf=\"horizontal\">&nbsp;&nbsp;</span><br *ngIf=\"!horizontal\" /><br\r\n        *ngIf=\"!horizontal\"\r\n      />\r\n      <mat-radio-button value=\"2\" [disabled]=\"disabled\">\r\n        <span *ngIf=\"label\">Radio label</span>\r\n      </mat-radio-button>\r\n    </mat-radio-group>\r\n  </div>\r\n  <div *ngIf=\"isgroup\" class=\"primary-radiobutton\">\r\n    <p class=\"caption\" *ngIf=\"caption\">caption</p>\r\n    <mat-list>\r\n      <mat-list-item *ngFor=\"let item of Arr(values).fill(1); let i = index\">\r\n        <label class=\"radio-container\">\r\n          <span *ngIf=\"label\">Radio Button {{i+1}}</span>\r\n          <input type=\"radio\" name=\"radio\" [id]=\"i\" />\r\n          <span class=\"radio-checkmark\"></span>\r\n        </label>\r\n      </mat-list-item>\r\n    </mat-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SearchDropdownComponent",
            "id": "component-SearchDropdownComponent-60b8f0f470ff8409605a2b53e993d7bd",
            "file": "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-search-dropdown",
            "styleUrls": [
                "./search-dropdown.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./search-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 27,
                    "type": "iSelectOption[]"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 28
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "line": 29,
                    "type": "STATUS"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOption",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<iSelectOption>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredOptions$",
                    "type": "Observable<iSelectOption[]>",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "myControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "textLimit",
                    "defaultValue": "40",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Inputs for select box option</p>\n",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "options",
                            "type": "iSelectOption[]"
                        },
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "iSelectOption[]",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "iSelectOption[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { iSelectOption } from '../../../interfaces/select-box';\r\n\r\ntype STATUS = 'success' | 'error' | '';\r\n\r\n@Component({\r\n  selector: 'lla-search-dropdown',\r\n  templateUrl: './search-dropdown.component.html',\r\n  styleUrls: ['./search-dropdown.component.css'],\r\n})\r\nexport class SearchDropdownComponent implements OnChanges {\r\n  /**\r\n   * Inputs for select box option\r\n   */\r\n  textLimit = 40;\r\n  myControl = new FormControl();\r\n  filteredOptions$?: Observable<iSelectOption[]>;\r\n  @Input() options: iSelectOption[] = [];\r\n  @Input() placeholder? = '';\r\n  @Input() status?: STATUS = '';\r\n  @Input() message?: string = '';\r\n  @Input() isDisabled?: boolean = false;\r\n  @Output() selectedOption: EventEmitter<iSelectOption> = new EventEmitter();\r\n\r\n  ngOnChanges() {\r\n    this.filteredOptions$ = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map((label) => this.filter(this.options, label))\r\n    );\r\n  }\r\n\r\n  filter(options: iSelectOption[], label: string): iSelectOption[] {\r\n    const filterValue = label.toLowerCase();\r\n    const results = options.filter((optionsSelectable) =>\r\n      optionsSelectable.label.toLowerCase().includes(filterValue)\r\n    );\r\n    return results.length\r\n      ? results\r\n      : [\r\n          {\r\n            value: 'No Search Results',\r\n            label: 'No Search Results',\r\n          },\r\n        ];\r\n  }\r\n\r\n  handleChanges(event: string): void {\r\n    this.selectedOption.emit({\r\n      value: event,\r\n      label: event,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search-dropdown.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<form class=\"searchDropdown\">\r\n  <mat-form-field\r\n    class=\"searchDropdownField\"\r\n    [ngClass]=\"[status, isDisabled ? 'fieldDisable' : '']\"\r\n  >\r\n    <mat-label class=\"dropdown\">{{placeholder}}</mat-label>\r\n    <input\r\n      type=\"text\"\r\n      aria-label=\"Number\"\r\n      matInput\r\n      [formControl]=\"myControl\"\r\n      [matAutocomplete]=\"auto\"\r\n      [attr.disabled]=\"isDisabled == false ? null : isDisabled\"\r\n    />\r\n    <mat-autocomplete\r\n      #auto=\"matAutocomplete\"\r\n      (optionSelected)=\"handleChanges($event.option.value)\"\r\n    >\r\n      <mat-option\r\n        matTooltip=\"{{option.label.length > textLimit ? option.label : '' }}\"\r\n        *ngFor=\"let option of filteredOptions$ | async\"\r\n        [value]=\"option.label\"\r\n      >\r\n        {{option.label}}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n    <mat-hint class=\"toaster toaster-background\"\r\n      >{{ message }}</mat-hint\r\n    >\r\n  </mat-form-field>\r\n</form>\r\n"
        },
        {
            "name": "SelectorsComponent",
            "id": "component-SelectorsComponent-b90451c77f5e40b74dfae02963536381",
            "file": "libs/shared/ui-library/src/lib/components/selectors/selectors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-selectors",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./selectors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "isdisabled",
                    "defaultValue": "false",
                    "line": 25,
                    "type": "boolean"
                },
                {
                    "name": "isLargeText",
                    "defaultValue": "false",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 24,
                    "type": "ISelectors[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "dataSelected",
                    "defaultValue": "new EventEmitter()",
                    "line": 28,
                    "type": "EventEmitter<ISelectors>"
                }
            ],
            "propertiesClass": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "MenuService"
                        },
                        {
                            "name": "breakpointState",
                            "type": "BreakpointState"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "breakpointState",
                            "type": "BreakpointState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  ValueProvider,\r\n} from '@angular/core';\r\nimport {\r\n  BreakpointObserver,\r\n  Breakpoints,\r\n  BreakpointState,\r\n} from '@angular/cdk/layout';\r\nimport { MatRadioChange } from '@angular/material/radio';\r\n\r\nimport { ISelectors } from '@lla/shared/util-library';\r\n\r\n@Component({\r\n  selector: 'lla-selectors',\r\n  templateUrl: './selectors.component.html',\r\n  styleUrls: ['./selectors.component.scss'],\r\n})\r\nexport class SelectorsComponent implements OnChanges, OnInit {\r\n  @Input() options: ISelectors[] = [];\r\n  @Input() isdisabled?: boolean = false;\r\n  @Input() isDarkMode?: boolean = false;\r\n  @Input() isLargeText?: boolean = false;\r\n  @Output() dataSelected: EventEmitter<ISelectors> = new EventEmitter();\r\n  columnSize = 0;\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver) {}\r\n\r\n  ngOnChanges() {\r\n    this.getDeviceBreakpoint();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getDeviceBreakpoint();\r\n  }\r\n\r\n  getDeviceBreakpoint(): void {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      /* \r\n      The columnsze will be 1 if, it is a small device\r\n      The columnsze will be 1 if, it is a large device\r\n      */\r\n      .subscribe((breakpointState: BreakpointState) => {\r\n        this.columnSize = this.isSmallDevice(breakpointState) ? 1 : 3;\r\n      });\r\n  }\r\n  isSmallDevice(breakpointState: BreakpointState): boolean {\r\n    if (breakpointState.matches) {\r\n      return (\r\n        breakpointState.breakpoints[Breakpoints.Small] ||\r\n        breakpointState.breakpoints[Breakpoints.XSmall]\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleChanges(event: MatRadioChange): void {\r\n    const data = this.options.find((item) => item.id === event.value);\r\n    this.dataSelected.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<mat-grid-list [cols]=\"columnSize\" rowHeight=\"1:2\" class=\"selector\">\r\n  <mat-grid-tile>\r\n    <div [ngClass]=\"{ primaryradiobutton: true, 'darkmode': isDarkMode }\">\r\n      <mat-radio-group>\r\n        <ng-container *ngFor=\"let option of options\">\r\n          <mat-radio-button\r\n            [disabled]=\"isdisabled\"\r\n            [ngClass]=\"{ selector__container: true, 'largecontent': isLargeText }\"\r\n            [value]=\"option.id\"\r\n            (change)=\"handleChanges($event)\"\r\n          >\r\n            <div class=\"selector__container__content\">\r\n              <h4>{{option.content.heading}}</h4>\r\n              <p>{{option.content.body}}</p>\r\n              <span *ngIf=\"option.content.icon\" class=\"icon-placeholder\" [ngClass]=\"option.content.icon\">\r\n              </span>\r\n            </div>\r\n          </mat-radio-button>\r\n        </ng-container>\r\n      </mat-radio-group>\r\n    </div>\r\n  </mat-grid-tile>\r\n</mat-grid-list>\r\n"
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "FeatureLibraryModule"
                        },
                        {
                            "name": "ProductCatalogueModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "body",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "opacity",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "size",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "statusIcon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "description": "<p>StoryLogoComponent</p>\n"
                },
                {
                    "name": "toggleAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "description": "<p>Toggle alert</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-alert',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <lla-alert\r\n      (clickHandler)=\"toggleAlert()\"\r\n      [type]=\"size\"\r\n      [opacity]=\"opacity\"\r\n      [status]=\"status\"\r\n      [statusIcon]=\"statusIcon\"\r\n      [title]=\"title\"\r\n      [body]=\"body\"\r\n    ></lla-alert>\r\n  </div>`,\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class StoryAlertComponent implements OnInit {\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  status: string;\r\n  body: string;\r\n  size: string;\r\n  opacity: string;\r\n  statusIcon: string;\r\n  title: string;\r\n\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle alert\r\n   */\r\n  toggleAlert() {\r\n    return null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StoryalertPageComponent",
            "id": "component-StoryalertPageComponent-4be30b826b688932d36571023a64f35a",
            "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-alert-page",
            "styleUrls": [],
            "styles": [],
            "template": "<div   class=\"template-fluid\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   <button\n     mat-raised-button\n     class=\"button--primary btn-small\"\n     (click)=\"toggleAlert()\"\n   >\n     click\n   </button>\n   <lla-alert\n     *ngIf=\"alertToggle\"\n     (clickHandler)=\"toggleAlert()\"\n     [type]=\"size\"\n     [opacity]=\"opacity\"\n     [status]=\"status\"\n     [statusIcon]=\"statusIcon\"\n     [title]=\"title\"\n     [body]=\"body\"\n   ></lla-alert>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertToggle",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "body",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "statusIcon",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "title",
                    "defaultValue": "'Success'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>StoryLogoComponent</p>\n"
                },
                {
                    "name": "toggleAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "description": "<p>Toggle alert</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-alert-page',\r\n  template: ` <div\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    <button\r\n      mat-raised-button\r\n      class=\"button--primary btn-small\"\r\n      (click)=\"toggleAlert()\"\r\n    >\r\n      click\r\n    </button>\r\n    <lla-alert\r\n      *ngIf=\"alertToggle\"\r\n      (clickHandler)=\"toggleAlert()\"\r\n      [type]=\"size\"\r\n      [opacity]=\"opacity\"\r\n      [status]=\"status\"\r\n      [statusIcon]=\"statusIcon\"\r\n      [title]=\"title\"\r\n      [body]=\"body\"\r\n    ></lla-alert>\r\n  </div>`,\r\n})\r\n/**\r\n * StoryLogoPageComponent\r\n */\r\nexport default class StoryalertPageComponent implements OnInit {\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  status = '';\r\n  title = 'Success';\r\n  body = '';\r\n  statusIcon = '';\r\n  alertToggle = false;\r\n  size = 'default';\r\n  /**\r\n   * Toggle alert\r\n   */\r\n  toggleAlert(): void {\r\n    this.alertToggle = !this.alertToggle;\r\n  }\r\n  /**\r\n   * StoryLogoComponent\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StorybookAlertComponent",
            "id": "component-StorybookAlertComponent-482d407de779410adc50607d280c53b1",
            "file": "apps/storybook-app/src/app/stories/molecule/alert/storybookalertcomponent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lla-storybook-alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./storybook-alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "body",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "opacity",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "status",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "statusIcon",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "description": "<p>Toggle alert</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lla-storybook-alert',\r\n  templateUrl: './storybook-alert.component.html',\r\n})\r\n/**\r\n * StoryLogoComponent\r\n */\r\nexport default class StorybookAlertComponent {\r\n  backgroundColor = '';\r\n  getTheme = 'VTR';\r\n  status = '';\r\n  body = '';\r\n  size = '';\r\n  opacity = '';\r\n  statusIcon = '';\r\n  title = '';\r\n\r\n  /**\r\n   * Toggle alert\r\n   */\r\n  toggleAlert() {\r\n    return null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"template-fluid\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n  <lla-alert\r\n    (clickHandler)=\"toggleAlert()\"\r\n    [type]=\"size\"\r\n    [opacity]=\"opacity\"\r\n    [status]=\"status\"\r\n    [statusIcon]=\"statusIcon\"\r\n    [title]=\"title\"\r\n    [body]=\"body\"\r\n  ></lla-alert>\r\n</div>\r\n"
        },
        {
            "name": "StorybreadCrumbComponent",
            "id": "component-StorybreadCrumbComponent-a34a601c4af7281a686f5241330719d3",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-breadcrumb",
            "styleUrls": [],
            "styles": [],
            "template": "<article    class=\"template-fluid\"\n    [ngStyle]=\"{\n      'background-color': backgroundColor\n    }\"\n  >\n    <lla-breadcrumb\n      (clickHandler)=\"navigatePage($event)\"\n      [breadCrumb]=\"breadCrumb\"\n      [isDarkMode]=\"isDarkMode\"\n    ></lla-breadcrumb>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "navigatePage",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 751,
                                "end": 755,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 745,
                                "end": 750,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "description": "<p>To get the current theme from storybook</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-breadcrumb',\r\n  template: `<article\r\n    class=\"template-fluid\"\r\n    [ngStyle]=\"{\r\n      'background-color': backgroundColor\r\n    }\"\r\n  >\r\n    <lla-breadcrumb\r\n      (clickHandler)=\"navigatePage($event)\"\r\n      [breadCrumb]=\"breadCrumb\"\r\n      [isDarkMode]=\"isDarkMode\"\r\n    ></lla-breadcrumb>\r\n  </article>`,\r\n})\r\n/**\r\n * StoryinputCodeComponent\r\n */\r\nexport default class StorybreadCrumbComponent implements OnInit {\r\n  getTheme = 'VTR';\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n  /**\r\n   *\r\n   * @param data\r\n   */\r\n  navigatePage(data) {\r\n    console.log(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StoryCardComponent",
            "id": "component-StoryCardComponent-604c2af993fe7cb861b631b08a38a698",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-cards",
            "styleUrls": [
                "./card.scss"
            ],
            "styles": [],
            "template": "<div    [ngClass]=\"[gridSize ? gridSize : '']\"\n    [ngStyle]=\"{\n      'background-color': backgroundColor\n    }\"\n  >\n    <lla-centered-card\n      *ngIf=\"centeredCard\"\n      [cardData]=\"cardData\"\n      [isbordered]=\"isbordered\"\n      [isdarkTheme]=\"isdarkTheme\"\n    ></lla-centered-card>\n    <lla-cta-card\n      *ngIf=\"ctaCard\"\n      [cardData]=\"cardData\"\n      [isbordered]=\"isbordered\"\n      [isdarkTheme]=\"isdarkTheme\"\n    ></lla-cta-card>\n    <lla-fullsize-card\n      *ngIf=\"fullsizeCard\"\n      [cardData]=\"cardData\"\n      [cardVariant]=\"cardVariant\"\n    ></lla-fullsize-card>\n    <lla-plans-card *ngIf=\"plansCard\" [cardData]=\"cardData\"></lla-plans-card>\n    <lla-wide-card\n      *ngIf=\"wideCard\"\n      [cardData]=\"cardData\"\n      [isdarkTheme]=\"isdarkTheme\"\n    ></lla-wide-card>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "getTheme",
                    "defaultValue": "'VTR'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "gridSize",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "isbordered",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "isdarkTheme",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "description": "<p>To get the current theme from storybook</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'storybook-cards',\r\n  template: `<div\r\n    [ngClass]=\"[gridSize ? gridSize : '']\"\r\n    [ngStyle]=\"{\r\n      'background-color': backgroundColor\r\n    }\"\r\n  >\r\n    <lla-centered-card\r\n      *ngIf=\"centeredCard\"\r\n      [cardData]=\"cardData\"\r\n      [isbordered]=\"isbordered\"\r\n      [isdarkTheme]=\"isdarkTheme\"\r\n    ></lla-centered-card>\r\n    <lla-cta-card\r\n      *ngIf=\"ctaCard\"\r\n      [cardData]=\"cardData\"\r\n      [isbordered]=\"isbordered\"\r\n      [isdarkTheme]=\"isdarkTheme\"\r\n    ></lla-cta-card>\r\n    <lla-fullsize-card\r\n      *ngIf=\"fullsizeCard\"\r\n      [cardData]=\"cardData\"\r\n      [cardVariant]=\"cardVariant\"\r\n    ></lla-fullsize-card>\r\n    <lla-plans-card *ngIf=\"plansCard\" [cardData]=\"cardData\"></lla-plans-card>\r\n    <lla-wide-card\r\n      *ngIf=\"wideCard\"\r\n      [cardData]=\"cardData\"\r\n      [isdarkTheme]=\"isdarkTheme\"\r\n    ></lla-wide-card>\r\n  </div>`,\r\n  styleUrls: ['./card.scss'],\r\n})\r\n/**\r\n * StoryinputCodeComponent\r\n */\r\nexport default class StoryCardComponent implements OnInit {\r\n  getTheme = 'VTR';\r\n  gridSize = '';\r\n  isbordered = true;\r\n  isdarkTheme = true;\r\n  cardData = [];\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  constructor(private breakpointObserver: BreakpointObserver) {\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n        Breakpoints.HandsetLandscape,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.matches) {\r\n          if (result.breakpoints[Breakpoints.XSmall]) {\r\n            this.gridSize = 'XS';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Small]) {\r\n            this.gridSize = 'SM';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Medium]) {\r\n            this.gridSize = 'MD';\r\n          }\r\n          if (result.breakpoints[Breakpoints.Large]) {\r\n            this.gridSize = 'LG';\r\n          }\r\n          if (result.breakpoints[Breakpoints.XLarge]) {\r\n            this.gridSize = 'XL';\r\n          }\r\n          if (result.breakpoints[Breakpoints.HandsetLandscape]) {\r\n            this.gridSize = 'SML';\r\n          }\r\n        }\r\n      });\r\n  }\r\n  /**\r\n   * To get the current theme from storybook\r\n   */\r\n  ngOnInit() {\r\n    window.addEventListener('storage', () => {\r\n      this.getTheme = sessionStorage.getItem('theme');\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".XS .card-layout-cta {\r\n    .card-layout {\r\n      width: 200px !important;\r\n    }\r\n  \r\n    .card-layout img {\r\n      width: 200px !important;\r\n    }\r\n  }\r\n  .XS  .card-layout-plans .card-layout {\r\n    width: 200px !important;\r\n  }\r\n  .XS  .card-layout-plans .card-layout img{\r\n    width: 200px !important;\r\n  }\r\n  .card-layout-centered .card-tagline{\r\n    padding: 5px;\r\n}\r\n.card-layout-centered .card-title {\r\n    padding: 5px;\r\n}\r\n\r\n  ",
                    "styleUrl": "./card.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>To get the current theme from storybook</p>\n",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StorydropdownComponent",
            "id": "component-StorydropdownComponent-2f968886f1e1a9a4bc19f09cf800f3b3",
            "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-dropdown",
            "styleUrls": [],
            "styles": [],
            "template": "<div [ngStyle]=\"{ 'background-color': backgroundColor }\">   <lla-select-dropdown\n     *ngIf=\"isDropdown\"\n     [options]=\"options\"\n     [label]=\"label\"\n     [status]=\"status\"\n     [message]=\"message\"\n     [isDisabled]=\"isDisabled\"\n   ></lla-select-dropdown>\n   <lla-search-dropdown\n     *ngIf=\"searchDropdown\"\n     [placeholder]=\"placeholder\"\n     [status]=\"status\"\n     [message]=\"message\"\n     [isDisabled]=\"isDisabled\"\n     [options]=\"options\"\n   ></lla-search-dropdown>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "CenteredCardComponent"
                        },
                        {
                            "name": "CtaCardComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "FullsizeCardComponent"
                        },
                        {
                            "name": "ImgGalleryComponent"
                        },
                        {
                            "name": "InputCodeComponent"
                        },
                        {
                            "name": "LabelsComponent"
                        },
                        {
                            "name": "LogoComponent"
                        },
                        {
                            "name": "PlansCardComponent"
                        },
                        {
                            "name": "SearchDropdownComponent"
                        },
                        {
                            "name": "SelectorsComponent"
                        },
                        {
                            "name": "WideCardComponent"
                        }
                    ]
                },
                {
                    "name": "internet",
                    "defaultValue": "'Internet + Television'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "CenteredCardComponent"
                        },
                        {
                            "name": "CtaCardComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "FullsizeCardComponent"
                        },
                        {
                            "name": "ImgGalleryComponent"
                        },
                        {
                            "name": "InputCodeComponent"
                        },
                        {
                            "name": "LogoComponent"
                        },
                        {
                            "name": "PlansCardComponent"
                        },
                        {
                            "name": "SearchDropdownComponent"
                        },
                        {
                            "name": "SelectorsComponent"
                        },
                        {
                            "name": "WideCardComponent"
                        }
                    ]
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "options",
                    "defaultValue": "[\r\n    { value: this.television, label: this.television },\r\n    { value: this.internet, label: this.internet },\r\n    { value: this.television, label: this.television },\r\n  ]",
                    "type": "iSelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "television",
                    "defaultValue": "'Television + Telefion'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "updatedValue",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges } from '@angular/core';\r\nimport { iSelectOption } from '../../../interfaces/select-box';\r\n@Component({\r\n  selector: 'storybook-dropdown',\r\n  template: ` <div [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    <lla-select-dropdown\r\n      *ngIf=\"isDropdown\"\r\n      [options]=\"options\"\r\n      [label]=\"label\"\r\n      [status]=\"status\"\r\n      [message]=\"message\"\r\n      [isDisabled]=\"isDisabled\"\r\n    ></lla-select-dropdown>\r\n    <lla-search-dropdown\r\n      *ngIf=\"searchDropdown\"\r\n      [placeholder]=\"placeholder\"\r\n      [status]=\"status\"\r\n      [message]=\"message\"\r\n      [isDisabled]=\"isDisabled\"\r\n      [options]=\"options\"\r\n    ></lla-search-dropdown>\r\n  </div>`,\r\n})\r\nexport default class StorydropdownComponent implements OnChanges {\r\n  backgroundColor: string;\r\n  television = 'Television + Telefion';\r\n  internet = 'Internet + Television';\r\n  options: iSelectOption[] = [\r\n    { value: this.television, label: this.television },\r\n    { value: this.internet, label: this.internet },\r\n    { value: this.television, label: this.television },\r\n  ];\r\n  placeholder: string;\r\n  status: string;\r\n  message: string;\r\n  isDisabled: boolean;\r\n  currentValue = 3;\r\n  updatedValue = 3;\r\n  labelForOptions: string;\r\n\r\n  ngOnChanges() {\r\n    if (this.updatedValue > this.currentValue) {\r\n      for (let i = this.currentValue; i < this.updatedValue; ) {\r\n        i++;\r\n        this.options.push({\r\n          value: `value ${i}`,\r\n          label: this.labelForOptions,\r\n        });\r\n      }\r\n    } else if (this.updatedValue < this.currentValue) {\r\n      for (let i = this.updatedValue; i < this.currentValue; i++) {\r\n        this.options.pop();\r\n      }\r\n    }\r\n    this.currentValue = this.updatedValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Bigsizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "body",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "breadCrumb",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "buttonGroups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "categoriesReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(categoriesActions.fetchCategories, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(categoriesActions.setCategories, (state, { categories }) => ({\r\n    ...state,\r\n    loading: false,\r\n    list: categories.map((category, index) => ({\r\n      ...category,\r\n      isSelected: index === 0,\r\n    })),\r\n  })),\r\n  on(categoriesActions.selectCategory, (state, { value }) => ({\r\n    ...state,\r\n    list: state.list.map((category) => ({\r\n      ...category,\r\n      isSelected: category.value === value,\r\n    })),\r\n  })),\r\n  on(categoriesActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    loading: true,\r\n    error,\r\n  }))\r\n)"
            },
            {
                "name": "centeredCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Code",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/server/src/app/config.ts",
                "type": "object",
                "defaultValue": "{\r\n  sapBaseUrl:\r\n    'https://api.cdoj51jxo6-lilacserv1-d2-public.model-t.cc.commerce.ondemand.com',\r\n  mulesoftBaseUrl: 'https://esb-test.lla.com',\r\n  directusBaseUrl: 'https://cms-dev.lla.digital/_/items',\r\n  categoryList:\r\n    'llacommercewebservices/v2/vtr/catalogs/vtrProductCatalog/Online/categories/bundle',\r\n  productList: 'llacommercewebservices/v2/vtr/products/search',\r\n  registerUser: 'llacommercewebservices/v2/vtr/users',\r\n  candidateCheck: 'ecom-sales-ux/v1/CL/ecommerceCandidateCheck',\r\n  sapAuthToken: 'authorizationserver/oauth/token',\r\n}"
            },
            {
                "name": "CTACARD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "customViewports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/viewports.ts",
                "type": "object",
                "defaultValue": "{\t\r\n    mobile1: {\t\r\n      name: '320px',\t\r\n      styles: {\t\r\n        width: '320px',\t\r\n        height: '963px',\t\r\n      },\t\r\n    },\t\r\n    mobile2: {\t\r\n      name: '360px',\t\r\n      styles: {\t\r\n        width: '360px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile3: {\t\r\n      name: '400px',\t\r\n      styles: {\t\r\n        width: '400px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile4: {\t\r\n      name: '480px',\t\r\n      styles: {\t\r\n        width: '480px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet1: {\t\r\n      name: '600px',\t\r\n      styles: {\t\r\n        width: '600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet2: {\t\r\n      name: '720px',\t\r\n      styles: {\t\r\n        width: '720px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet3: {\t\r\n      name: '840px',\t\r\n      styles: {\t\r\n        width: '840px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet4: {\t\r\n      name: '960px',\t\r\n      styles: {\t\r\n        width: '960px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop1: {\t\r\n      name: '1024px',\t\r\n      styles: {\t\r\n        width: '1024px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop2: {\t\r\n      name: '1280px',\t\r\n      styles: {\t\r\n        width: '1280px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop3: {\t\r\n      name: '1440px',\t\r\n      styles: {\t\r\n        width: '1440px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop4: {\t\r\n      name: '1600px',\t\r\n      styles: {\t\r\n        width: '1600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop5: {\t\r\n      name: '1920px',\t\r\n      styles: {\t\r\n        width: '1920px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n  }"
            },
            {
                "name": "discount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/server/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/server/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-shell/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-shell/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ecommerce-web-app/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ecommerce-web-app/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n}"
            },
            {
                "name": "error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "featured",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "featureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "string",
                "defaultValue": "'products'"
            },
            {
                "name": "featureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "string",
                "defaultValue": "'categories'"
            },
            {
                "name": "FETCH_CATEGORIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "string",
                "defaultValue": "'[Categories] Fetch Categories'"
            },
            {
                "name": "FETCH_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Fetch Products'"
            },
            {
                "name": "fetchCategories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "",
                "defaultValue": "createAction(FETCH_CATEGORIES)"
            },
            {
                "name": "fetchProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "",
                "defaultValue": "createAction(FETCH_PRODUCTS)"
            },
            {
                "name": "FIGMA_BASE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/constants.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/'"
            },
            {
                "name": "FIGMA_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892'"
            },
            {
                "name": "FIGMA_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/colors/colors.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=0%3A14'"
            },
            {
                "name": "FIGMA_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=449%3A1218'"
            },
            {
                "name": "FIGMA_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892'"
            },
            {
                "name": "FIGMA_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=0%3A14'"
            },
            {
                "name": "FIGMA_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=449%3A1218'"
            },
            {
                "name": "FIGMA_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=665%3A0'"
            },
            {
                "name": "FIGMA_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/XTijCcPvZsCmXEJp9td0DL/Design-System---Ready-for-development---002?node-id=2528%3A5021'"
            },
            {
                "name": "figmaURL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A1053'"
            },
            {
                "name": "figmaURL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=0%3A332'"
            },
            {
                "name": "figmaURL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A1053'"
            },
            {
                "name": "figmaURL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "string",
                "defaultValue": "'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=0%3A332'"
            },
            {
                "name": "fullsizeCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    fullsizeCard: true,\r\n    cardVariant: 'FULLSIZE',\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      caption: 'Caption',\r\n      btnText: 'Lo Quiero',\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    cardVariant: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdarkTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    fullsizeCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "fullsizewithCTACard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    fullsizeCard: true,\r\n    cardVariant: 'FULLSIZECTA',\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      btnText: 'Lo Quiero',\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    cardVariant: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdarkTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    fullsizeCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "fullsizewithPriceCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    fullsizeCard: true,\r\n    cardVariant: 'FULLSIZEPRICE',\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      price: '$49.99',\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    cardVariant: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdarkTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    fullsizeCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "getElementByClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ecommerce-web-app-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "(name: string) => cy.get(name)"
            },
            {
                "name": "getElementByClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ui-library-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "(name: string) => cy.get(name)"
            },
            {
                "name": "getElementByName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ecommerce-web-app-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "(name: string) => cy.get(name)"
            },
            {
                "name": "getElementByName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ui-library-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "(name: string) => cy.get(name)"
            },
            {
                "name": "getGreeting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/ubc-shell-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "() => cy.get('h1')"
            },
            {
                "name": "grid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/grid/grid.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatGridListModule],\r\n  },\r\n  component: GridComponent,\r\n  props: {},\r\n})"
            },
            {
                "name": "grid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/grid/grid.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatGridListModule],\r\n  },\r\n  component: GridComponent,\r\n  props: {},\r\n})"
            },
            {
                "name": "Group",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "TemplateGroup.bind({\r\n  args: {\r\n    isgroup: true,\r\n    values: 4,\r\n  },\r\n  argTypes: {\r\n    values: { control: { type: 'number' } },\r\n    isprimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iserror: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isgroup: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n\r\n    isChecked: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "Group",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "TemplateGroup.bind({})"
            },
            {
                "name": "Group",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "TemplateGroup.bind({\r\n  args: {\r\n    isgroup: true,\r\n    values: 4,\r\n  },\r\n  argTypes: {\r\n    values: { control: { type: 'number' } },\r\n    isprimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iserror: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isgroup: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n\r\n    isChecked: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "Group",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "TemplateGroup.bind({})"
            },
            {
                "name": "heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/icons/icons.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "imgGallery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Information',\r\n    body: 'Remember to pay your check',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'INFO',\r\n    statusIcon: 'icon-information-circle-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Information',\r\n    body: 'Remember to pay your check',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'INFO',\r\n    statusIcon: 'icon-information-circle-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "ProductsState",
                "defaultValue": "{\r\n  list: [],\r\n  loading: false,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "CategoriesState",
                "defaultValue": "{\r\n  list: [],\r\n  loading: false,\r\n}"
            },
            {
                "name": "Inputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Inputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LargeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    isLink: true,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    isLink: true,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/list/list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "list",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/list/list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "logo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "logo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "neutral",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Password",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  argTypes: {\r\n    types: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    active: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    affixTypes: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    hide: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdisabled: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iconType: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n        options: ['small', 'large'],\r\n      },\r\n    },\r\n  },\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    TextColor: '#000000',\r\n    status: 'default',\r\n    size: 'large',\r\n    styles: 'fillInput',\r\n    types: 'inputWithPassword',\r\n  },\r\n})"
            },
            {
                "name": "Password",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  argTypes: {\r\n    types: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    active: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    affixTypes: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    hide: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdisabled: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iconType: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n        options: ['small', 'large'],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    TextColor: '#000000',\r\n    status: 'default',\r\n    size: 'large',\r\n    styles: 'fillInput',\r\n    types: 'inputWithPassword',\r\n  },\r\n})"
            },
            {
                "name": "plansCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    plansCard: true,\r\n    planId: 0,\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg7.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      price: '49.990',\r\n      planContent: [\r\n        {\r\n          text: 'Internet + Nextgen Wifi',\r\n          label: '',\r\n        },\r\n        {\r\n          text: 'TV Hogar HD',\r\n          label: '86 Canales + 71 Canales HD',\r\n        },\r\n        {\r\n          text: 'Internet + Nextgen Wifi',\r\n          label: '',\r\n        },\r\n        {\r\n          text: 'TV Hogar HD',\r\n          label: '86 Canales + 71 Canales HD',\r\n        },\r\n      ],\r\n      icon: 'icon-ellipse',\r\n      currency: '$',\r\n      btnText: 'Lo Quiero',\r\n      priceTerms: '/mes',\r\n      subPriceTerms: 'X 3 meses',\r\n      normalPrice: 'Normal $59.990',\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    plansCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdarkTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "Price",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Price",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    isPrimary: true,\r\n    isdisabled: false,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n          'btn-icon large-icon',\r\n          'btn-icon small-icon',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    isPrimary: true,\r\n    isdisabled: false,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n          'btn-icon large-icon',\r\n          'btn-icon small-icon',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/toggle/toggle.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "product",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "productsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(productsActions.fetchProducts, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(productsActions.setProducts, (state, { products }) => ({\r\n    ...state,\r\n    loading: false,\r\n    list: products,\r\n  })),\r\n  on(productsActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    loading: true,\r\n    error,\r\n  }))\r\n)"
            },
            {
                "name": "pswd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/server/src/app/services/crendentials.ts",
                "type": "string",
                "defaultValue": "'SomeStrongPassword1-'"
            },
            {
                "name": "searchDropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectCategories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCategoriesFeature,\r\n  ({ list }) => list\r\n)"
            },
            {
                "name": "selectCategoriesFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "",
                "defaultValue": "(state: AppState) => state.categories"
            },
            {
                "name": "selectCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  SET_SELECTED_CATEGORY,\r\n  props<{ value: string }>()\r\n)"
            },
            {
                "name": "selectError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCategoriesFeature,\r\n  ({ error }) => error\r\n)"
            },
            {
                "name": "selectError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProductsFeature,\r\n  ({ error }) => error\r\n)"
            },
            {
                "name": "selectLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCategoriesFeature,\r\n  ({ loading }) => loading\r\n)"
            },
            {
                "name": "selectLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProductsFeature,\r\n  ({ loading }) => loading\r\n)"
            },
            {
                "name": "selectProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProductsFeature,\r\n  ({ list }) => list\r\n)"
            },
            {
                "name": "selectProductsBySelectedCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProducts,\r\n  selectSelectedCategory,\r\n  (products, selectedCategory) =>\r\n    products.filter((product) => selectedCategory?.value === product.category)\r\n)"
            },
            {
                "name": "selectProductsFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "",
                "defaultValue": "(state: AppState) => state.products"
            },
            {
                "name": "selectSelectedCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "",
                "defaultValue": "createSelector(selectCategories, (list) =>\r\n  list.find((category) => category.isSelected)\r\n)"
            },
            {
                "name": "SET_CATEGORIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "string",
                "defaultValue": "'[Categories] Set Categories'"
            },
            {
                "name": "SET_ERROR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "string",
                "defaultValue": "'[Categories] Set Error'"
            },
            {
                "name": "SET_ERROR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Set Error'"
            },
            {
                "name": "SET_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Set Products'"
            },
            {
                "name": "SET_SELECTED_CATEGORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "string",
                "defaultValue": "'[Categories] Set Selected Category'"
            },
            {
                "name": "setCategories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  SET_CATEGORIES,\r\n  props<{ categories: Omit<CategoriesState['list'][number], 'isSelected'>[] }>()\r\n)"
            },
            {
                "name": "setError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "",
                "defaultValue": "createAction(SET_ERROR, props<{ error: string }>())"
            },
            {
                "name": "setError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "",
                "defaultValue": "createAction(SET_ERROR, props<{ error: string }>())"
            },
            {
                "name": "setProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  SET_PRODUCTS,\r\n  props<{ products: ProductsState['list'] }>()\r\n)"
            },
            {
                "name": "SmallText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "storeReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts",
                "type": "object",
                "defaultValue": "{\r\n  [fromProducts.featureKey]: fromProducts.reducer,\r\n  [fromCategories.featureKey]: fromCategories.reducer,\r\n}"
            },
            {
                "name": "subline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "subline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'SUCCESS',\r\n    body: 'Everything good',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'SUCCESS',\r\n    statusIcon: 'icon-happy-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'SUCCESS',\r\n    body: 'Everything good',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'SUCCESS',\r\n    statusIcon: 'icon-happy-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "support",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "support",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Tab",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/tabs/tabs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Tab",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/tabs/tabs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                "type": "Story<ButtonsComponent>",
                "defaultValue": "(args) => ({\r\n  component: ButtonsComponent,\r\n  props: args,\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.stories.ts",
                "type": "Story<ButtongroupComponent>",
                "defaultValue": "(args) => ({\r\n  component: ButtongroupComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "Story<ColorsComponent>",
                "defaultValue": "(args: ColorsComponent) => ({\r\n  component: ColorsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/icons/icons.stories.ts",
                "type": "Story<IconsComponent>",
                "defaultValue": "(args: IconsComponent) => ({\r\n  component: IconsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/list/list.stories.ts",
                "type": "Story<ListComponent>",
                "defaultValue": "(args) => ({\r\n  component: ListComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/tabs/tabs.stories.ts",
                "type": "Story<TabsComponent>",
                "defaultValue": "(args) => ({\r\n  component: TabsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "Story<InputsComponent>",
                "defaultValue": "(args: InputsComponent) => ({\r\n  component: InputsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "Story<StoryalertPageComponent>",
                "defaultValue": "(\r\n  args: StoryalertPageComponent\r\n) => ({\r\n  component: StoryalertPageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "Story<StoryalertPageComponent>",
                "defaultValue": "(\r\n  args: StoryalertPageComponent\r\n) => ({\r\n  component: StoryalertPageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "Story<RadiobuttonComponent>",
                "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "Story<TypographyComponent>",
                "defaultValue": "(args: TypographyComponent) => ({\r\n  component: TypographyComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "Story<StoryalertPageComponent>",
                "defaultValue": "(\r\n  args: StoryalertPageComponent\r\n) => ({\r\n  component: StoryalertPageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "Story<StoryLogoPageComponent>",
                "defaultValue": "(\r\n  args: StoryLogoPageComponent\r\n) => ({\r\n  component: StoryLogoPageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "Story<StoryLogoPageComponent>",
                "defaultValue": "(\r\n  args: StoryLogoPageComponent\r\n) => ({\r\n  component: StoryLogoPageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                "type": "Story<StorybreadCrumbComponent>",
                "defaultValue": "(\r\n  args: StorybreadCrumbComponent\r\n) => ({\r\n  component: StorybreadCrumbComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                "type": "Story<StorydropdownComponent>",
                "defaultValue": "(\r\n  args: StorydropdownComponent\r\n) => ({\r\n  component: StorydropdownComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.stories.ts",
                "type": "Story<StoryImgGalleryComponent>",
                "defaultValue": "(\r\n  args: StoryImgGalleryComponent\r\n) => ({\r\n  component: StoryImgGalleryComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                "type": "Story<StoryinputCodeComponent>",
                "defaultValue": "(\r\n  args: StoryinputCodeComponent\r\n) => ({\r\n  component: StoryinputCodeComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "Story<StoryCardComponent>",
                "defaultValue": "(args: StoryCardComponent) => ({\r\n  component: StoryCardComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "Story<StoryAlertComponent>",
                "defaultValue": "(args: StoryAlertComponent) => ({\r\n  component: StoryAlertComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                "type": "Story<StoryLogoComponent>",
                "defaultValue": "(args: StoryLogoComponent) => ({\r\n  component: StoryLogoComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                "type": "Story<StorySelectorComponent>",
                "defaultValue": "(\r\n  args: StorySelectorComponent\r\n) => ({\r\n  component: StorySelectorComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "TemplateGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "TemplateGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "Story<RadiobuttonComponent>",
                "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    TextColor: '#000000',\r\n    status: 'default',\r\n    size: 'large',\r\n    styles: 'fillInput',\r\n    types: 'inputWithTextarea',\r\n  },\r\n  argTypes: {\r\n    types: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    active: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    affixTypes: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    hide: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdisabled: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iconType: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n        options: ['small', 'large'],\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    TextColor: '#000000',\r\n    status: 'default',\r\n    size: 'large',\r\n    styles: 'fillInput',\r\n    types: 'inputWithTextarea',\r\n  },\r\n  argTypes: {\r\n    types: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    active: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    affixTypes: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    hide: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdisabled: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iconType: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n        options: ['small', 'large'],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "textcombinations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "textcombinations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/storybook-app/src/app/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Warning',\r\n    body: 'Something wrong',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'WARNING',\r\n    statusIcon: 'icon-warning-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Warning',\r\n    body: 'Something wrong',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'WARNING',\r\n    statusIcon: 'icon-warning-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Warning',\r\n    body: 'Something wrong',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'WARNING',\r\n    statusIcon: 'icon-warning-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
            },
            {
                "name": "wideCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    wideCard: true,\r\n    isdarkTheme: false,\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      price: '$49.99',\r\n      tagline: 'TAGLINE',\r\n      placeholder: 'Placeholder',\r\n      caption: 'caption',\r\n      body: 'Placeholder for body text. Please enter your text to override.',\r\n      btnText: 'Lo Quiero',\r\n      contentRight: false,\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    wideCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
            }
        ],
        "functions": [
            {
                "name": "bootstrap",
                "file": "apps/server/src/main.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "reducer",
                "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "removeBackSlashFromUrl",
                "file": "libs/shared/util-library/src/lib/url-parser.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>A function to remove the backslash from resource url path.\nfor example:\ninput :&quot;https://cms-dev.lla.digital/uploads/<em>/originals/9d8504d1-4468-4777-a9b1-ead19bf7cb53.jpg&quot;\noutput :&quot;<a href=\"https://cms-dev.lla.digital/uploads/\">https://cms-dev.lla.digital/uploads/</a></em>/originals/9d8504d1-4468-4777-a9b1-ead19bf7cb53.jpg&quot;</p>\n",
                "args": [
                    {
                        "name": "url"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 306,
                            "end": 309,
                            "flags": 0,
                            "escapedText": "url"
                        },
                        "tagName": {
                            "pos": 300,
                            "end": 305,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>string</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AppState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts",
                "description": "",
                "kind": 176
            },
            {
                "name": "CARD_VARIANT",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"FULLSIZE\" | \"FULLSIZECTA\" | \"FULLSIZEPRICE\"",
                "file": "libs/shared/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "CategoriesAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ReturnType<> | ReturnType<> | ReturnType<> | ReturnType<>",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "colors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"neutral\" | \"teritary\"",
                "file": "apps/storybook-app/src/app/stories/atom/colors/colors.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPENETSTATUS",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"SUCCESS\" | \"ERROR\" | \"DEFAULT\"",
                "file": "libs/shared/ui-library/src/lib/components/input-code/input-code.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPENETTYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"FILLIN\" | \"OUTLINE\"",
                "file": "libs/shared/ui-library/src/lib/components/input-code/input-code.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPONENT_OPACITY",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"24\" | \"40\" | \"100\"",
                "file": "libs/shared/ui-library/src/lib/components/alert/alert.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPONENT_STATUS",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"SUCCESS\" | \"WARNING\" | \"ERROR\" | \"INFO\"",
                "file": "libs/shared/ui-library/src/lib/components/alert/alert.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPONENT_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"full-width\" | \"default\"",
                "file": "libs/shared/ui-library/src/lib/components/alert/alert.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "COMPONENT_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"product\" | \"discount\" | \"featured\"",
                "file": "libs/shared/ui-library/src/lib/components/labels/labels.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "position",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"prefix\" | \"suffix\"",
                "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ProductsAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ReturnType<> | ReturnType<> | ReturnType<>",
                "file": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "STATUS",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"error\" | \"\"",
                "file": "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "STATUS",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"error\" | \"\"",
                "file": "libs/shared/ui-library/src/lib/components/dropdown/select-dropdown/select-dropdown.component.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts": [
                {
                    "name": "Bigsizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "body",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "figmaURL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=0%3A332'"
                },
                {
                    "name": "heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "subline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                    "type": "Story<TypographyComponent>",
                    "defaultValue": "(args: TypographyComponent) => ({\r\n  component: TypographyComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "textcombinations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts": [
                {
                    "name": "Bigsizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "body",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "figmaURL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=0%3A332'"
                },
                {
                    "name": "heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "subline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "Story<TypographyComponent>",
                    "defaultValue": "(args: TypographyComponent) => ({\r\n  component: TypographyComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "textcombinations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts": [
                {
                    "name": "breadCrumb",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                    "type": "Story<StorybreadCrumbComponent>",
                    "defaultValue": "(\r\n  args: StorybreadCrumbComponent\r\n) => ({\r\n  component: StorybreadCrumbComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/button-groups/btn-group.stories.ts": [
                {
                    "name": "buttonGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/button-groups/btn-group.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/button-groups/btn-group.stories.ts",
                    "type": "Story<ButtongroupComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ButtongroupComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.stories.ts": [
                {
                    "name": "buttonGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.stories.ts",
                    "type": "Story<ButtongroupComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ButtongroupComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts": [
                {
                    "name": "categoriesReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(categoriesActions.fetchCategories, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(categoriesActions.setCategories, (state, { categories }) => ({\r\n    ...state,\r\n    loading: false,\r\n    list: categories.map((category, index) => ({\r\n      ...category,\r\n      isSelected: index === 0,\r\n    })),\r\n  })),\r\n  on(categoriesActions.selectCategory, (state, { value }) => ({\r\n    ...state,\r\n    list: state.list.map((category) => ({\r\n      ...category,\r\n      isSelected: category.value === value,\r\n    })),\r\n  })),\r\n  on(categoriesActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    loading: true,\r\n    error,\r\n  }))\r\n)"
                },
                {
                    "name": "featureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                    "type": "string",
                    "defaultValue": "'categories'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                    "type": "CategoriesState",
                    "defaultValue": "{\r\n  list: [],\r\n  loading: false,\r\n}"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts": [
                {
                    "name": "centeredCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CTACARD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FIGMA_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=665%3A0'"
                },
                {
                    "name": "fullsizeCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    fullsizeCard: true,\r\n    cardVariant: 'FULLSIZE',\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      caption: 'Caption',\r\n      btnText: 'Lo Quiero',\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    cardVariant: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdarkTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    fullsizeCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "fullsizewithCTACard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    fullsizeCard: true,\r\n    cardVariant: 'FULLSIZECTA',\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      btnText: 'Lo Quiero',\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    cardVariant: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdarkTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    fullsizeCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "fullsizewithPriceCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    fullsizeCard: true,\r\n    cardVariant: 'FULLSIZEPRICE',\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      price: '$49.99',\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    cardVariant: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdarkTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    fullsizeCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "plansCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    plansCard: true,\r\n    planId: 0,\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg7.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      price: '49.990',\r\n      planContent: [\r\n        {\r\n          text: 'Internet + Nextgen Wifi',\r\n          label: '',\r\n        },\r\n        {\r\n          text: 'TV Hogar HD',\r\n          label: '86 Canales + 71 Canales HD',\r\n        },\r\n        {\r\n          text: 'Internet + Nextgen Wifi',\r\n          label: '',\r\n        },\r\n        {\r\n          text: 'TV Hogar HD',\r\n          label: '86 Canales + 71 Canales HD',\r\n        },\r\n      ],\r\n      icon: 'icon-ellipse',\r\n      currency: '$',\r\n      btnText: 'Lo Quiero',\r\n      priceTerms: '/mes',\r\n      subPriceTerms: 'X 3 meses',\r\n      normalPrice: 'Normal $59.990',\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    plansCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdarkTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "Story<StoryCardComponent>",
                    "defaultValue": "(args: StoryCardComponent) => ({\r\n  component: StoryCardComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "wideCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    wideCard: true,\r\n    isdarkTheme: false,\r\n    cardData: {\r\n      imageUrl: './vtr/sampleImg.png',\r\n      title: 'Title',\r\n      altText: 'Test',\r\n      price: '$49.99',\r\n      tagline: 'TAGLINE',\r\n      placeholder: 'Placeholder',\r\n      caption: 'caption',\r\n      body: 'Placeholder for body text. Please enter your text to override.',\r\n      btnText: 'Lo Quiero',\r\n      contentRight: false,\r\n    },\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isbordered: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    wideCard: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts": [
                {
                    "name": "CheckboxError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FIGMA_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892'"
                },
                {
                    "name": "Group",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "TemplateGroup.bind({\r\n  args: {\r\n    isgroup: true,\r\n    values: 4,\r\n  },\r\n  argTypes: {\r\n    values: { control: { type: 'number' } },\r\n    isprimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iserror: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isgroup: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n\r\n    isChecked: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "TemplateGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts": [
                {
                    "name": "Code",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                    "type": "Story<StoryinputCodeComponent>",
                    "defaultValue": "(\r\n  args: StoryinputCodeComponent\r\n) => ({\r\n  component: StoryinputCodeComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/server/src/app/config.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/server/src/app/config.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  sapBaseUrl:\r\n    'https://api.cdoj51jxo6-lilacserv1-d2-public.model-t.cc.commerce.ondemand.com',\r\n  mulesoftBaseUrl: 'https://esb-test.lla.com',\r\n  directusBaseUrl: 'https://cms-dev.lla.digital/_/items',\r\n  categoryList:\r\n    'llacommercewebservices/v2/vtr/catalogs/vtrProductCatalog/Online/categories/bundle',\r\n  productList: 'llacommercewebservices/v2/vtr/products/search',\r\n  registerUser: 'llacommercewebservices/v2/vtr/users',\r\n  candidateCheck: 'ecom-sales-ux/v1/CL/ecommerceCandidateCheck',\r\n  sapAuthToken: 'authorizationserver/oauth/token',\r\n}"
                }
            ],
            ".storybook/viewports.ts": [
                {
                    "name": "customViewports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/viewports.ts",
                    "type": "object",
                    "defaultValue": "{\t\r\n    mobile1: {\t\r\n      name: '320px',\t\r\n      styles: {\t\r\n        width: '320px',\t\r\n        height: '963px',\t\r\n      },\t\r\n    },\t\r\n    mobile2: {\t\r\n      name: '360px',\t\r\n      styles: {\t\r\n        width: '360px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile3: {\t\r\n      name: '400px',\t\r\n      styles: {\t\r\n        width: '400px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile4: {\t\r\n      name: '480px',\t\r\n      styles: {\t\r\n        width: '480px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet1: {\t\r\n      name: '600px',\t\r\n      styles: {\t\r\n        width: '600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet2: {\t\r\n      name: '720px',\t\r\n      styles: {\t\r\n        width: '720px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet3: {\t\r\n      name: '840px',\t\r\n      styles: {\t\r\n        width: '840px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet4: {\t\r\n      name: '960px',\t\r\n      styles: {\t\r\n        width: '960px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop1: {\t\r\n      name: '1024px',\t\r\n      styles: {\t\r\n        width: '1024px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop2: {\t\r\n      name: '1280px',\t\r\n      styles: {\t\r\n        width: '1280px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop3: {\t\r\n      name: '1440px',\t\r\n      styles: {\t\r\n        width: '1440px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop4: {\t\r\n      name: '1600px',\t\r\n      styles: {\t\r\n        width: '1600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop5: {\t\r\n      name: '1920px',\t\r\n      styles: {\t\r\n        width: '1920px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n  }"
                }
            ],
            "apps/storybook-app/.storybook/viewports.ts": [
                {
                    "name": "customViewports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/.storybook/viewports.ts",
                    "type": "object",
                    "defaultValue": "{\t\r\n    mobile1: {\t\r\n      name: '320px',\t\r\n      styles: {\t\r\n        width: '320px',\t\r\n        height: '963px',\t\r\n      },\t\r\n    },\t\r\n    mobile2: {\t\r\n      name: '360px',\t\r\n      styles: {\t\r\n        width: '360px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile3: {\t\r\n      name: '400px',\t\r\n      styles: {\t\r\n        width: '400px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    mobile4: {\t\r\n      name: '480px',\t\r\n      styles: {\t\r\n        width: '480px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet1: {\t\r\n      name: '600px',\t\r\n      styles: {\t\r\n        width: '600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet2: {\t\r\n      name: '720px',\t\r\n      styles: {\t\r\n        width: '720px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet3: {\t\r\n      name: '840px',\t\r\n      styles: {\t\r\n        width: '840px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    tablet4: {\t\r\n      name: '960px',\t\r\n      styles: {\t\r\n        width: '960px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop1: {\t\r\n      name: '1024px',\t\r\n      styles: {\t\r\n        width: '1024px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop2: {\t\r\n      name: '1280px',\t\r\n      styles: {\t\r\n        width: '1280px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop3: {\t\r\n      name: '1440px',\t\r\n      styles: {\t\r\n        width: '1440px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop4: {\t\r\n      name: '1600px',\t\r\n      styles: {\t\r\n        width: '1600px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n    desktop5: {\t\r\n      name: '1920px',\t\r\n      styles: {\t\r\n        width: '1920px',\t\r\n        height: '801px',\t\r\n      },\t\r\n    },\t\r\n  }"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts": [
                {
                    "name": "discount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "featured",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FIGMA_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/XTijCcPvZsCmXEJp9td0DL/Design-System---Ready-for-development---002?node-id=2528%3A5021'"
                },
                {
                    "name": "product",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                    "type": "Story<StoryAlertComponent>",
                    "defaultValue": "(args: StoryAlertComponent) => ({\r\n  component: StoryAlertComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts": [
                {
                    "name": "dropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "searchDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                    "type": "Story<StorydropdownComponent>",
                    "defaultValue": "(\r\n  args: StorydropdownComponent\r\n) => ({\r\n  component: StorydropdownComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/ecommerce-web-app/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ecommerce-web-app/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "apps/ecommerce-web-app/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ecommerce-web-app/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "apps/server/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/server/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "apps/server/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/server/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "apps/ubc-shell/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-shell/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "apps/ubc-shell/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-shell/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts": [
                {
                    "name": "error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Error',\r\n    body: 'Try to refresh',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'ERROR',\r\n    statusIcon: 'icon-restaurant-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Information',\r\n    body: 'Remember to pay your check',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'INFO',\r\n    statusIcon: 'icon-information-circle-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'SUCCESS',\r\n    body: 'Everything good',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'SUCCESS',\r\n    statusIcon: 'icon-happy-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "Story<StoryalertPageComponent>",
                    "defaultValue": "(\r\n  args: StoryalertPageComponent\r\n) => ({\r\n  component: StoryalertPageComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Warning',\r\n    body: 'Something wrong',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'WARNING',\r\n    statusIcon: 'icon-warning-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts": [
                {
                    "name": "error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Error',\r\n    body: 'Try to refresh',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'ERROR',\r\n    statusIcon: 'icon-restaurant-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Information',\r\n    body: 'Remember to pay your check',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'INFO',\r\n    statusIcon: 'icon-information-circle-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'SUCCESS',\r\n    body: 'Everything good',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'SUCCESS',\r\n    statusIcon: 'icon-happy-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "Story<StoryAlertComponent>",
                    "defaultValue": "(args: StoryAlertComponent) => ({\r\n  component: StoryAlertComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    title: 'Warning',\r\n    body: 'Something wrong',\r\n    backgroundColor: '#ffffff',\r\n    size: 'default',\r\n    opacity: '100',\r\n    status: 'WARNING',\r\n    statusIcon: 'icon-warning-outline',\r\n  },\r\n  argTypes: {\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    type: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=548%3A388',\r\n      },\r\n    },\r\n  },\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FIGMA_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A892'"
                },
                {
                    "name": "Group",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "TemplateGroup.bind({\r\n  args: {\r\n    isgroup: true,\r\n    values: 4,\r\n  },\r\n  argTypes: {\r\n    values: { control: { type: 'number' } },\r\n    isprimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iserror: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isgroup: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n\r\n    isChecked: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "TemplateGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args) => ({\r\n  component: CheckboxComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "figmaURL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A1053'"
                },
                {
                    "name": "Group",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "TemplateGroup.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "Story<RadiobuttonComponent>",
                    "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "TemplateGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "Story<RadiobuttonComponent>",
                    "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/toggle/toggle.stories.ts": [
                {
                    "name": "ErrorState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  arg: {\r\n    isdisabled: false,\r\n    label: false,\r\n    caption: false,\r\n    iserror: true,\r\n    backgroundColor: 'rgba(255,255,255,1)',\r\n  },\r\n  argTypes: {\r\n    isprimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isChecked: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iserror: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/toggle/toggle.stories.ts",
                    "type": "Story<ToggleComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ToggleComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts": [
                {
                    "name": "ErrorState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  arg: {\r\n    isdisabled: false,\r\n    label: false,\r\n    caption: false,\r\n    iserror: true,\r\n    backgroundColor: 'rgba(255,255,255,1)',\r\n  },\r\n  argTypes: {\r\n    isprimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isChecked: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iserror: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A1158',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "Story<ToggleComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ToggleComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts": [
                {
                    "name": "featureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                    "type": "string",
                    "defaultValue": "'products'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                    "type": "ProductsState",
                    "defaultValue": "{\r\n  list: [],\r\n  loading: false,\r\n}"
                },
                {
                    "name": "productsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(productsActions.fetchProducts, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(productsActions.setProducts, (state, { products }) => ({\r\n    ...state,\r\n    loading: false,\r\n    list: products,\r\n  })),\r\n  on(productsActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    loading: true,\r\n    error,\r\n  }))\r\n)"
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts": [
                {
                    "name": "FETCH_CATEGORIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Categories] Fetch Categories'"
                },
                {
                    "name": "fetchCategories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(FETCH_CATEGORIES)"
                },
                {
                    "name": "selectCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                    "type": "Story<StorydropdownComponent>",
                    "defaultValue": "(\r\n  args: StorydropdownComponent\r\n) => ({\r\n  component: StorydropdownComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/ecommerce-web-app/src/environments/environment.ts": [
                {
                    "name": "SET_ERROR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/'"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts": [
                {
                    "name": "dropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "searchDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                    "type": "Story<StorydropdownComponent>",
                    "defaultValue": "(\r\n  args: StorydropdownComponent\r\n) => ({\r\n  component: StorydropdownComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/server/src/environments/environment.prod.ts": [
                {
                    "name": "SET_SELECTED_CATEGORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/server/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "apps/server/src/environments/environment.ts": [
                {
                    "name": "setCategories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/server/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "apps/ubc-shell/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-shell/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "apps/ubc-shell/src/environments/environment.ts": [
                {
                    "name": "setError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-shell/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "apps/ecommerce-web-app/src/environments/environment.ts": [
                {
                    "name": "FETCH_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ecommerce-web-app/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "apps/ecommerce-web-app/src/environments/environment.prod.ts": [
                {
                    "name": "fetchProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ecommerce-web-app/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts": [
                {
                    "name": "FIGMA_BASE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FIGMA_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "neutral",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "(name: string) => cy.get(name)"
                }
            ],
            "apps/ui-library-e2e/src/support/app.po.ts": [
                {
                    "name": "getElementByClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "Story<StoryalertPageComponent>",
                    "defaultValue": "(\r\n  args: StoryalertPageComponent\r\n) => ({\r\n  component: StoryalertPageComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "getElementByName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                    "type": "",
                    "defaultValue": "(name: string) => cy.get(name)"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts": [
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "support",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "Story<StoryAlertComponent>",
                    "defaultValue": "(args: StoryAlertComponent) => ({\r\n  component: StoryAlertComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "FIGMA_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts": [
                {
                    "name": "Inputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Password",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  argTypes: {\r\n    types: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    active: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    affixTypes: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    hide: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdisabled: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iconType: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n        options: ['small', 'large'],\r\n      },\r\n    },\r\n  },\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    TextColor: '#000000',\r\n    status: 'default',\r\n    size: 'large',\r\n    styles: 'fillInput',\r\n    types: 'inputWithPassword',\r\n  },\r\n})"
                },
                {
                    "name": "Price",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                    "type": "Story<InputsComponent>",
                    "defaultValue": "(args: InputsComponent) => ({\r\n  component: InputsComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    TextColor: '#000000',\r\n    status: 'default',\r\n    size: 'large',\r\n    styles: 'fillInput',\r\n    types: 'inputWithTextarea',\r\n  },\r\n  argTypes: {\r\n    types: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    active: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    affixTypes: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    hide: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdisabled: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iconType: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n        options: ['small', 'large'],\r\n      },\r\n    },\r\n  },\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                    "type": "Story<ToggleComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ToggleComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts": [
                {
                    "name": "FIGMA_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=0%3A14'"
                },
                {
                    "name": "neutral",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "support",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                    "type": "Story<ColorsComponent>",
                    "defaultValue": "(args: ColorsComponent) => ({\r\n  component: ColorsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts": [
                {
                    "name": "featureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                    "type": "string",
                    "defaultValue": "'products'"
                },
                {
                    "name": "logo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Password",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                    "type": "Story<StoryLogoComponent>",
                    "defaultValue": "(args: StoryLogoComponent) => ({\r\n  component: StoryLogoComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts": [
                {
                    "name": "menu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts",
                    "type": "Story<HorizontalMenuStoryComponent>",
                    "defaultValue": "(\r\n  args: HorizontalMenuStoryComponent\r\n) => ({\r\n  component: HorizontalMenuStoryComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/dialog/dialog.stories.ts": [
                {
                    "name": "dialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dialog/dialog.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    backgroundColor: '#ffffff',\r\n    TextColor: '#000000',\r\n    status: 'default',\r\n    size: 'large',\r\n    styles: 'fillInput',\r\n    types: 'inputWithTextarea',\r\n  },\r\n  argTypes: {\r\n    types: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    active: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    affixTypes: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    getTheme: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    hide: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isdisabled: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    iconType: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ngOnInit: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    size: {\r\n      control: {\r\n        type: 'select',\r\n        options: ['small', 'large'],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url: FIGMA_URL,\r\n      },\r\n    },\r\n  },\r\n})"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts": [
                {
                    "name": "figmaURL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://www.figma.com/file/Mk6eg4lVzGvcayB80diMlC/VTR---Design-System?node-id=0%3A1053'"
                },
                {
                    "name": "Group",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "TemplateGroup.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RadioBtnError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "Story<RadiobuttonComponent>",
                    "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "TemplateGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                    "type": "Story<RadiobuttonComponent>",
                    "defaultValue": "(args) => ({\r\n  component: RadiobuttonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/ecommerce-web-app-e2e/src/support/app.po.ts": [
                {
                    "name": "getElementByClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ecommerce-web-app-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "(name: string) => cy.get(name)"
                },
                {
                    "name": "getElementByName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ecommerce-web-app-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "(name: string) => cy.get(name)"
                }
            ],
            "apps/ui-library-e2e/src/support/app.po.ts": [
                {
                    "name": "getElementByClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ui-library-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "(name: string) => cy.get(name)"
                },
                {
                    "name": "getElementByName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ui-library-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "(name: string) => cy.get(name)"
                }
            ],
            "apps/ui-library-e2e/src/support/app.po.ts": [
                {
                    "name": "getElementByClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ui-library-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "(name: string) => cy.get(name)"
                },
                {
                    "name": "getElementByName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ui-library-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "(name: string) => cy.get(name)"
                }
            ],
            "apps/ubc-shell-e2e/src/support/app.po.ts": [
                {
                    "name": "getGreeting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/ubc-shell-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "() => cy.get('h1')"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/grid/grid.stories.ts": [
                {
                    "name": "grid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/grid/grid.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatGridListModule],\r\n  },\r\n  component: GridComponent,\r\n  props: {},\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/grid/grid.stories.ts": [
                {
                    "name": "grid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/grid/grid.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  moduleMetaData: {\r\n    imports: [MatGridListModule],\r\n  },\r\n  component: GridComponent,\r\n  props: {},\r\n})"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/icons/icons.stories.ts": [
                {
                    "name": "icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/icons/icons.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/icons/icons.stories.ts",
                    "type": "Story<IconsComponent>",
                    "defaultValue": "(args: IconsComponent) => ({\r\n  component: IconsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/icons/icons.stories.ts": [
                {
                    "name": "icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                    "type": "Story<IconsComponent>",
                    "defaultValue": "(args: IconsComponent) => ({\r\n  component: IconsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.stories.ts": [
                {
                    "name": "imgGallery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.stories.ts",
                    "type": "Story<StoryImgGalleryComponent>",
                    "defaultValue": "(\r\n  args: StoryImgGalleryComponent\r\n) => ({\r\n  component: StoryImgGalleryComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts": [
                {
                    "name": "LargeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SmallText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                    "type": "Story<StorySelectorComponent>",
                    "defaultValue": "(\r\n  args: StorySelectorComponent\r\n) => ({\r\n  component: StorySelectorComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/button/button.stories.ts": [
                {
                    "name": "link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    isLink: true,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    isPrimary: true,\r\n    isdisabled: false,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n          'btn-icon large-icon',\r\n          'btn-icon small-icon',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    isSecondary: true,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n          'btn-icon large-icon',\r\n          'btn-icon small-icon',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                    "type": "Story<ButtonsComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ButtonsComponent,\r\n  props: args,\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts": [
                {
                    "name": "link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    isLink: true,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    isPrimary: true,\r\n    isdisabled: false,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n          'btn-icon large-icon',\r\n          'btn-icon small-icon',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\r\n  args: {\r\n    isSecondary: true,\r\n    text: 'Main CTA',\r\n    extraClass: 'btn-large',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  argTypes: {\r\n    isPrimary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    bgcolor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    ghostText: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isLink: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    isSecondary: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    TextColor: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    extraClass: {\r\n      control: {\r\n        type: 'select',\r\n        options: [\r\n          'btn-large',\r\n          'btn-small',\r\n          'btn-large-icon btn-right',\r\n          'btn-large-icon btn-left',\r\n          'btn-small-icon btn-right',\r\n          'btn-small-icon btn-left',\r\n          'btn-icon large-icon',\r\n          'btn-icon small-icon',\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  story: {\r\n    parameters: {\r\n      design: {\r\n        type: 'figma',\r\n        url:\r\n          'https://www.figma.com/file/fTqnD15ePo6ooeHk3F1Jug/VTR?node-id=564%3A1936',\r\n      },\r\n    },\r\n  },\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                    "type": "Story<ButtonsComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ButtonsComponent,\r\n  props: args,\r\n  moduleMetadata: {\r\n    imports: [MatButtonModule],\r\n  },\r\n})"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/list/list.stories.ts": [
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/list/list.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/list/list.stories.ts",
                    "type": "Story<ListComponent>",
                    "defaultValue": "(args) => ({\r\n  component: ListComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.stories.ts": [
                {
                    "name": "list",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                    "type": "Story<StoryLogoPageComponent>",
                    "defaultValue": "(\r\n  args: StoryLogoPageComponent\r\n) => ({\r\n  component: StoryLogoPageComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts": [
                {
                    "name": "logo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                    "type": "Story<StoryLogoComponent>",
                    "defaultValue": "(args: StoryLogoComponent) => ({\r\n  component: StoryLogoComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts": [
                {
                    "name": "logo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                    "type": "Story<StoryLogoComponent>",
                    "defaultValue": "(args: StoryLogoComponent) => ({\r\n  component: StoryLogoComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts": [
                {
                    "name": "menu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts",
                    "type": "Story<HorizontalMenuStoryComponent>",
                    "defaultValue": "(\r\n  args: HorizontalMenuStoryComponent\r\n) => ({\r\n  component: HorizontalMenuStoryComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts": [
                {
                    "name": "menu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/horizontal-menu/horizontal-menu.stories.ts",
                    "type": "Story<HorizontalMenuStoryComponent>",
                    "defaultValue": "(\r\n  args: HorizontalMenuStoryComponent\r\n) => ({\r\n  component: HorizontalMenuStoryComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/molecule/dialog/dialog.stories.ts": [
                {
                    "name": "dialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dialog/dialog.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/molecule/dialog/dialog.stories.ts",
                    "type": "Story<StoryDialogComponent>",
                    "defaultValue": "(\r\n  args: StoryDialogComponent\r\n) => ({\r\n  component: StoryDialogComponent,\r\n  props: args,\r\n})"
                }
            ],
            "apps/server/src/app/services/crendentials.ts": [
                {
                    "name": "pswd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/server/src/app/services/crendentials.ts",
                    "type": "string",
                    "defaultValue": "'SomeStrongPassword1-'"
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts": [
                {
                    "name": "selectCategories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCategoriesFeature,\r\n  ({ list }) => list\r\n)"
                },
                {
                    "name": "selectCategoriesFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.categories"
                },
                {
                    "name": "selectError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCategoriesFeature,\r\n  ({ error }) => error\r\n)"
                },
                {
                    "name": "selectLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCategoriesFeature,\r\n  ({ loading }) => loading\r\n)"
                },
                {
                    "name": "selectSelectedCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(selectCategories, (list) =>\r\n  list.find((category) => category.isSelected)\r\n)"
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts": [
                {
                    "name": "selectError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProductsFeature,\r\n  ({ error }) => error\r\n)"
                },
                {
                    "name": "selectLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProductsFeature,\r\n  ({ loading }) => loading\r\n)"
                },
                {
                    "name": "selectProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProductsFeature,\r\n  ({ list }) => list\r\n)"
                },
                {
                    "name": "selectProductsBySelectedCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProducts,\r\n  selectSelectedCategory,\r\n  (products, selectedCategory) =>\r\n    products.filter((product) => selectedCategory?.value === product.category)\r\n)"
                },
                {
                    "name": "selectProductsFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.products"
                }
            ],
            "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts": [
                {
                    "name": "storeReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  [fromProducts.featureKey]: fromProducts.reducer,\r\n  [fromCategories.featureKey]: fromCategories.reducer,\r\n}"
                }
            ],
            "apps/storybook-app/src/app/stories/atom/tabs/tabs.stories.ts": [
                {
                    "name": "Tab",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/tabs/tabs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/storybook-app/src/app/stories/atom/tabs/tabs.stories.ts",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args) => ({\r\n  component: TabsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "libs/shared/ui-library/src/lib/stories/atom/tabs/tabs.stories.ts": [
                {
                    "name": "Tab",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/tabs/tabs.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/ui-library/src/lib/stories/atom/tabs/tabs.stories.ts",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args) => ({\r\n  component: TabsComponent,\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "apps/server/src/main.ts": [
                {
                    "name": "bootstrap",
                    "file": "apps/server/src/main.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/shared/util-library/src/lib/url-parser.util.ts": [
                {
                    "name": "removeBackSlashFromUrl",
                    "file": "libs/shared/util-library/src/lib/url-parser.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>A function to remove the backslash from resource url path.\nfor example:\ninput :&quot;https://cms-dev.lla.digital/uploads/<em>/originals/9d8504d1-4468-4777-a9b1-ead19bf7cb53.jpg&quot;\noutput :&quot;<a href=\"https://cms-dev.lla.digital/uploads/\">https://cms-dev.lla.digital/uploads/</a></em>/originals/9d8504d1-4468-4777-a9b1-ead19bf7cb53.jpg&quot;</p>\n",
                    "args": [
                        {
                            "name": "url"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 306,
                                "end": 309,
                                "flags": 0,
                                "escapedText": "url"
                            },
                            "tagName": {
                                "pos": 300,
                                "end": 305,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts": [
                {
                    "name": "AppState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts",
                    "description": "",
                    "kind": 176
                }
            ],
            "libs/shared/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts": [
                {
                    "name": "CARD_VARIANT",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"FULLSIZE\" | \"FULLSIZECTA\" | \"FULLSIZEPRICE\"",
                    "file": "libs/shared/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts": [
                {
                    "name": "CategoriesAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ReturnType<> | ReturnType<> | ReturnType<> | ReturnType<>",
                    "file": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "apps/storybook-app/src/app/stories/atom/colors/colors.component.ts": [
                {
                    "name": "colors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"neutral\" | \"teritary\"",
                    "file": "apps/storybook-app/src/app/stories/atom/colors/colors.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/shared/ui-library/src/lib/components/input-code/input-code.component.ts": [
                {
                    "name": "COMPENETSTATUS",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"SUCCESS\" | \"ERROR\" | \"DEFAULT\"",
                    "file": "libs/shared/ui-library/src/lib/components/input-code/input-code.component.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "COMPENETTYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"FILLIN\" | \"OUTLINE\"",
                    "file": "libs/shared/ui-library/src/lib/components/input-code/input-code.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/shared/ui-library/src/lib/components/alert/alert.component.ts": [
                {
                    "name": "COMPONENT_OPACITY",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"24\" | \"40\" | \"100\"",
                    "file": "libs/shared/ui-library/src/lib/components/alert/alert.component.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "COMPONENT_STATUS",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"SUCCESS\" | \"WARNING\" | \"ERROR\" | \"INFO\"",
                    "file": "libs/shared/ui-library/src/lib/components/alert/alert.component.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "COMPONENT_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"full-width\" | \"default\"",
                    "file": "libs/shared/ui-library/src/lib/components/alert/alert.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/shared/ui-library/src/lib/components/labels/labels.component.ts": [
                {
                    "name": "COMPONENT_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"product\" | \"discount\" | \"featured\"",
                    "file": "libs/shared/ui-library/src/lib/components/labels/labels.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "apps/storybook-app/src/app/stories/atom/inputs/inputs.component.ts": [
                {
                    "name": "position",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"prefix\" | \"suffix\"",
                    "file": "apps/storybook-app/src/app/stories/atom/inputs/inputs.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts": [
                {
                    "name": "ProductsAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ReturnType<> | ReturnType<> | ReturnType<>",
                    "file": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts": [
                {
                    "name": "STATUS",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"error\" | \"\"",
                    "file": "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts": [
                {
                    "name": "STATUS",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"error\" | \"\"",
                    "file": "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/shared/ui-library/src/lib/components/dropdown/select-dropdown/select-dropdown.component.ts": [
                {
                    "name": "STATUS",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"error\" | \"\"",
                    "file": "libs/shared/ui-library/src/lib/components/dropdown/select-dropdown/select-dropdown.component.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "apps/ecommerce-web-app/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts",
                "module": "ProductCatalogueModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/viewports.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ecommerce-web-app-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getElementByClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ecommerce-web-app-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getElementByName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ecommerce-web-app-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/ecommerce-web-app/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/ecommerce-web-app/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ecommerce-web-app/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/app.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "AppController",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/menu/menu.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "MenuController",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/middlewares/auth.middlware.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthMiddleware",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/services/crendentials.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pswd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "apps/server/src/app/services/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/user/user.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "UserController",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/main.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/.storybook/viewports.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/button-groups/btn-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtongroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/button-groups/btn-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/button-groups/btn-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/colors/colors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorsComponent",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "neutral",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "support",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/grid/grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "grid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "name": "routes",
                "filename": "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts",
                "module": "ProductCatalogueModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/icons/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/icons/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/inputs/inputs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Password",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Price",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "name": "routes",
                "filename": "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts",
                "module": "ProductCatalogueModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ecommerce-web-app-e2e/src/integration/homePageObjectLib.ts",
                "type": "class",
                "linktype": "classe",
                "name": "homepageobject",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "apps/ecommerce-web-app-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/list/list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadiobuttonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "figmaURL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RadioBtnError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tab",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bigsizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "body",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "figmaURL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textcombinations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/server/src/app/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "apps/server/src/app/services/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/app/stories/molecule/alert/storybookalertcomponent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorybookAlertComponent",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/storybook-app/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGreeting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell/src/app/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ubc-shell/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ui-library-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getElementByClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ui-library-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getElementByName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/ui-library-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/components/ecommerce-webform/ecommerce-webform.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EcommerceWebformComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/components/product-catalogue/product-catalogue.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductCatalogueComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/components/product-category/product-category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductCategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/components/product-listing/product-listing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/components/terms-condition/terms-condition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TermsConditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/components/webform-modal/webform-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WebformModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/product-catalogue.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storeReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/services/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/services/terms-condition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TermsConditionService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/services/terms-condition.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "responseApi",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FETCH_CATEGORIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchCategories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_CATEGORIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_ERROR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_SELECTED_CATEGORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setCategories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/categories.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FETCH_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_ERROR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/effects/categories.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/effects/products.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CategoriesState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "categoriesReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "featureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/categories.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductsState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "featureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/reducers/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCategories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCategoriesFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/categories.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductsBySelectedCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/domains/product-catalogue/src/lib/store/selectors/products.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductsFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/feature-library/src/lib/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/shared/feature-library/src/lib/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/cards/centered-card/centered-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CenteredCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/cards/cta-card/cta-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CtaCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/cards/fullsize-card/fullsize-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FullsizeCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/cards/plans-card/plans-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlansCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/cards/wide-card/wide-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WideCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/dropdown/search-dropdown/search-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchDropdownComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/dropdown/select-dropdown/select-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImgGalleryComponent",
                "coveragePercent": 33,
                "coverageCount": "4/12",
                "status": "medium"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Iimages",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/img-gallery/img-gallery.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Imatrix",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/input-code/input-code.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputCodeComponent",
                "coveragePercent": 40,
                "coverageCount": "6/15",
                "status": "medium"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/labels/labels.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/components/selectors/selectors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/button-group.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IButtonGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/centered-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICenteredCard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/cta-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICtaCard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/custom-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICustomCard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/fullsize-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFullSizeCard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/plans-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPlanCard",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/plans-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPlanContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/select-box.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "iSelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/interfaces/wide-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWideCard",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtongroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/button-groups/btn-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorsComponent",
                "coveragePercent": 17,
                "coverageCount": "3/17",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "neutral",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "support",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/colors/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/grid/grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "grid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/icons/icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/icons/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputsComponent",
                "coveragePercent": 6,
                "coverageCount": "1/15",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Password",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Price",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/inputs/inputs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/list/list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "list",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/list/list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadiobuttonComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "figmaURL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/radiobutton/radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tab",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bigsizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "body",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "figmaURL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/atom/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textcombinations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_BASE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/alert/storyalert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryAlertComponent",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorybreadCrumbComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "breadCrumb",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/breadcrumb/breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryCardComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "centeredCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CTACARD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullsizeCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullsizewithCTACard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullsizewithPriceCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "plansCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "wideCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorydropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "searchDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryImgGalleryComponent",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imgGallery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/img_gallery/imgGallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryinputCodeComponent",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Code",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/input code/inputCode.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryLabelsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "discount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "featured",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIGMA_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "product",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/labels/labels.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryLogoComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/logo/logo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorySelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LargeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmallText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/molecule/selectors/selectors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryalertPageComponent",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/alert/alertPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryLogoPageComponent",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/ui-library/src/lib/stories/page/logo/logoPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/button-group.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IButtonGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/custom-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICustomCard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDomain",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDomainDetails",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMainMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/menu/main-menu.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITranslation",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/dialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/plans-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPlanCard",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/plans-card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPlanContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/product/product-categories.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICategory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/product/product-categories.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICategoryList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICategoryAPI",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEcommerceUserAPI",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProductList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/product/product.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProductListAPI",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectorsContent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/terms-condition.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITermsCondition",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/user/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOAuthToken",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/interface/user/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/shared/util-library/src/lib/url-parser.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "removeBackSlashFromUrl",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            }
        ]
    }
}