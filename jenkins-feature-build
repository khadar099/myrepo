pipeline{
        agent {label 'master'}
        tools {nodejs "nodejs"}
        environment {
        CHROME_BIN = "/bin/google-chrome"
        BRANCH = "${env.BRANCH_NAME}"
        NAME = BRANCH.replaceAll('/', '-').toLowerCase()
        SERVER_PREFIX = "fl-server-app"
        MULE_SERVER_PREFIX = "fl-mule-connector-app"
        DIRECTUS_SERVER_PREFIX = "fl-directus-connector-app"
        VERSION = "${env.VERSION == 'latest' ? "${BUILD_NUMBER}" : "${env.VERSION}"}"
        environment= "${env.environment}"
        ECR = "712965751785.dkr.ecr.us-east-1.amazonaws.com"
        ECR_REGION = "us-east-1"
        YARN_REPO_NAME = "vtr-yarn-package"
        CLIENT_APP_REPO_NAME = "vtr-client-app-non-prod"
        MULE_SERVER_REPO_NAME = "mule-connector-app-non-prod"
        SERVER_APP_REPO_NAME = "hybris-connector-app-non-prod"
        DIRECTUS_APP_REPO_NAME = "directus-connector-app-non-prod"
    }
options {
      timeout(time: 20, unit: "MINUTES") 
      buildDiscarder logRotator(artifactDaysToKeepStr: "", artifactNumToKeepStr: "", daysToKeepStr: "2", numToKeepStr: "2")
  }    
stages
{
stage("Stop Old Build") {
            steps {
                milestone label: "", ordinal:  Integer.parseInt(env.BUILD_ID) - 1
                milestone label: "", ordinal:  Integer.parseInt(env.BUILD_ID)
            }
        }
        
stage('Validating Branch') {
                when {
                    not {
                        anyOf {
			    branch 'feat/*';
                            branch 'feature/*'
                            branch 'bug/*'
                            branch 'bugfix/*'
                            branch 'release/*'
                            branch 'hotfix/*'
                            branch 'PR-*'
			    branch 'e2e/*'
                            branch 'develop'
			    branch 'fix/*'
                            
                            
                            }
                        }
                    }
                    steps {
                            echo ('Not a Valid Branch Name')
                            sh 'do-non.sh'
                        }
                }		
stage("Docker_login")
{
    steps {
        sh "aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR}"
    }
}
stage("yarn:pull")
{
    steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            sh "docker pull ${ECR}/${YARN_REPO_NAME}:yarn-latest"
        }
    }
} 
stage("image: yarn install")
{
    steps {
        sh "docker build -t yarn:latest -f devops/docker-yarn ."
        sh "docker tag yarn:latest ${ECR}/${YARN_REPO_NAME}:yarn-latest"
    }
}
stage("yarn package:push")
{
    steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            sh "docker push ${ECR}/${YARN_REPO_NAME}:yarn-latest"
        }
    }
} 

 stage("image: client app")
{
    steps {
        sh "docker build -t ${NAME}:${VERSION} -f devops/docker-client ."
    }
}
stage("image: server app")
{
    steps {
        sh "docker build -t ${SERVER_PREFIX}-${NAME}:${VERSION} -f  devops/docker-hybris-connector . "
    }
}
stage("image: mule-connector app")
{
    steps {
        sh "docker build -t ${MULE_SERVER_PREFIX}-${NAME}:${VERSION} -f devops/docker-mule-connector ."
    }
}
stage("image: directus-connector app")
{
    steps {
        sh "docker build -t ${DIRECTUS_SERVER_PREFIX}-${NAME}:${VERSION} -f devops/docker-directus-connector ."
    }
}
stage("image:tag")
{
    steps {
	sh "docker tag ${NAME}:${VERSION} ${ECR}/${CLIENT_APP_REPO_NAME}:${NAME}-${VERSION}"
        sh "docker tag ${SERVER_PREFIX}-${NAME}:${VERSION} ${ECR}/${SERVER_APP_REPO_NAME}:${SERVER_PREFIX}-${NAME}-${VERSION}"
        sh "docker tag ${MULE_SERVER_PREFIX}-${NAME}:${VERSION} ${ECR}/${MULE_SERVER_REPO_NAME}:${MULE_SERVER_PREFIX}-${NAME}-${VERSION}"
        sh "docker tag ${DIRECTUS_SERVER_PREFIX}-${NAME}:${VERSION} ${ECR}/${DIRECTUS_APP_REPO_NAME}:${DIRECTUS_SERVER_PREFIX}-${NAME}-${VERSION}"
        }
 }  
stage("image:push")
{
    steps {
	sh "docker push ${ECR}/${CLIENT_APP_REPO_NAME}:${NAME}-${VERSION}"
        sh "docker push ${ECR}/${SERVER_APP_REPO_NAME}:${SERVER_PREFIX}-${NAME}-${VERSION}"
        sh "docker push ${ECR}/${MULE_SERVER_REPO_NAME}:${MULE_SERVER_PREFIX}-${NAME}-${VERSION}"
        sh "docker push ${ECR}/${DIRECTUS_APP_REPO_NAME}:${DIRECTUS_SERVER_PREFIX}-${NAME}-${VERSION}"
    }
} 
stage("clearing_docker_images")
{
    steps {
        sh "docker rmi ${NAME}:${VERSION} "
        sh "docker rmi ${SERVER_PREFIX}-${NAME}:${VERSION}"
        sh "docker rmi ${MULE_SERVER_PREFIX}-${NAME}:${VERSION}"
        sh "docker rmi ${DIRECTUS_SERVER_PREFIX}-${NAME}:${VERSION}"
    }
 }        
}
post {
     success {
         script {
                    
            build job: 'Feature-Deployment',
                parameters: [
                  [$class: 'StringParameterValue', name: 'BRANCH_NAME', value: "${BRANCH}"],
                  [$class: 'StringParameterValue', name: 'VERSION', value: "${VERSION}"],
                  [$class: 'StringParameterValue', name: 'environment', value: "${environment}"]
                ]   
        
     }
}
        // Clean after build
        always {
            cleanWs()
        }
    }
}
